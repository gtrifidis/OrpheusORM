{
  "documentation/orpheus_module.html": {
    "href": "documentation/orpheus_module.html",
    "title": "Orpheus Module | Orpheus ORM",
    "keywords": "Orpheus Module OrpheusModule class represents a logical division and grouping of a set of tables. For example you can have an OrdersModule , which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module will be saved as well. All master-detail relationships and keys will be updated automatically. Whats does the above mean exactly? You can use an OrpheusModule to logically group/divide your business logic. Using the example above, having an OrdersModule , you can have your BL for adding, updating and deleting orders in one place. The OrpheusModule will manage for you, the master-detail relationships in your module. For example an OrderLine must always have an OrderId. If you were to use separate tables to achieve the same functionality, you would have to enter and synchronize the master-detail key values manually. A quick example Let's assume that you have the following model: Transactor model (Customer, Supplier) public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } Item model, the order item. public class TestModelItem { [PrimaryKey(false)] public Guid ItemId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [DefaultValue(0)] public double Price { get; set; } } Order models. public class TestModelOrder { [PrimaryKey] public Guid OrderId { get; set; } [ForeignKey(\"TestModelTransactor\", \"TransactorId\")] public Guid TransactorId { get; set; } public DateTime OrderDateTime { get; set; } } public class TestModelOrderLine { [PrimaryKey] public Guid OrderLineId { get; set; } [ForeignKey(\"TestModelOrder\",\"OrderId\")] public Guid OrderId { get; set; } [ForeignKey(\"TestModelItem\", \"ItemId\")] public Guid ItemId { get; set; } [DefaultValue(0)] public double Quantity { get; set; } public double Price { get; set; } public double TotalPrice { get; set; } } Creating an OrpheusModule There are a couple of ways to instantiate an OrpheusModule, the most straight forward way is to use an IOrpheusModuleDefinition . Creating the definition object. IOrpheusDatabase db = OrpheusCore.ServiceProvider.Provider.Resolve<IOrpheusDatabase>(); var moduleDefinition = db.CreateModuleDefinition(); Configuring the definition object. moduleDefinition.MainTableOptions = moduleDefinition.CreateTableOptions(\"TestModelOrder\",typeof(TestModelOrder)); moduleDefinition.ReferenceTableOptions.Add(moduleDefinition.CreateTableOptions(\"TestModelTransactor\", typeof(TestModelTransactor))); moduleDefinition.ReferenceTableOptions.Add(moduleDefinition.CreateTableOptions(\"TestModelItem\", typeof(TestModelItem))); var detailTableOptions = moduleDefinition.CreateTableOptions(\"TestModelOrderLine\", typeof(TestModelOrderLine)); detailTableOptions.MasterTableName = \"TestModelOrder\"; detailTableOptions.AddMasterKeyField(\"OrderId\"); moduleDefinition.DetailTableOptions.Add(detailTableOptions); Creating the module. var module = this.Database.CreateModule(moduleDefinition); Getting references to module tables. var transactors = module.GetReferenceTable<TestModelTransactor>(\"TestModelTransactor\"); var items = module.GetReferenceTable<TestModelItem>(\"TestModelItem\"); var orderLines = module.GetTable<TestModelOrderLine>(\"TestModelOrderLine\"); var order = module.GetTable<TestModelOrder>(\"TestModelOrder\"); Populating auxiliary data. //populating auxiliary data. transactors.Add(TestDatabase.GetTransactors()); items.Add(TestDatabase.GetItems()); using (var tr = this.Database.BeginTransaction()) { transactors.ExecuteInserts(tr); items.ExecuteInserts(tr); try { tr.Commit(); } catch { throw; } } transactors.Load(); items.Load(); Entering a new order. order.Add(new TestModelOrder() { OrderId = Guid.NewGuid(), OrderDateTime = DateTime.Now, TransactorId = transactors.Data.First().TransactorId }); //OrderId will be set automatically. orderLines.Add(new TestModelOrderLine() { ItemId = items.Data.First().ItemId, OrderLineId = Guid.NewGuid(), Price = 5, Quantity = 10, TotalPrice = 50 }); module.Save();"
  },
  "documentation/orpheus_table.html": {
    "href": "documentation/orpheus_table.html",
    "title": "Orpheus Table | Orpheus ORM",
    "keywords": "Orpheus Table Orpheus table is the core class of OrpheusORM. It is responsible for the actual executing of the Delete Update Insert commands to modify data. It's also responsible for loading data, with or without criteria. So you can load all the data of the underlying database table or a subset of it. It is model agnostic and you can declaratively define the model for the table. The model for the table is/should be basically a representation of the database table fields. When to use it There is no limitation per se, for when to use the OrpheusTable class. From a logical separation perspective, it would make more sense, if you were saving data to a table that has no detail tables. Orpheus Module is the class to use, when you have multiple tables, with dependencies to each other. A quick example Let's assume you have the following model public enum TestModelTransactorType { ttCustomer, ttSupplier } public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } You can declare the table in your code public class TransactorsTable:OrpheusTable<TestModelTransactor> { } var transactorsTable = new TransactorsTable(); or create an instance of the table using the OrpheusDatabase IOrpheusDatabase db = OrpheusCore.ServiceProvider.Provider.Resolve<IOrpheusDatabase>(); var transactorsTable = db.CreateTable<TestModelTransactor>(); Note: The database does not keep a reference for the created table. After you have a table instance, you can add, update and delete data from your table. IOrpheusDatabase db = OrpheusCore.ServiceProvider.Provider.Resolve<IOrpheusDatabase>(); var transactorsTable = db.CreateTable<TestModelTransactor>(); var transactor = new TestModelTransactor(){ TransactorId = Guid.NewGuid(), Code = '001', Description = 'Transactor1' }; transactorsTable.Add(transactor); transactorsTable.Save(); Note:The table save will be executed within a transaction, so in case of any error, changes will be rolled back."
  },
  "examples/define_dbengine.html": {
    "href": "examples/define_dbengine.html",
    "title": "Defining database engine | Orpheus ORM",
    "keywords": "Defining database engine OrpheusORM uses Unity in order to have the same code base for all supported database engines. To configure which database engine to use, you need only to update the unity configuration section with the appropriate types. SQL Server <unity xmlns=\"http://schemas.microsoft.com/practices/2010/unityx\"> <assembly name=\"System.Data,4.0.0.0 ,Culture=neutral,PublicKeyToken=b77a5c561934e089\"/> <alias alias=\"IDbConnection\" type=\"System.Data.IDbConnection, System.Data\"/> <alias alias=\"SqlConnection\" type=\"System.Data.SqlClient.SqlConnection, System.Data\"/> <register type=\"IDbConnection\" mapTo=\"SqlConnection\"> <constructor/> </register> MySQL <unity xmlns=\"http://schemas.microsoft.com/practices/2010/unityx\"> <assembly name=\"System.Data,4.0.0.0 ,Culture=neutral,PublicKeyToken=b77a5c561934e089\"/> <alias alias=\"IDbConnection\" type=\"System.Data.IDbConnection, System.Data\"/> <alias alias=\"MySqlConnection\" type=\"MySql.Data.MySqlClient.MySqlConnection, MySql.Data\"/> <register type=\"IDbConnection\" mapTo=\"MySqlConnection\"> <constructor/> </register>"
  },
  "examples/update_module.html": {
    "href": "examples/update_module.html",
    "title": "Using an OrpheusModule | Orpheus ORM",
    "keywords": "Using an OrpheusModule var sqlServerConnectionString = @\"Data Source=[yourserver];Initial Catalog=orpheusTestDB;Integrated Security=True\"; var db = OrpheusIocContainer.Resolve<IOrpheusDatabase>(); //Connect to the database. db.Connect(sqlServerConnectionString); var module = OrpheusIocContainer.Resolve<IOrpheusModule>(new ResolverOverride[] { new ParameterOverride(\"database\",db) }); module.ReferenceTables.Add(this.Database.CreateTable<TestModelTransactor>(\"TestModelTransactor\")); module.ReferenceTables.Add(this.Database.CreateTable<TestModelItem>(\"TestModelItem\")); module.Tables.Add(this.Database.CreateTable<TestModelOrder>(\"TestModelOrder\")); var order = module.GetTable<TestModelOrder>(\"TestModelOrder\"); var orderLineOptions = OrpheusIocContainer.Resolve<IOrpheusTableOptions>(); orderLineOptions.TableName = \"TestModelOrderLine\"; orderLineOptions.MasterTableKeyFields = new List<IOrpheusTableKeyField>(); orderLineOptions.Database = this.Database; var orderMasterKeyField = OrpheusIocContainer.Resolve<IOrpheusTableKeyField>(); orderMasterKeyField.Name = \"OrderId\"; orderLineOptions.MasterTableKeyFields.Add(orderMasterKeyField); orderLineOptions.MasterTableName = \"TestModelOrder\"; module.Tables.Add(this.Database.CreateTable<TestModelOrderLine>(orderLineOptions)); var transactors = module.GetReferenceTable<TestModelTransactor>(\"TestModelTransactor\"); var items = module.GetReferenceTable<TestModelItem>(\"TestModelItem\"); var orderLines = module.GetTable<TestModelOrderLine>(\"TestModelOrderLine\"); orderLines.MasterTable = order; //populating auxiliary data. transactors.Add(GetTransactors()); items.Add(GetItems()); using(var tr = db.BeginTransaction()) { transactors.ExecuteInserts(tr); items.ExecuteInserts(tr); try { tr.Commit(); } catch { throw; } } //loading auxiliary data in memory. transactors.Load(); items.Load(); order.Add(new TestModelOrder() { OrderId = Guid.NewGuid(), OrderDateTime = DateTime.Now, TransactorId = transactors.Data.First().TransactorId }); orderLines.Add(new TestModelOrderLine() { ItemId = items.Data.First().ItemId, OrderLineId = Guid.NewGuid(), Price = 5, Quantity = 10, TotalPrice = 50 }); //saving the module will save both _Order_ and *OrderLine* tables module.Save();"
  },
  "examples/update_single_table.html": {
    "href": "examples/update_single_table.html",
    "title": "| Orpheus ORM",
    "keywords": "Using a single OrpheusTable = var sqlServerConnectionString = @\"Data Source=[yourserver];Initial Catalog=orpheusTestDB;Integrated Security=True\"; var db = OrpheusIocContainer.Resolve<IOrpheusDatabase>(); //Connect to the database. db.Connect(sqlServerConnectionString); //create a table options object and create the orpheus table. var tableOptions = OrpheusIocContainer.Resolve<IOrpheusTableOptions>(); tableOptions.TableName = \"TestModelUser\"; tableOptions.KeyFields = new List<IOrpheusTableKeyField>(); var usersTable = this.Database.CreateTable<TestModelUser>(tableOptions); //add one or more TestModelUser records usersTable.Add(TestDatabase.GetRandomUsersForTesting(recordCount)); IDbTransaction trans = this.Database.BeginTransaction(); try { usersTable.ExecuteInserts(trans); trans.Commit(); } catch(Exception e) { trans.Rollback(); throw e; }"
  },
  "api/OrpheusInterfaces.IOrpheusTable.html": {
    "href": "api/OrpheusInterfaces.IOrpheusTable.html",
    "title": "Interface IOrpheusTable | Orpheus ORM",
    "keywords": "Interface IOrpheusTable Orpheus table is the core Orpheus data object. It is responsible for performing data operations. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTable Properties | Improve this Doc View Source DetailTables List of dependent detail tables. Declaration List<IOrpheusTable> DetailTables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > List of detail tables | Improve this Doc View Source KeyFields Table's key field(s). Declaration List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > Table's key field(s) | Improve this Doc View Source Level Table's level. Zero if the table is not a child to any other table. Declaration int Level { get; } Property Value Type Description System.Int32 Table's level | Improve this Doc View Source MasterTable Master table name, if the table is a detail table. Declaration IOrpheusTable MasterTable { get; set; } Property Value Type Description IOrpheusTable Master table name | Improve this Doc View Source MasterTableKeyFields Master table's key field(s), if the table is detail table. Declaration List<IOrpheusTableKeyField> MasterTableKeyFields { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > Master table key fields | Improve this Doc View Source Modified True when table data have been modified. Declaration bool Modified { get; } Property Value Type Description System.Boolean True if table data have been modified | Improve this Doc View Source Name The table name. Declaration string Name { get; } Property Value Type Description System.String Table name Methods | Improve this Doc View Source ClearData() Clears existing loaded data. Declaration void ClearData() | Improve this Doc View Source ExecuteDeletes(IDbTransaction) Executes any delete changes that the table has. Declaration void ExecuteDeletes(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source ExecuteInserts(IDbTransaction) Executes any insert changes that the table has. Declaration void ExecuteInserts(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source ExecuteUpdates(IDbTransaction) Executes any update changes that the table has. Declaration void ExecuteUpdates(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source GetKeyValues() Returns list of current key values. Declaration List<object> GetKeyValues() Returns Type Description System.Collections.Generic.List < System.Object > List of current key values | Improve this Doc View Source Load(Dictionary<String, List<Object>>, Boolean) Loads records from the DB to the table. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields are bound with a logical AND Declaration void Load(Dictionary<string, List<object>> keyValues, bool clearExistingData = true) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < System.Object >> keyValues System.Boolean clearExistingData | Improve this Doc View Source Load(List<Object>, Boolean) Loads records from the DB to the table. Declaration void Load(List<object> keyValues = null, bool clearExistingData = true) Parameters Type Name Description System.Collections.Generic.List < System.Object > keyValues System.Boolean clearExistingData | Improve this Doc View Source Load(String, Boolean) Loads table data by executing a SQL command. Declaration void Load(string SQL, bool clearExistingData = true) Parameters Type Name Description System.String SQL SQL command to be executed System.Boolean clearExistingData | Improve this Doc View Source Save(IDbTransaction) Save changes to the database. Declaration void Save(IDbTransaction dbTransaction = null) Parameters Type Name Description System.Data.IDbTransaction dbTransaction Transaction in which the commands will be executed Events | Improve this Doc View Source OnAfterSave Occurs after the transaction has been committed. Declaration event EventHandler<ISaveEventArguments> OnAfterSave Event Type Type Description System.EventHandler < ISaveEventArguments > | Improve this Doc View Source OnBeforeSave Occurs before records are save in the database. Declaration event EventHandler<ISaveEventArguments> OnBeforeSave Event Type Type Description System.EventHandler < ISaveEventArguments >"
  },
  "api/OrpheusInterfaces.IPrimaryKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.IPrimaryKeySchemaConstraint.html",
    "title": "Interface IPrimaryKeySchemaConstraint | Orpheus ORM",
    "keywords": "Interface IPrimaryKeySchemaConstraint A primary key constraint. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IPrimaryKeySchemaConstraint : ISchemaConstraint"
  },
  "api/OrpheusInterfaces.IUniqueKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.IUniqueKeySchemaConstraint.html",
    "title": "Interface IUniqueKeySchemaConstraint | Orpheus ORM",
    "keywords": "Interface IUniqueKeySchemaConstraint A unique key constraint. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IUniqueKeySchemaConstraint : ISchemaConstraint"
  },
  "api/OrpheusInterfaces.SchemaJoinOperator.html": {
    "href": "api/OrpheusInterfaces.SchemaJoinOperator.html",
    "title": "Enum SchemaJoinOperator | Orpheus ORM",
    "keywords": "Enum SchemaJoinOperator Join operator type. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum SchemaJoinOperator Fields Name Description joEquals Equals. joNotEquals Not equals."
  },
  "api/OrpheusAttributes.FieldName.html": {
    "href": "api/OrpheusAttributes.FieldName.html",
    "title": "Class FieldName | Orpheus ORM",
    "keywords": "Class FieldName FieldName attribute. Decorate a model property with this attribute, to explicitly define the corresponding field name in the db table. Inheritance System.Object System.Attribute OrpheusBaseAttribute FieldName Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class FieldName : OrpheusBaseAttribute Constructors | Improve this Doc View Source FieldName(String) Field name constructor. Declaration public FieldName(string fieldName) Parameters Type Name Description System.String fieldName Field name Properties | Improve this Doc View Source Name Field name. Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/OrpheusAttributes.OrpheusCompositeKeyBaseAttribute.html": {
    "href": "api/OrpheusAttributes.OrpheusCompositeKeyBaseAttribute.html",
    "title": "Class OrpheusCompositeKeyBaseAttribute | Orpheus ORM",
    "keywords": "Class OrpheusCompositeKeyBaseAttribute Composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. Inheritance System.Object System.Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute PrimaryCompositeKey UniqueCompositeKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class OrpheusCompositeKeyBaseAttribute : OrpheusBaseAttribute Constructors | Improve this Doc View Source OrpheusCompositeKeyBaseAttribute(String[], String) Create a OrpheusCompositeKeyBaseAttribute. Declaration public OrpheusCompositeKeyBaseAttribute(string[] fields, string sort = null) Parameters Type Name Description System.String [] fields Fields that are the key System.String sort Sort direction for the key Properties | Improve this Doc View Source Fields List of fields that are the key. Declaration public string[] Fields { get; } Property Value Type Description System.String [] Array of field names | Improve this Doc View Source Sort Sort for the key. Declaration public string Sort { get; } Property Value Type Description System.String Sort direction"
  },
  "api/OrpheusAttributes.TableName.html": {
    "href": "api/OrpheusAttributes.TableName.html",
    "title": "Class TableName | Orpheus ORM",
    "keywords": "Class TableName TableName attribute. Decorate a model with this attribute to to explicitly define the corresponding db table name. Inheritance System.Object System.Attribute OrpheusBaseAttribute TableName Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class TableName : OrpheusBaseAttribute Constructors | Improve this Doc View Source TableName(String) TableName constructor. Declaration public TableName(string tableName) Parameters Type Name Description System.String tableName Properties | Improve this Doc View Source Name Table name. Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/OrpheusInterfaces.DDLAction.html": {
    "href": "api/OrpheusInterfaces.DDLAction.html",
    "title": "Enum DDLAction | Orpheus ORM",
    "keywords": "Enum DDLAction DDL action. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum DDLAction Fields Name Description ddlAlter DDL alter. ddlCreate DDL create. ddlDrop DDL drop."
  },
  "api/OrpheusInterfaces.IOrpheusDatabase.html": {
    "href": "api/OrpheusInterfaces.IOrpheusDatabase.html",
    "title": "Interface IOrpheusDatabase | Orpheus ORM",
    "keywords": "Interface IOrpheusDatabase Orpheus database access component. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusDatabase Properties | Improve this Doc View Source Connected State of the database. Connected or not. Declaration bool Connected { get; } Property Value Type Description System.Boolean True if database is connected | Improve this Doc View Source ConnectionString Gets the underlying IDbConnection connection string. Declaration string ConnectionString { get; } Property Value Type Description System.String The database connection string | Improve this Doc View Source DDLHelper Helps execute DDL specific commands for the underlying db engine. Declaration IOrpheusDDLHelper DDLHelper { get; set; } Property Value Type Description IOrpheusDDLHelper A OrpheusDDLHelper instance | Improve this Doc View Source Modules List of registered Orpheus modules. Declaration List<IOrpheusModule> Modules { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusModule > Modules that are part in the database | Improve this Doc View Source TypeMap Mapping dictionary of types to data types. Declaration Dictionary<Type, DbType> TypeMap { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Data.DbType > Type map dictionary between types and DbType Methods | Improve this Doc View Source BeginTransaction() Creates a transaction object. Declaration IDbTransaction BeginTransaction() Returns Type Description System.Data.IDbTransaction Returns a transaction instance | Improve this Doc View Source Connect(String) Connects to the database engine defined in the connection string. Declaration void Connect(string connectionString = null) Parameters Type Name Description System.String connectionString | Improve this Doc View Source CreateCommand() Create a DbCommand Declaration IDbCommand CreateCommand() Returns Type Description System.Data.IDbCommand A DbCommand instance | Improve this Doc View Source CreateModule(IOrpheusModuleDefinition) Creates an OrpheusModule. Declaration IOrpheusModule CreateModule(IOrpheusModuleDefinition definition = null) Parameters Type Name Description IOrpheusModuleDefinition definition Module definition Returns Type Description IOrpheusModule An IOrpheusModule instance | Improve this Doc View Source CreateModuleDefinition() Creates an OrpheusModuleDefinition. Declaration IOrpheusModuleDefinition CreateModuleDefinition() Returns Type Description IOrpheusModuleDefinition An IOrpheusModuleDefinition instance | Improve this Doc View Source CreatePreparedQuery(String) Returns a prepared query with parameters created. Declaration IDbCommand CreatePreparedQuery(string SQL) Parameters Type Name Description System.String SQL SQL for the prepared query Returns Type Description System.Data.IDbCommand | Improve this Doc View Source CreatePreparedQuery(String, List<String>) Returns a prepared query with parameters created. Declaration IDbCommand CreatePreparedQuery(string SQL, List<string> parameters) Parameters Type Name Description System.String SQL SQL for the prepared query System.Collections.Generic.List < System.String > parameters SQL parameters Returns Type Description System.Data.IDbCommand | Improve this Doc View Source CreateSchema(Guid, String, Double) Creates a schema object and sets it's database. Declaration ISchema CreateSchema(Guid id, string description, double version) Parameters Type Name Description System.Guid id Schema id System.String description Schema description System.Double version Schema version Returns Type Description ISchema An ISchema instance | Improve this Doc View Source CreateTable<T>() Creates a table and sets its database,using the type name as the table name. Declaration IOrpheusTable<T> CreateTable<T>() Returns Type Description IOrpheusTable <T> An Orpheus table instance Type Parameters Name Description T | Improve this Doc View Source CreateTable<T>(IOrpheusTableOptions) Creates a table and sets its database. Declaration IOrpheusTable<T> CreateTable<T>(IOrpheusTableOptions options) Parameters Type Name Description IOrpheusTableOptions options Table options Returns Type Description IOrpheusTable <T> An Orpheus table instance Type Parameters Name Description T Model type for table | Improve this Doc View Source CreateTable<T>(String, List<IOrpheusTableKeyField>) Creates a table and sets its database. Declaration IOrpheusTable<T> CreateTable<T>(string tableName, List<IOrpheusTableKeyField> keyFields = null) Parameters Type Name Description System.String tableName Table name System.Collections.Generic.List < IOrpheusTableKeyField > keyFields Table key fields Returns Type Description IOrpheusTable <T> An Orpheus table instance Type Parameters Name Description T Model type for the table | Improve this Doc View Source CreateTableKeyField() Creates an OrpheusTableKeyField. Declaration IOrpheusTableKeyField CreateTableKeyField() Returns Type Description IOrpheusTableKeyField | Improve this Doc View Source CreateTableOptions() Creates an OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions() Returns Type Description IOrpheusTableOptions | Improve this Doc View Source Disconnect() Disconnects from the database engine. Declaration void Disconnect() | Improve this Doc View Source IsNullableType(Type) Returns true if the type is a nullable type. Declaration bool IsNullableType(Type type) Parameters Type Name Description System.Type type Type Returns Type Description System.Boolean True if type is nullable | Improve this Doc View Source RegisterModule(IOrpheusModule) Register an Orpheus module to the database. Declaration void RegisterModule(IOrpheusModule module) Parameters Type Name Description IOrpheusModule module Module to be registered | Improve this Doc View Source SQL<T>(String, String) Executes a SQL statement and returns it as specific model. Declaration List<T> SQL<T>(string SQL, string tableName = null) Parameters Type Name Description System.String SQL System.String tableName Returns Type Description System.Collections.Generic.List <T> Type Parameters Name Description T"
  },
  "api/OrpheusInterfaces.IOrpheusReferenceTable-1.html": {
    "href": "api/OrpheusInterfaces.IOrpheusReferenceTable-1.html",
    "title": "Interface IOrpheusReferenceTable<T> | Orpheus ORM",
    "keywords": "Interface IOrpheusReferenceTable<T> Orpheus reference table. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusReferenceTable<T> : IOrpheusReferenceTable, IOrpheusTable Type Parameters Name Description T Model type"
  },
  "api/OrpheusInterfaces.IOrpheusTableKeyField.html": {
    "href": "api/OrpheusInterfaces.IOrpheusTableKeyField.html",
    "title": "Interface IOrpheusTableKeyField | Orpheus ORM",
    "keywords": "Interface IOrpheusTableKeyField Represents an Orpheus table key field. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTableKeyField Properties | Improve this Doc View Source IsAutoGenerated If set to true and the type is System.Guid then with every new insert, a value will be auto generated. Declaration bool IsAutoGenerated { get; set; } Property Value Type Description System.Boolean True if the field value is auto generated | Improve this Doc View Source IsDBGenerated True if the underlying db engine is going to generate the value for the key. Declaration bool IsDBGenerated { get; set; } Property Value Type Description System.Boolean True if field value is DB generated | Improve this Doc View Source KeySQLUpdate Function that returns a SQL string to be used in a WHERE clause, to select the new key value(s) after an insert. Declaration Func<string> KeySQLUpdate { get; set; } Property Value Type Description System.Func < System.String > Function that returns a SQL string | Improve this Doc View Source Name Name of the field that is the table key. Declaration string Name { get; set; } Property Value Type Description System.String Field name"
  },
  "api/OrpheusInterfaces.ISaveEventArguments.html": {
    "href": "api/OrpheusInterfaces.ISaveEventArguments.html",
    "title": "Interface ISaveEventArguments | Orpheus ORM",
    "keywords": "Interface ISaveEventArguments Orpheus save event arguments. Occurs when data are actually being save to the database. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISaveEventArguments Properties | Improve this Doc View Source Transaction Current transaction. Declaration IDbTransaction Transaction { get; set; } Property Value Type Description System.Data.IDbTransaction"
  },
  "api/OrpheusInterfaces.ISchemaTable.html": {
    "href": "api/OrpheusInterfaces.ISchemaTable.html",
    "title": "Interface ISchemaTable | Orpheus ORM",
    "keywords": "Interface ISchemaTable Create table schema interface. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaTable : ISchemaObject Properties | Improve this Doc View Source JoinDefinition Join definition. Defines how schema objects can be joined. Declaration ISchemaJoinDefinition JoinDefinition { get; set; } Property Value Type Description ISchemaJoinDefinition Join definition"
  },
  "api/OrpheusInterfaces.ISchemaView.html": {
    "href": "api/OrpheusInterfaces.ISchemaView.html",
    "title": "Interface ISchemaView | Orpheus ORM",
    "keywords": "Interface ISchemaView Create view schema object. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaView : ISchemaObject Properties | Improve this Doc View Source JoinSchemaObjects Join schema objects. Applicable mostly when schema object is a table or a view. Declaration List<ISchemaTable> JoinSchemaObjects { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaTable > Schema objects in the schema view | Improve this Doc View Source TableName Applicable only when DDLCommand = ddcCreateView. Declaration string TableName { get; set; } Property Value Type Description System.String Table name"
  },
  "api/OrpheusAttributes.DataTypeAttribute.html": {
    "href": "api/OrpheusAttributes.DataTypeAttribute.html",
    "title": "Class DataTypeAttribute | Orpheus ORM",
    "keywords": "Class DataTypeAttribute Annotate a property with attribute to set it's DbType Inheritance System.Object System.Attribute OrpheusBaseAttribute DataTypeAttribute Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class DataTypeAttribute : OrpheusBaseAttribute Constructors | Improve this Doc View Source DataTypeAttribute(DbType) Data type attribute constructor. Declaration public DataTypeAttribute(DbType dbType) Parameters Type Name Description System.Data.DbType dbType Data type | Improve this Doc View Source DataTypeAttribute(Int32) Data type attribute constructor. Declaration public DataTypeAttribute(int dbType) Parameters Type Name Description System.Int32 dbType Casted to System.Data.DbType Properties | Improve this Doc View Source DataType Field's data type. Declaration public DbType DataType { get; } Property Value Type Description System.Data.DbType Data type"
  },
  "api/OrpheusAttributes.Length.html": {
    "href": "api/OrpheusAttributes.Length.html",
    "title": "Class Length | Orpheus ORM",
    "keywords": "Class Length Length attribute. Decorate a property with attribute to set a maximum length value. Applies only to string types. Inheritance System.Object System.Attribute OrpheusBaseAttribute Length Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class Length : OrpheusBaseAttribute Constructors | Improve this Doc View Source Length(Int32) Length attribute constructor. Declaration public Length(int value) Parameters Type Name Description System.Int32 value The max length value Properties | Improve this Doc View Source Value The maximum length value. Declaration public int Value { get; } Property Value Type Description System.Int32 Length"
  },
  "api/OrpheusAttributes.PrimaryKey.html": {
    "href": "api/OrpheusAttributes.PrimaryKey.html",
    "title": "Class PrimaryKey | Orpheus ORM",
    "keywords": "Class PrimaryKey Primary key constraint attribute. Decorate a property with attribute to create a primary key constraint on a schema object. Inheritance System.Object System.Attribute OrpheusBaseAttribute PrimaryKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class PrimaryKey : OrpheusBaseAttribute Constructors | Improve this Doc View Source PrimaryKey(Boolean, Boolean) Primary key attribute constructor. Declaration public PrimaryKey(bool isAutoGenerated = true, bool isDBGenerated = false) Parameters Type Name Description System.Boolean isAutoGenerated True if the key value is auto-generated System.Boolean isDBGenerated True if the key is generated from the DB engine Properties | Improve this Doc View Source IsAutoGenerated Indicates if the primary key value will be auto-generated in memory. Only System.Guid type is supported. Declaration public bool IsAutoGenerated { get; } Property Value Type Description System.Boolean True if the key value is auto-generated. | Improve this Doc View Source IsDBGenerated Indicates if the primary key value is auto-generated. Declaration public bool IsDBGenerated { get; } Property Value Type Description System.Boolean True if the key is generated from the DB engine"
  },
  "api/OrpheusAttributes.UniqueCompositeKey.html": {
    "href": "api/OrpheusAttributes.UniqueCompositeKey.html",
    "title": "Class UniqueCompositeKey | Orpheus ORM",
    "keywords": "Class UniqueCompositeKey Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. Inheritance System.Object System.Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute UniqueCompositeKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class UniqueCompositeKey : OrpheusCompositeKeyBaseAttribute Constructors | Improve this Doc View Source UniqueCompositeKey(String[], String) Primary composite key. Declaration public UniqueCompositeKey(string[] fields, string sort = null) Parameters Type Name Description System.String [] fields Fields that are part of the key System.String sort Sort direction"
  },
  "api/OrpheusInterfaces.IModifyRecordEventArguments-1.html": {
    "href": "api/OrpheusInterfaces.IModifyRecordEventArguments-1.html",
    "title": "Interface IModifyRecordEventArguments<T> | Orpheus ORM",
    "keywords": "Interface IModifyRecordEventArguments<T> Orpheus record modify event. Occurs when data are processed in memory. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IModifyRecordEventArguments<T> Type Parameters Name Description T Model type Properties | Improve this Doc View Source ModifyAction Modify action. 0 Insert, 1 Update, 2 Delete Declaration int ModifyAction { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Record Modified record. Declaration T Record { get; } Property Value Type Description T"
  },
  "api/OrpheusInterfaces.IOrpheusModule.html": {
    "href": "api/OrpheusInterfaces.IOrpheusModule.html",
    "title": "Interface IOrpheusModule | Orpheus ORM",
    "keywords": "Interface IOrpheusModule OrpheusModule represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusModule Properties | Improve this Doc View Source Database Module's database. Declaration IOrpheusDatabase Database { get; } Property Value Type Description IOrpheusDatabase Module's database | Improve this Doc View Source Definition Module's definition. Declaration IOrpheusModuleDefinition Definition { get; } Property Value Type Description IOrpheusModuleDefinition Module's definition | Improve this Doc View Source MainTable The module's main table. Declaration IOrpheusTable MainTable { get; set; } Property Value Type Description IOrpheusTable Module's main table | Improve this Doc View Source ReferenceTables List of module's reference tables. Reference tables are tables that are referenced from a module table, through a foreign key constraint. Declaration List<IOrpheusTable> ReferenceTables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > Module's reference tables | Improve this Doc View Source Tables List of module's tables. Declaration List<IOrpheusTable> Tables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > Module's tables Methods | Improve this Doc View Source GetReferenceTable<T>() Gets a table by model. Uses the model class name as the table name. Declaration IOrpheusTable<T> GetReferenceTable<T>() Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source GetReferenceTable<T>(Int32) Gets a table by index, for a model. Declaration IOrpheusTable<T> GetReferenceTable<T>(int index) Parameters Type Name Description System.Int32 index Table index Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source GetReferenceTable<T>(String) Gets a table by name, for a model. Declaration IOrpheusTable<T> GetReferenceTable<T>(string tableName) Parameters Type Name Description System.String tableName Table index Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source GetTable<T>() Gets a table by model. Uses the model class name as the table name. Declaration IOrpheusTable<T> GetTable<T>() Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source GetTable<T>(Int32) Gets a table by index, for a model. Declaration IOrpheusTable<T> GetTable<T>(int index) Parameters Type Name Description System.Int32 index Table index Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source GetTable<T>(String) Gets a table by name, for a model. Declaration IOrpheusTable<T> GetTable<T>(string tableName) Parameters Type Name Description System.String tableName Table name Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source Load(Dictionary<String, List<Object>>) Loads a module's record from the database. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields are bound with a logical AND Declaration void Load(Dictionary<string, List<object>> keyValues) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < System.Object >> keyValues | Improve this Doc View Source Load(List<Object>) Loads a module's record from the database. Declaration void Load(List<object> keyValues = null) Parameters Type Name Description System.Collections.Generic.List < System.Object > keyValues | Improve this Doc View Source Save() Saves all changes to the database. Declaration void Save() Events | Improve this Doc View Source OnAfterSave Occurs after the transaction has been commited. Declaration event EventHandler<ISaveEventArguments> OnAfterSave Event Type Type Description System.EventHandler < ISaveEventArguments > | Improve this Doc View Source OnBeforeSave Occurs before records are save in the database. Declaration event EventHandler<ISaveEventArguments> OnBeforeSave Event Type Type Description System.EventHandler < ISaveEventArguments >"
  },
  "api/OrpheusInterfaces.IOrpheusReferenceTable.html": {
    "href": "api/OrpheusInterfaces.IOrpheusReferenceTable.html",
    "title": "Interface IOrpheusReferenceTable | Orpheus ORM",
    "keywords": "Interface IOrpheusReferenceTable Orpheus reference table. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusReferenceTable : IOrpheusTable"
  },
  "api/OrpheusInterfaces.ISchema.html": {
    "href": "api/OrpheusInterfaces.ISchema.html",
    "title": "Interface ISchema | Orpheus ORM",
    "keywords": "Interface ISchema Represents an Orpheus Schema. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchema Properties | Improve this Doc View Source DB Orpheus database. Declaration IOrpheusDatabase DB { get; } Property Value Type Description IOrpheusDatabase Instance of the Orpheus Database | Improve this Doc View Source Description Schema description. Declaration string Description { get; } Property Value Type Description System.String Schema description | Improve this Doc View Source Id Schema Id. Declaration Guid Id { get; } Property Value Type Description System.Guid Schema unique id | Improve this Doc View Source SchemaInfoTable Orpheus schema info table. Declaration string SchemaInfoTable { get; } Property Value Type Description System.String Table name for the Orpheus schema information table | Improve this Doc View Source SchemaModulesTable Orpheus module definition table. Declaration string SchemaModulesTable { get; } Property Value Type Description System.String Table name for the Orpheus schema modules table | Improve this Doc View Source SchemaObjects List of schema objects. ISchemaObject Declaration List<ISchemaObject> SchemaObjects { get; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > | Improve this Doc View Source SchemaObjectsTable Orpheus schema objects table. Declaration string SchemaObjectsTable { get; } Property Value Type Description System.String Table name for the Orpheus schema objects table | Improve this Doc View Source Version Schema version. Declaration double Version { get; } Property Value Type Description System.Double Schema version Methods | Improve this Doc View Source AddSchemaObject(ISchemaObject) Adds a schema object to the list. Declaration ISchemaObject AddSchemaObject(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Returns Type Description ISchemaObject The schema object that was added | Improve this Doc View Source AddSchemaTable(Object, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable(object model, List<ISchemaObject> dependencies = null) Parameters Type Name Description System.Object model Model will be used to auto-generate fields, primary keys etc, for the schema object System.Collections.Generic.List < ISchemaObject > dependencies List of schema objects, that this objects depends upon Returns Type Description ISchemaTable | Improve this Doc View Source AddSchemaTable(String, List<ISchemaObject>, Object) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable(string tableName, List<ISchemaObject> dependencies = null, object model = null) Parameters Type Name Description System.String tableName Table name System.Collections.Generic.List < ISchemaObject > dependencies List of schema objects, that this objects depends upon System.Object model Model will be used to auto-generate fields, primary keys etc, for the schema object Returns Type Description ISchemaTable | Improve this Doc View Source AddSchemaTable(Type, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable(Type modelType, List<ISchemaObject> dependencies = null) Parameters Type Name Description System.Type modelType Model type will be used to auto-generate fields, primary keys etc, for the schema object System.Collections.Generic.List < ISchemaObject > dependencies List of schema objects, that this objects depends upon Returns Type Description ISchemaTable | Improve this Doc View Source AddSchemaTable<T>(List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable<T>(List<ISchemaObject> dependencies = null)where T : class Parameters Type Name Description System.Collections.Generic.List < ISchemaObject > dependencies Returns Type Description ISchemaTable Type Parameters Name Description T | Improve this Doc View Source CreateSchemaJoinDefinition() Creates a join schema definition. Declaration ISchemaJoinDefinition CreateSchemaJoinDefinition() Returns Type Description ISchemaJoinDefinition | Improve this Doc View Source CreateSchemaTable() Creates a table schema object. Declaration ISchemaTable CreateSchemaTable() Returns Type Description ISchemaTable | Improve this Doc View Source CreateSchemaView() Creates a view schema object. Declaration ISchemaView CreateSchemaView() Returns Type Description ISchemaView | Improve this Doc View Source Drop() Drops schema. Removes all schema objects from the database. Declaration void Drop() | Improve this Doc View Source Execute() Iterate through the schema objects and executes them. Declaration void Execute() | Improve this Doc View Source LoadFromFile(String) Loads schema from an xml file. Declaration void LoadFromFile(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source RegisterSchema() Registers schema information, in the schema information table. Declaration void RegisterSchema() | Improve this Doc View Source RemoveSchemaObject(ISchemaObject) Removes from the schema list Declaration void RemoveSchemaObject(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Schema object to remove | Improve this Doc View Source SaveToFile(String) Saves schema to an xml file. Declaration void SaveToFile(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source SchemaObjectExists(ISchemaObject) Returns the guid of the schema object it is created. Declaration Guid SchemaObjectExists(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Schema object to be checked if it exists Returns Type Description System.Guid The schema object unique id"
  },
  "api/OrpheusInterfaces.ISchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.ISchemaConstraint.html",
    "title": "Interface ISchemaConstraint | Orpheus ORM",
    "keywords": "Interface ISchemaConstraint Represents a schema constraint. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaConstraint Properties | Improve this Doc View Source Action Returns true if the constraint needs to drop. Declaration DDLAction Action { get; set; } Property Value Type Description DDLAction Constraint's DDLAction | Improve this Doc View Source ConstraintSQLCommand The constraint SQL command. UNIQUE, PRIMARY KEY etc. Declaration string ConstraintSQLCommand { get; } Property Value Type Description System.String | Improve this Doc View Source Fields Fields which the constraint will be applied. Declaration List<string> Fields { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > Fields affected from the constraint | Improve this Doc View Source Name Constraint name. Declaration string Name { get; set; } Property Value Type Description System.String Constraint name | Improve this Doc View Source SchemaObject Schema object were this schema constraint exists Declaration ISchemaObject SchemaObject { get; } Property Value Type Description ISchemaObject The schema object where the constraint exists | Improve this Doc View Source Sort Key's sort direction. Declaration SchemaSort Sort { get; set; } Property Value Type Description SchemaSort Schema sort type Methods | Improve this Doc View Source SQL() Returns the SQL definition of the key. Declaration string SQL() Returns Type Description System.String Constraint's SQL"
  },
  "api/OrpheusInterfaces.ISchemaField.html": {
    "href": "api/OrpheusInterfaces.ISchemaField.html",
    "title": "Interface ISchemaField | Orpheus ORM",
    "keywords": "Interface ISchemaField Represents a schema field. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaField Properties | Improve this Doc View Source Alias Field alias. Declaration string Alias { get; set; } Property Value Type Description System.String Field alias | Improve this Doc View Source DataType Field data type. Declaration string DataType { get; set; } Property Value Type Description System.String Field data type | Improve this Doc View Source DefaultValue Field's default value. Declaration string DefaultValue { get; set; } Property Value Type Description System.String Field's default value | Improve this Doc View Source FullFieldName Gets the full field name. Declaration string FullFieldName { get; } Property Value Type Description System.String | Improve this Doc View Source Name Field name. Declaration string Name { get; set; } Property Value Type Description System.String Field name | Improve this Doc View Source Nullable True if field accepts null values. Declaration bool Nullable { get; set; } Property Value Type Description System.Boolean True if field accepts null values | Improve this Doc View Source SchemaObject Schema object where this schema field exists Declaration ISchemaObject SchemaObject { get; } Property Value Type Description ISchemaObject Schema object where the field exists | Improve this Doc View Source Size Field size (if applicable). Declaration string Size { get; set; } Property Value Type Description System.String Field size | Improve this Doc View Source TableName Table where the field belongs. Declaration string TableName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source SQL() Returns SQL definition for the field. Declaration string SQL() Returns Type Description System.String SQL definition for the field"
  },
  "api/OrpheusInterfaces.SchemaObjectType.html": {
    "href": "api/OrpheusInterfaces.SchemaObjectType.html",
    "title": "Enum SchemaObjectType | Orpheus ORM",
    "keywords": "Enum SchemaObjectType Type of a schema object. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum SchemaObjectType Fields Name Description sotTable Table. sotUnknown Unknown type. This is the default. sotView View."
  },
  "api/OrpheusAttributes.DefaultValue.html": {
    "href": "api/OrpheusAttributes.DefaultValue.html",
    "title": "Class DefaultValue | Orpheus ORM",
    "keywords": "Class DefaultValue Default value attribute. Decorate a property with attribute to set it's default value. Inheritance System.Object System.Attribute OrpheusBaseAttribute DefaultValue Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class DefaultValue : OrpheusBaseAttribute Constructors | Improve this Doc View Source DefaultValue(Object) DefaultValue attribute constructor. Declaration public DefaultValue(object value) Parameters Type Name Description System.Object value Property's default value Properties | Improve this Doc View Source Value The default value. Declaration public object Value { get; } Property Value Type Description System.Object Default value"
  },
  "api/OrpheusAttributes.OrpheusBaseAttribute.html": {
    "href": "api/OrpheusAttributes.OrpheusBaseAttribute.html",
    "title": "Class OrpheusBaseAttribute | Orpheus ORM",
    "keywords": "Class OrpheusBaseAttribute The Orpheus base attribute class. Inheritance System.Object System.Attribute OrpheusBaseAttribute DataTypeAttribute DefaultValue FieldName ForeignKey Length OrpheusCompositeKeyBaseAttribute PrimaryKey RequiredField SchemaIgnore TableName UniqueKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class OrpheusBaseAttribute : Attribute"
  },
  "api/OrpheusAttributes.RequiredField.html": {
    "href": "api/OrpheusAttributes.RequiredField.html",
    "title": "Class RequiredField | Orpheus ORM",
    "keywords": "Class RequiredField Required field attribute. Inheritance System.Object System.Attribute OrpheusBaseAttribute RequiredField Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class RequiredField : OrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.UniqueKey.html": {
    "href": "api/OrpheusAttributes.UniqueKey.html",
    "title": "Class UniqueKey | Orpheus ORM",
    "keywords": "Class UniqueKey Unique key constraint attribute. Decorate a property with attribute to create a unique key constraint on a schema object. Inheritance System.Object System.Attribute OrpheusBaseAttribute UniqueKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class UniqueKey : OrpheusBaseAttribute"
  },
  "api/OrpheusInterfaces.ExtendedDbTypes.html": {
    "href": "api/OrpheusInterfaces.ExtendedDbTypes.html",
    "title": "Enum ExtendedDbTypes | Orpheus ORM",
    "keywords": "Enum ExtendedDbTypes Extended DbTypes enumeration, for types that are not listed in the generic DbType enumeration. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum ExtendedDbTypes Fields Name Description StringBlob A variable-length stream of Unicode data with a maximum length"
  },
  "api/OrpheusInterfaces.IOrpheusDDLHelper.html": {
    "href": "api/OrpheusInterfaces.IOrpheusDDLHelper.html",
    "title": "Interface IOrpheusDDLHelper | Orpheus ORM",
    "keywords": "Interface IOrpheusDDLHelper Abstract definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusDDLHelper Properties | Improve this Doc View Source DatabaseName Gets the database name. Declaration string DatabaseName { get; } Property Value Type Description System.String | Improve this Doc View Source DB Database for the DDL helper. Declaration IOrpheusDatabase DB { get; set; } Property Value Type Description IOrpheusDatabase Database the helper is associated with | Improve this Doc View Source DelimitedIndetifierEnd Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. Declaration char DelimitedIndetifierEnd { get; } Property Value Type Description System.Char Char | Improve this Doc View Source DelimitedIndetifierStart Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. Declaration char DelimitedIndetifierStart { get; } Property Value Type Description System.Char Char | Improve this Doc View Source ModifyColumnCommand Returns the DB specific modify table command. Declaration string ModifyColumnCommand { get; } Property Value Type Description System.String | Improve this Doc View Source SupportsGuidType Returns true if the DBEngine supports natively the Guid type. Declaration bool SupportsGuidType { get; } Property Value Type Description System.Boolean True if the DBEngine supports natively the Guid type Methods | Improve this Doc View Source CreateDatabase() Returns true if a database is successfully created using the underlying db engine settings. Declaration bool CreateDatabase() Returns Type Description System.Boolean True if database was created successfully | Improve this Doc View Source CreateDatabase(String) Returns true if a database is successfully created using the underlying db engine settings. Declaration bool CreateDatabase(string dbName) Parameters Type Name Description System.String dbName Database name Returns Type Description System.Boolean True if the database was created successfully | Improve this Doc View Source CreateDatabaseWithDDL(String) Returns true if a database is successfully created using the passed DDL script. Declaration bool CreateDatabaseWithDDL(string ddlString) Parameters Type Name Description System.String ddlString DDL command Returns Type Description System.Boolean True if the database was created successfully | Improve this Doc View Source DatabaseExists(String) Returns true the database exists. Declaration bool DatabaseExists(string dbName) Parameters Type Name Description System.String dbName Database name Returns Type Description System.Boolean True if the database exists | Improve this Doc View Source DbTypeToString(DbType) Returns the db engine specific string equivalent, for a DbType enumeration. Declaration string DbTypeToString(DbType dataType) Parameters Type Name Description System.Data.DbType dataType DbType Returns Type Description System.String String value for the DbType | Improve this Doc View Source SafeFormatAlterTableAddColumn(String, List<String>) Properly formats an ALTER TABLE ADD COLUMN command for the underlying database engine. Declaration string SafeFormatAlterTableAddColumn(string tableName, List<string> columnsToAdd) Parameters Type Name Description System.String tableName Table's name that schema is going to change System.Collections.Generic.List < System.String > columnsToAdd Columns for creation Returns Type Description System.String | Improve this Doc View Source SafeFormatAlterTableDropColumn(String, List<String>) Properly formats an ALTER TABLE DROP COLUMN command for the underlying database engine. Declaration string SafeFormatAlterTableDropColumn(string tableName, List<string> columnsToDelete) Parameters Type Name Description System.String tableName Table's name that schema is going to change System.Collections.Generic.List < System.String > columnsToDelete Columns for deletion Returns Type Description System.String | Improve this Doc View Source SafeFormatField(String) Properly formats a field name, to be used in a SQL statement, in case the field name is a reserved word. Declaration string SafeFormatField(string fieldName) Parameters Type Name Description System.String fieldName Field name Returns Type Description System.String Safely formated field name | Improve this Doc View Source SchemaObjectExists(String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. Declaration bool SchemaObjectExists(string schemaObjectName) Parameters Type Name Description System.String schemaObjectName Schema object name Returns Type Description System.Boolean True if the object exists | Improve this Doc View Source TypeToString(Type) Returns the db engine specific string equivalent, for a .net type Declaration string TypeToString(Type type) Parameters Type Name Description System.Type type Type Returns Type Description System.String String value for the mapped DbType"
  },
  "api/OrpheusInterfaces.IOrpheusTable-1.html": {
    "href": "api/OrpheusInterfaces.IOrpheusTable-1.html",
    "title": "Interface IOrpheusTable<T> | Orpheus ORM",
    "keywords": "Interface IOrpheusTable<T> Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTable<T> : IOrpheusTable Type Parameters Name Description T Model type Properties | Improve this Doc View Source Data Table's data. Declaration List<T> Data { get; } Property Value Type Description System.Collections.Generic.List <T> Table's data Methods | Improve this Doc View Source Add(T) Adds a new record to the table. Declaration void Add(T newRecord) Parameters Type Name Description T newRecord New record to be added | Improve this Doc View Source Add(List<T>) Adds a list of new records. Declaration void Add(List<T> newRecords) Parameters Type Name Description System.Collections.Generic.List <T> newRecords New records to be added | Improve this Doc View Source Delete(T) Deletes a record. Declaration void Delete(T record) Parameters Type Name Description T record Record to delete | Improve this Doc View Source Delete(List<T>) Deletes records. Declaration void Delete(List<T> records) Parameters Type Name Description System.Collections.Generic.List <T> records Records to be deleted | Improve this Doc View Source Update(T) Updates an existing record. Declaration void Update(T record) Parameters Type Name Description T record Record to be updated | Improve this Doc View Source Update(List<T>) Updates existing records. Declaration void Update(List<T> records) Parameters Type Name Description System.Collections.Generic.List <T> records Records to be updated Events | Improve this Doc View Source OnAfterModify Occurs after a table modifies a record. It is fired on any Add,Update,Delete Declaration event EventHandler<IModifyRecordEventArguments<T>> OnAfterModify Event Type Type Description System.EventHandler < IModifyRecordEventArguments <T>> | Improve this Doc View Source OnBeforeModify Occurs before a table modifies a record. It is fired on any Add,Update,Delete Declaration event EventHandler<IModifyRecordEventArguments<T>> OnBeforeModify Event Type Type Description System.EventHandler < IModifyRecordEventArguments <T>>"
  },
  "api/OrpheusInterfaces.IOrpheusTableOptions.html": {
    "href": "api/OrpheusInterfaces.IOrpheusTableOptions.html",
    "title": "Interface IOrpheusTableOptions | Orpheus ORM",
    "keywords": "Interface IOrpheusTableOptions Represents IOrpheusTable options, which can be used to instantiate a table. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTableOptions Properties | Improve this Doc View Source Database Database that the table is a part of. Declaration [IgnoreDataMember] IOrpheusDatabase Database { get; set; } Property Value Type Description IOrpheusDatabase Database that the table is part of | Improve this Doc View Source KeyFields Table's key field(s). Can be more than one to support composite keys. Declaration List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > Table's key fields | Improve this Doc View Source MasterTable Table's master table. To support the master-detail relationship. Declaration [IgnoreDataMember] IOrpheusTable MasterTable { get; set; } Property Value Type Description IOrpheusTable Table's master table | Improve this Doc View Source MasterTableKeyFields Master table's key field(s). Can be more than one to support composite keys. Declaration List<IOrpheusTableKeyField> MasterTableKeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > Master table's key field | Improve this Doc View Source MasterTableName Table's master table. To support the master-detail relationship. Declaration string MasterTableName { get; set; } Property Value Type Description System.String Table's master table name | Improve this Doc View Source ModelType Model type. Declaration Type ModelType { get; set; } Property Value Type Description System.Type Table model type | Improve this Doc View Source TableName Table's name. Declaration string TableName { get; set; } Property Value Type Description System.String Table's name Methods | Improve this Doc View Source AddKeyField(String, Boolean, Boolean, Func<String>) Creates a new key field. Declaration void AddKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters Type Name Description System.String name Field name System.Boolean isAutoGenerated Auto generate flag System.Boolean isDBGenerated DB generated flag System.Func < System.String > keySQLUpdate Function to return a custom SQL when updating the field value | Improve this Doc View Source AddMasterKeyField(String, Boolean, Boolean, Func<String>) Creates a new master key field Declaration void AddMasterKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters Type Name Description System.String name Field name System.Boolean isAutoGenerated Auto generate flag System.Boolean isDBGenerated DB generated flag System.Func < System.String > keySQLUpdate Function to return a custom SQL when updating the field value"
  },
  "api/OrpheusInterfaces.ISchemaJoinDefinition.html": {
    "href": "api/OrpheusInterfaces.ISchemaJoinDefinition.html",
    "title": "Interface ISchemaJoinDefinition | Orpheus ORM",
    "keywords": "Interface ISchemaJoinDefinition Represents a schema join definition, which can be used by ISchemaObject when a schema is created. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaJoinDefinition Properties | Improve this Doc View Source JoinKeyField Key field name of the join object. Declaration string JoinKeyField { get; set; } Property Value Type Description System.String Key field name of the join object | Improve this Doc View Source JoinOperator Join operator SchemaJoinOperator . Declaration SchemaJoinOperator JoinOperator { get; set; } Property Value Type Description SchemaJoinOperator Join operator | Improve this Doc View Source JoinTableName Table name to perform the join. Declaration string JoinTableName { get; set; } Property Value Type Description System.String | Improve this Doc View Source JoinType Type of join SchemaJoinType . Declaration SchemaJoinType JoinType { get; set; } Property Value Type Description SchemaJoinType Type of join | Improve this Doc View Source KeyField Key field name of the main object. Declaration string KeyField { get; set; } Property Value Type Description System.String Key field name of the main object"
  },
  "api/OrpheusInterfaces.ISchemaObject.html": {
    "href": "api/OrpheusInterfaces.ISchemaObject.html",
    "title": "Interface ISchemaObject | Orpheus ORM",
    "keywords": "Interface ISchemaObject Base schema object interface. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaObject Properties | Improve this Doc View Source Action Defines the DDL action to be taken when schema objects are executed. Declaration DDLAction Action { get; set; } Property Value Type Description DDLAction Defines the DDL action to be taken when schema objects are executed | Improve this Doc View Source Constraints List of schema object constraints. Primary,foreign or any type of constraint. Declaration List<ISchemaConstraint> Constraints { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaConstraint > Constraints in the schema object | Improve this Doc View Source DB Orpheus database. Declaration IOrpheusDatabase DB { get; } Property Value Type Description IOrpheusDatabase Database where the schema object exists | Improve this Doc View Source Fields Fields for the schema object. Applicable mostly when schema object is a table or a view. Declaration List<ISchemaField> Fields { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaField > Fields in the schema object | Improve this Doc View Source IsCreated True if the schema object is created in the DB. Declaration bool IsCreated { get; } Property Value Type Description System.Boolean True if the schema object is created in the DB | Improve this Doc View Source RawDDL If DDL is set all other fields and join schema objects are ignored. Dependencies still apply. Declaration string RawDDL { get; set; } Property Value Type Description System.String Set raw DDL for the schema object | Improve this Doc View Source Schema Schema where the schema object belongs to. Declaration ISchema Schema { get; set; } Property Value Type Description ISchema Schema where the schema object exists | Improve this Doc View Source SchemaName DB Schema name. Any DDL/SQL statement executed will have pre-pent the SchemaName if set. Declaration string SchemaName { get; set; } Property Value Type Description System.String Schema name | Improve this Doc View Source SchemaObjectsThatDependOnMe Other schema objects that depend on this object. First it will iterate through the dependency list and run any schema object that is not yet destroyed. Declaration List<ISchemaObject> SchemaObjectsThatDependOnMe { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > Schema objects that depend on this object | Improve this Doc View Source SchemaObjectsThatIDepend Other schema objects that this object depends upon. First it will iterate through the dependency list and run any schema object that is not yet created. Declaration List<ISchemaObject> SchemaObjectsThatIDepend { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > Schema object that this object depends upon | Improve this Doc View Source SQLName The name of the schema object. Could be the name of a table or a view or a stored procedure. Declaration string SQLName { get; set; } Property Value Type Description System.String SQL name of the schema object | Improve this Doc View Source UniqueKey Unique generated when the object is created and saved in the DB. Declaration Guid UniqueKey { get; set; } Property Value Type Description System.Guid Schema object unique key Methods | Improve this Doc View Source AddDependency(ISchemaObject) Adds a dependency to a schema object. Declaration void AddDependency(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject | Improve this Doc View Source AddDependency(Type) Adds a dependency to a schema object based on the model type. Declaration void AddDependency(Type modelType) Parameters Type Name Description System.Type modelType | Improve this Doc View Source AddDependency<T>() Adds a dependency to a schema object based on the model type. Declaration void AddDependency<T>()where T : class Type Parameters Name Description T | Improve this Doc View Source AddField(String, String, Boolean, String, String, String) Creates and adds a field to the field list. Declaration ISchemaField AddField(string name, string dataType, bool nullable = true, string defaultValue = null, string size = null, string alias = null) Parameters Type Name Description System.String name Field name System.String dataType Field data type System.Boolean nullable Nullable System.String defaultValue Field default value System.String size Field size System.String alias Field alias Returns Type Description ISchemaField | Improve this Doc View Source AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) Adds a foreign key constraint. Declaration IForeignKeySchemaConstraint AddForeignKeyConstraint(string name, List<string> fields, string foreignKeySchemaObject, List<string> foreignKeySchemaFields, bool onCascadeDelete = true, bool onUpdateDelete = true) Parameters Type Name Description System.String name Constraint name System.Collections.Generic.List < System.String > fields Constraint fields System.String foreignKeySchemaObject Reference table name System.Collections.Generic.List < System.String > foreignKeySchemaFields Reference table fields System.Boolean onCascadeDelete Cascade on delete System.Boolean onUpdateDelete Cascade on update Returns Type Description IForeignKeySchemaConstraint | Improve this Doc View Source AddPrimaryKeyConstraint(String, List<String>, SchemaSort) Adds a primary key constraint. Declaration IPrimaryKeySchemaConstraint AddPrimaryKeyConstraint(string name, List<string> fields, SchemaSort sort = SchemaSort.ssAsc) Parameters Type Name Description System.String name Constraint name System.Collections.Generic.List < System.String > fields Constraint fields SchemaSort sort Constraint sort Returns Type Description IPrimaryKeySchemaConstraint | Improve this Doc View Source AddUniqueKeyConstraint(String, List<String>) Adds a unique key constraint. Declaration IUniqueKeySchemaConstraint AddUniqueKeyConstraint(string name, List<string> fields) Parameters Type Name Description System.String name Constraint name System.Collections.Generic.List < System.String > fields Constraint fields Returns Type Description IUniqueKeySchemaConstraint An IUniqueKeySchemaConstraint | Improve this Doc View Source CreateFieldsFromModel(Object) Creates fields from a given model. Supports OrpheusAttributes attributes Instance of model Declaration void CreateFieldsFromModel(object model) Parameters Type Name Description System.Object model | Improve this Doc View Source CreateFieldsFromModel(Type) Creates fields from a given model. Supports OrpheusAttributes attributes Model type Declaration void CreateFieldsFromModel(Type modelType) Parameters Type Name Description System.Type modelType | Improve this Doc View Source CreateFieldsFromModel<T>() Creates fields from a given model. Supports OrpheusAttributes attributes Declaration void CreateFieldsFromModel<T>() Type Parameters Name Description T Model type | Improve this Doc View Source Drop() Drops the schema object. Declaration void Drop() | Improve this Doc View Source Execute() Executes schema object. Declaration void Execute() | Improve this Doc View Source GetConstraintsDDL() Returns the DDL constraints string to be executed. Declaration List<string> GetConstraintsDDL() Returns Type Description System.Collections.Generic.List < System.String > Get the generated DDL string for the schema constraints | Improve this Doc View Source GetData<T>() Returns the seed data for the table if defined. Declaration List<T> GetData<T>() Returns Type Description System.Collections.Generic.List <T> Schema object's data Type Parameters Name Description T Schema object model type | Improve this Doc View Source GetDDLString() Returns the DDL string to be executed. Declaration List<string> GetDDLString() Returns Type Description System.Collections.Generic.List < System.String > Get the generated DDL string for the schema object | Improve this Doc View Source GetSchemaType() Gets the schema type. Declaration SchemaObjectType GetSchemaType() Returns Type Description SchemaObjectType Schema type | Improve this Doc View Source SetData<T>(List<T>) Optional data to initialize a schema object. Practically applicable only to a table. Declaration void SetData<T>(List<T> data) Parameters Type Name Description System.Collections.Generic.List <T> data Type Parameters Name Description T"
  },
  "api/OrpheusInterfaces.SchemaSort.html": {
    "href": "api/OrpheusInterfaces.SchemaSort.html",
    "title": "Enum SchemaSort | Orpheus ORM",
    "keywords": "Enum SchemaSort Schema sort type. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum SchemaSort Fields Name Description ssAsc Sort ascending. ssDesc Sort descending."
  },
  "api/OrpheusInterfaces.html": {
    "href": "api/OrpheusInterfaces.html",
    "title": "Namespace OrpheusInterfaces | Orpheus ORM",
    "keywords": "Namespace OrpheusInterfaces Interfaces IForeignKeySchemaConstraint A foreign key constraint. IModifyRecordEventArguments<T> Orpheus record modify event. Occurs when data are processed in memory. IOrpheusDatabase Orpheus database access component. IOrpheusDDLHelper Abstract definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. IOrpheusModule OrpheusModule represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. IOrpheusModuleDefinition The definition/database properties of a module. IOrpheusReferenceTable Orpheus reference table. IOrpheusReferenceTable<T> Orpheus reference table. IOrpheusTable Orpheus table is the core Orpheus data object. It is responsible for performing data operations. IOrpheusTable<T> Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. IOrpheusTableKeyField Represents an Orpheus table key field. IOrpheusTableOptions Represents IOrpheusTable options, which can be used to instantiate a table. IPrimaryKeySchemaConstraint A primary key constraint. ISaveEventArguments Orpheus save event arguments. Occurs when data are actually being save to the database. ISchema Represents an Orpheus Schema. ISchemaConstraint Represents a schema constraint. ISchemaField Represents a schema field. ISchemaJoinDefinition Represents a schema join definition, which can be used by ISchemaObject when a schema is created. ISchemaObject Base schema object interface. ISchemaTable Create table schema interface. ISchemaView Create view schema object. IUniqueKeySchemaConstraint A unique key constraint. Enums DDLAction DDL action. ExtendedDbTypes Extended DbTypes enumeration, for types that are not listed in the generic DbType enumeration. SchemaJoinOperator Join operator type. SchemaJoinType Schema join types. SchemaObjectType Type of a schema object. SchemaSort Schema sort type."
  },
  "index.html": {
    "href": "index.html",
    "title": "Orpheus ORM | Orpheus ORM",
    "keywords": ""
  },
  "documentation/index.html": {
    "href": "documentation/index.html",
    "title": "Orpheus ORM Documentation | Orpheus ORM",
    "keywords": "Orpheus ORM Documentation Here you can find information regarding the key/core class of OrpheusORM, understand their purpose and how to use them. Orpheus Table Orpheus Module Orpheus DI Configuration Orpheus DDL Helper"
  },
  "about/about.html": {
    "href": "about/about.html",
    "title": "| Orpheus ORM",
    "keywords": ""
  },
  "documentation/orpheus_and_di.html": {
    "href": "documentation/orpheus_and_di.html",
    "title": "Orpheus and DI | Orpheus ORM",
    "keywords": "Orpheus and DI One of the first things that need to happen in an OrpheusORM application, is to initialize Orpheus's configuration. Why use DI? The reason for using an IoC container, is configurability and extensibility. Having all the configuration in a file, the consumer can define the database engine of his choosing as long as it implements System.Data.IDbConnection , or a different logger component as long as it implements Microsoft.Extensions.Logging.ILogger . Note: At the moment only SQL Server and MySQL have been tested. Other DB engines might work, but there is no guarantee. Read about Microsoft's DI here Agnostic Database Engine By design Orpheus, does not depend nor include any code that targets specifically a database engine. This means that the consumer will need to somehow configure, which database engine will Orpheus target. Here comes into play Orpheus's configuration. Either by file or by code, you can define the database engine for Orpheus. Configuration by file One easy way to configure Orpheus is by using a configuration file. The configuration file, is basically a XML file that has the DI configuration for Orpheus. To initialize the configuration you can use the Orpheus configuration object. OrpheusCore.Configuration.ConfigurationManager.InitializeConfiguration(); By default Orpheus will try to find file OrpheusCore.config in the executing folder. Alternatively you can define a file name. OrpheusCore.Configuration.ConfigurationManager.InitializeConfiguration(\"MyPath\\Orpheus.config\"); Configuration Sample <?xml version=\"1.0\"?> <OrpheusConfiguration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"> <Services> <ServiceProviderItem> <Implementation>System.Data.SqlClient.SqlConnection, System.Data.SqlClient, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Implementation> <Service>System.Data.IDbConnection, System.Data.Common, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Service> <ServiceLifeTime>Transient</ServiceLifeTime> </ServiceProviderItem> <ServiceProviderItem> <Implementation>OrpheusCore.OrpheusDatabase, OrpheusCore, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Implementation> <Service>OrpheusInterfaces.IOrpheusDatabase, OrpheusInterfaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Service> <ServiceLifeTime>Transient</ServiceLifeTime> </ServiceProviderItem> <ServiceProviderItem> <Implementation>OrpheusSQLDDLHelper.OrpheusSQLServerDDLHelper, OrpheusSQLServerDDLHelper, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Implementation> <Service>OrpheusInterfaces.IOrpheusDDLHelper, OrpheusInterfaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Service> <ServiceLifeTime>Transient</ServiceLifeTime> </ServiceProviderItem> <ServiceProviderItem> <Implementation>OrpheusLogger.OrpheusFileLogger, OrpheusLogger, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Implementation> <Service>Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.Abstractions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60</Service> <ServiceLifeTime>Singleton</ServiceLifeTime> </ServiceProviderItem> </Services> <Logging Level=\"Error\" MaxFileSize=\"1\" /> </OrpheusConfiguration> Configuration by code If you don't want to have that configuration in a file or if you already have a configuration file, that has a different schema/structure than the one that Orpheus supports, you can initialize configuration by code. You simply create a OrpheusConfiguration class and populate it's properties. Imagine this scenario, where you have an ASP.net Core application and you want to use Orpheus, but you don't want to have a separate configuration file. // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices(IServiceCollection services) { services.AddMvc(); var orpheusConfig = new OrpheusCore.Configuration.OrpheusConfiguration(); //here instead of having the services hardcoded, you can read them from your web.config or appsettings.json //and populate the Services list. orpheusConfig.Services = new List<OrpheusCore.Configuration.ServiceProviderItem>() { new OrpheusCore.Configuration.ServiceProviderItem() { Service = \"System.Data.IDbConnection, System.Data.Common, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", Implementation = \"System.Data.SqlClient.SqlConnection, System.Data.SqlClient, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", ServiceLifetime = ServiceLifetime.Transient } }; OrpheusCore.Configuration.ConfigurationManager.InitializeConfiguration(orpheusConfig); OrpheusCore.ServiceProvider.OrpheusServiceProvider.InitializeServiceCollection(services); }"
  },
  "documentation/orpheus_benchmarking_results.html": {
    "href": "documentation/orpheus_benchmarking_results.html",
    "title": "Benchmark results | Orpheus ORM",
    "keywords": "Benchmark results Machine details Attribute Value Operating System Windows 10 CPU I7 Database engine SQL Server Database engine location Local HDD type SSD RAM 8GB Benchmark type Attribute Value Serialization type POCO Benchmark framework BenchmarkDotNet Performed on October 14th 2017 Model used public enum TestModelTransactorType { ttCustomer, ttSupplier } public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } Insert results Inserting rows in a batch. One transaction per test. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Gen 2 Allocated Insert10Rows 1.564 ms 1.666 ms 0.4328 ms 1.00 0.00 11.7188 5.8594 - 72.2 KB Insert100Rows 9.711 ms 3.261 ms 0.8470 ms 6.62 1.75 93.7500 46.8750 - 553.4 KB Insert1000Rows 92.750 ms 31.579 ms 8.2026 ms 63.21 16.78 875.0000 250.0000 125.0000 5391.61 KB Load results Loading and serializing one model/record per iteration. Method Mean Error StdDev Scaled ScaledSD Gen 0 Allocated Load50RowsOneAtATime 4.804 ms 1.870 ms 0.4856 ms 1.00 0.00 156.2500 333.16 KB Load500RowsOneAtATime 44.574 ms 5.552 ms 1.4420 ms 9.35 0.86 1625.0000 3331.54 KB Load5000RowsOneAtATime 456.932 ms 86.088 ms 22.3610 ms 95.87 9.36 16250.0000 33315.86 KB Update results Updating rows in a batch. One transaction per test. 4 model fields have been updated. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Update10Rows 14.27 ms 13.302 ms 3.4551 ms 1.00 0.00 93.7500 46.8750 578.02 KB Update100Rows 13.31 ms 2.445 ms 0.6352 ms 0.97 0.16 93.7500 46.8750 578.02 KB Update1000Rows 130.70 ms 15.357 ms 3.9890 ms 9.50 1.59 1000.0000 250.0000 5592.98 KB Delete results Deleting rows in a batch. One transaction per test. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Delete10Rows 11.22 ms 7.682 ms 1.995 ms 1.00 0.00 - - 25.96 KB Delete100Rows 121.19 ms 32.724 ms 8.500 ms 11.04 1.68 125.0000 - 277.24 KB Delete1000Rows 890.56 ms 139.418 ms 36.213 ms 81.14 11.60 750.0000 250.0000 2578.13 KB Legend Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Scaled : Mean(CurrentBenchmark) / Mean(BaselineBenchmark) ScaledSD : Standard deviation of ratio of distribution of [CurrentBenchmark] and [BaselineBenchmark] Gen 0 : GC Generation 0 collects per 1k Operations Gen 1 : GC Generation 1 collects per 1k Operations Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 ms : 1 Millisecond (0.001 sec)"
  },
  "documentation/orpheus_creating_schema.html": {
    "href": "documentation/orpheus_creating_schema.html",
    "title": "Creating your schema | Orpheus ORM",
    "keywords": "Creating your schema Orpheus has a built-in schema generator engine, that you can use to create the database schema for your application. It's not mandatory to use it, in order to use Orpheus, but if you are starting a new project, you might find it useful. Schema Creation Options In the ORM frameworks world, there a couple of different options. Here are a couple of the main ones. Database First Where the ORM reads your database and generates the models. Code First Where you write your models and the ORM creates the schema for you. Orpheus supports (at the moment) the second option, where you write up your models and decorate them accordingly based on your needs. Decorating your classes with schema attributes There are plenty of attributes that you can use to decorate your classes and/or properties. Have a look at Orpheus Attributes But let's highlight some common usage scenarios. Foreign Key /// <summary> /// Foreign key attribute constructor. /// </summary> /// <param name=\"referenceTable\">The referenced table name</param> /// <param name=\"referenceField\">The referenced field name</param> /// <param name=\"onDeleteCascade\">Delete cascade flag</param> /// <param name=\"onUpdateCascade\">Update cascade flag</param> public ForeignKey(string referenceTable, string referenceField,bool onDeleteCascade = false, bool onUpdateCascade = false) Here is an invoice model, that depends on multiple different models. Shipping type, payment method etc. /// <summary> /// A class that represents an \"Invoice\" entity. /// </summary> public class Invoice { /// <summary> /// If the invoice created is a transformation of another invoice. /// This will help traceability. /// </summary> [ForeignKey(\"Invoice\",\"Id\")] public Guid? OriginalInvoice { get; set; } /// <summary> /// Invoice type id. /// </summary> [ForeignKey(\"InvoiceType\",\"Id\")] public Guid InvoiceTypeId { get; set; } /// <summary> /// Invoice's transactor. /// </summary> [ForeignKey(\"Transactor\",\"Id\")] public Guid TransactorId { get; set; } /// <summary> /// Fiscal year where the invoice belongs to. /// </summary> [ForeignKey(\"FiscalYear\",\"Id\")] public Guid FiscalYearId { get; set; } /// <summary> /// Invoice's shipping method. /// </summary> [ForeignKey(\"ShippingMethod\",\"Id\")] public Guid ShippingMethodId { get; set; } /// <summary> /// Invoice's payment method. /// </summary> [ForeignKey(\"PaymentMethod\",\"Id\")] public Guid PaymentMethodId { get; set; } /// <summary> /// Invoice's date and time. /// </summary> public DateTime InvoiceDate { get; set; } .... Composite Primary/Unique Key A composite primary/unique key is a key that is comprised from more than one fields. /// <summary> /// Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. /// </summary> public class UniqueCompositeKey : OrpheusCompositeKeyBaseAttribute { /// <summary> /// Primary composite key. /// </summary> /// <param name=\"fields\">Fields that are part of the key</param> /// <param name=\"sort\">Sort direction</param> public UniqueCompositeKey(string[] fields,string sort = null) : base(fields) { } } In the following example, an attribute can only be associated with only one attribute group. /// <summary> /// Class that represents an attribute. An attribute can be associated with only one attribute group. /// </summary> [UniqueCompositeKey(new string[] {\"Id\", \"AttributeGroupId\" })] public class Attribute { [ForeignKey(\"AttributeGroup\",\"Id\")] public Guid AttributeGroupId { get; set; } } Creating an Orpheus Schema You can use IOrpheusDatabase to create an ISchema object. /// <summary> /// Creates a schema object and sets it's database. /// </summary> /// <param name=\"id\">Schema id</param> /// <param name=\"description\">Schema description</param> /// <param name=\"version\">Schema version</param> /// <returns>An ISchema instance</returns> ISchema CreateSchema(Guid id, string description, double version); ISchema is the object were you have to register your models, that will eventually be your database schema. There are a couple of different ways to register a model into a schema, but the most straight forward one, is to register it via its type. /// <summary> /// Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. /// </summary> /// <typeparam name=\"T\"></typeparam> /// <param name=\"dependencies\"></param> /// <returns></returns> ISchemaTable AddSchemaTable<T>(List<ISchemaObject> dependencies = null) where T : class; Here is an example Schema.AddSchemaTable<MercuryTransactor>(); There is built in support for dependencies between your models. So if your model has an \"Id\" reference to another, this will be translated into a foreign key constraint. In order for the Orpheus schema to be aware of that dependency you have to register it. So if your invoice table depends on the invoice type table, the code would like this. Schema.AddSchemaTable<InvoiceType>(); var invoice = this.schema.AddSchemaTable<Invoice>(); invoice.AddDependency<MercuryInvoiceType>(); After you have registered all your models, you need only to execute the schema. Schema.Execute(); This will iterate through the registered models, resolve the dependencies and create the database schema. Updating an existing schema Updating a schema, particularly a complex, is always tricky. Orpheus's schema builder provides build-in support, for reconciling differences between your models and the corresponding tables. The preferred option would be, when you have a schema change, to instantiate a new ISchema and register only the models that have changes. This is definitely the most performant way to update your schema, using Orpheus, since only the models with the changes will be executed. An added benefit, is that you can keep a historic record of your schema changes. Alternatively you can always use the same ISchema object and just change your models that are already registered and Orpheus will reconcile field and constraint differences."
  },
  "documentation/orpheus_ddl_helper.html": {
    "href": "documentation/orpheus_ddl_helper.html",
    "title": "Orpheus DDL Helper | Orpheus ORM",
    "keywords": "Orpheus DDL Helper OrpheusORM is database engine type agnostic. This means that it does not include any code targeting a specific database engine. Despite the fact, that SQL based database engines use the SQL language, there are differences between them. Here is where the IOrpheusDDLHelper comes into play. Every IOrpheusDatabase requires a IOrpheusDDLHelper . Orpheus provides out of the box, helpers for MS SQL and MySQL database engines. So what do these helpers do? As mentioned above, they reconcile differences between the different database engines. For example MS SQL natively supports the UID type while MySQL does not. The helper will give this kind of information to the IOrpheusDatabase . You can implement your own IOrpheusDDLHelper and register it in OrpheusORM. Implementing a custom IOrpheusDDLHelper Implementing your own DDLHelper is not a requirement. However if Orpheus does not provide one for you, for your database engine, it's quite easy to implement your own. All you have to do is to create a class that implements IOrpheusDDLHelper ,implement your logic and register it in Orpheus. Here is how you can register a custom DDL helper."
  },
  "api/OrpheusAttributes.ForeignKey.html": {
    "href": "api/OrpheusAttributes.ForeignKey.html",
    "title": "Class ForeignKey | Orpheus ORM",
    "keywords": "Class ForeignKey Primary key constraint attribute. Decorate a property with attribute to create a foreign key constraint on a schema object. Inheritance System.Object System.Attribute OrpheusBaseAttribute ForeignKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class ForeignKey : OrpheusBaseAttribute Constructors | Improve this Doc View Source ForeignKey(String, String, Boolean, Boolean) Foreign key attribute constructor. Declaration public ForeignKey(string referenceTable, string referenceField, bool onDeleteCascade = false, bool onUpdateCascade = false) Parameters Type Name Description System.String referenceTable The referenced table name System.String referenceField The referenced field name System.Boolean onDeleteCascade Delete cascade flag System.Boolean onUpdateCascade Update cascade flag | Improve this Doc View Source ForeignKey(Type, String, Boolean, Boolean) Foreign key attribute constructor. Declaration public ForeignKey(Type referenceTableType, string referenceField, bool onDeleteCascade = false, bool onUpdateCascade = false) Parameters Type Name Description System.Type referenceTableType The referenced table type System.String referenceField The referenced field name System.Boolean onDeleteCascade Delete cascade flag System.Boolean onUpdateCascade Update cascade flag Properties | Improve this Doc View Source OnDeleteCascade Set to true to enable cascade delete. Declaration public bool OnDeleteCascade { get; } Property Value Type Description System.Boolean Delete cascade flag | Improve this Doc View Source OnUpdateCascade Set to true to enable cascade update. Declaration public bool OnUpdateCascade { get; } Property Value Type Description System.Boolean Update cascade flag | Improve this Doc View Source ReferenceField The reference table key. Declaration public string ReferenceField { get; } Property Value Type Description System.String The referenced table key | Improve this Doc View Source ReferenceTable The reference table. Declaration public string ReferenceTable { get; } Property Value Type Description System.String The referenced table name"
  },
  "api/OrpheusAttributes.PrimaryCompositeKey.html": {
    "href": "api/OrpheusAttributes.PrimaryCompositeKey.html",
    "title": "Class PrimaryCompositeKey | Orpheus ORM",
    "keywords": "Class PrimaryCompositeKey Primary composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. Inheritance System.Object System.Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute PrimaryCompositeKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class PrimaryCompositeKey : OrpheusCompositeKeyBaseAttribute Constructors | Improve this Doc View Source PrimaryCompositeKey(String[], String) Primary composite key. Declaration public PrimaryCompositeKey(string[] fields, string sort = null) Parameters Type Name Description System.String [] fields Fields that are part of the key System.String sort Sort direction"
  },
  "api/OrpheusAttributes.SchemaIgnore.html": {
    "href": "api/OrpheusAttributes.SchemaIgnore.html",
    "title": "Class SchemaIgnore | Orpheus ORM",
    "keywords": "Class SchemaIgnore SchemaIgnore attribute. Decorate a model property to indicate that it's not part of the actual db table schema. Useful for dynamically calculated/defined model properties. Inheritance System.Object System.Attribute OrpheusBaseAttribute SchemaIgnore Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class SchemaIgnore : OrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.html": {
    "href": "api/OrpheusAttributes.html",
    "title": "Namespace OrpheusAttributes | Orpheus ORM",
    "keywords": "Namespace OrpheusAttributes Classes DataTypeAttribute Annotate a property with attribute to set it's DbType DefaultValue Default value attribute. Decorate a property with attribute to set it's default value. FieldName FieldName attribute. Decorate a model property with this attribute, to explicitly define the corresponding field name in the db table. ForeignKey Primary key constraint attribute. Decorate a property with attribute to create a foreign key constraint on a schema object. Length Length attribute. Decorate a property with attribute to set a maximum length value. Applies only to string types. OrpheusBaseAttribute The Orpheus base attribute class. OrpheusCompositeKeyBaseAttribute Composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. PrimaryCompositeKey Primary composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. PrimaryKey Primary key constraint attribute. Decorate a property with attribute to create a primary key constraint on a schema object. RequiredField Required field attribute. SchemaIgnore SchemaIgnore attribute. Decorate a model property to indicate that it's not part of the actual db table schema. Useful for dynamically calculated/defined model properties. TableName TableName attribute. Decorate a model with this attribute to to explicitly define the corresponding db table name. UniqueCompositeKey Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. UniqueKey Unique key constraint attribute. Decorate a property with attribute to create a unique key constraint on a schema object."
  },
  "api/OrpheusInterfaces.IForeignKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.IForeignKeySchemaConstraint.html",
    "title": "Interface IForeignKeySchemaConstraint | Orpheus ORM",
    "keywords": "Interface IForeignKeySchemaConstraint A foreign key constraint. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IForeignKeySchemaConstraint : ISchemaConstraint Properties | Improve this Doc View Source ForeignKeyFields Foreign key fields. Applicable only when key is of type ktForeign. Declaration List<string> ForeignKeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > List of key fields | Improve this Doc View Source ForeignKeySchemaObject Referenced table name. Applicable only when key is of type ktForeign. Declaration string ForeignKeySchemaObject { get; set; } Property Value Type Description System.String Constraint's key | Improve this Doc View Source OnDeleteCascade Cascade on delete. Declaration bool OnDeleteCascade { get; set; } Property Value Type Description System.Boolean True if cascade on delete is on | Improve this Doc View Source OnUpdateCascade Cascade on update. Declaration bool OnUpdateCascade { get; set; } Property Value Type Description System.Boolean True if cascade on update is on"
  },
  "api/OrpheusInterfaces.IOrpheusModuleDefinition.html": {
    "href": "api/OrpheusInterfaces.IOrpheusModuleDefinition.html",
    "title": "Interface IOrpheusModuleDefinition | Orpheus ORM",
    "keywords": "Interface IOrpheusModuleDefinition The definition/database properties of a module. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusModuleDefinition Properties | Improve this Doc View Source Database Orpheus database. Declaration IOrpheusDatabase Database { get; set; } Property Value Type Description IOrpheusDatabase Orpheus Database | Improve this Doc View Source DetailTableOptions List of module's detail table options. Declaration List<IOrpheusTableOptions> DetailTableOptions { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableOptions > Module's detail table options | Improve this Doc View Source MainTableOptions Module's main table options. Declaration IOrpheusTableOptions MainTableOptions { get; set; } Property Value Type Description IOrpheusTableOptions Module's main table options | Improve this Doc View Source Name Module name. Declaration string Name { get; set; } Property Value Type Description System.String Module name | Improve this Doc View Source ReferenceTableOptions List of module reference tables. Declaration List<IOrpheusTableOptions> ReferenceTableOptions { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableOptions > Module's reference table options Methods | Improve this Doc View Source CreateTableOptions() Creates an instance of OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions() Returns Type Description IOrpheusTableOptions An IOrpheusTableOptions instance | Improve this Doc View Source CreateTableOptions(String, Type) Creates an instance of OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions(string tableName, Type modelType) Parameters Type Name Description System.String tableName System.Type modelType Returns Type Description IOrpheusTableOptions An IOrpheusTableOptions instance | Improve this Doc View Source CreateTableOptions(Type) Creates an instance of OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions(Type modelType) Parameters Type Name Description System.Type modelType Returns Type Description IOrpheusTableOptions An IOrpheusTableOptions instance | Improve this Doc View Source LoadFrom(Stream) Load definition from stream. Declaration void LoadFrom(Stream stream) Parameters Type Name Description System.IO.Stream stream | Improve this Doc View Source LoadFrom(String) Loads definition from a file. Declaration void LoadFrom(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source LoadFromDB(String) Loads definition from the connected database. Declaration void LoadFromDB(string moduleName) Parameters Type Name Description System.String moduleName | Improve this Doc View Source SaveTo(Stream) Saves definition to a stream. Declaration void SaveTo(Stream stream) Parameters Type Name Description System.IO.Stream stream | Improve this Doc View Source SaveTo(String) Saves definition to a file. Declaration void SaveTo(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source SaveToDB() Saves the definition the connected database. Declaration void SaveToDB()"
  },
  "api/OrpheusInterfaces.SchemaJoinType.html": {
    "href": "api/OrpheusInterfaces.SchemaJoinType.html",
    "title": "Enum SchemaJoinType | Orpheus ORM",
    "keywords": "Enum SchemaJoinType Schema join types. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum SchemaJoinType Fields Name Description jtInner Inner join. jtLeftInner Left inner join. jtLeftOuter Left out join jtRightInner Right inner join. jtRightOuter Right outer join."
  }
}