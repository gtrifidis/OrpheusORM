{
  "api/OrpheusInterfaces.IOrpheusTable-1.html": {
    "href": "api/OrpheusInterfaces.IOrpheusTable-1.html",
    "title": "Interface IOrpheusTable<T> | Orpheus ORM",
    "keywords": "Interface IOrpheusTable<T> Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTable<T> : IOrpheusTable Type Parameters Name Description T Properties Data Table's data. Declaration List<T> Data { get; } Property Value Type Description System.Collections.Generic.List <T> Methods Add(T) Adds a new record to the table. Declaration void Add(T newRecord) Parameters Type Name Description T newRecord Add(List<T>) Adds a list of new records. Declaration void Add(List<T> newRecords) Parameters Type Name Description System.Collections.Generic.List <T> newRecords Delete(T) Deletes a record. Declaration void Delete(T record) Parameters Type Name Description T record Delete(List<T>) Deletes records. Declaration void Delete(List<T> records) Parameters Type Name Description System.Collections.Generic.List <T> records Update(T) Updates an existing record. Declaration void Update(T record) Parameters Type Name Description T record Update(List<T>) Updates existing records. Declaration void Update(List<T> records) Parameters Type Name Description System.Collections.Generic.List <T> records"
  },
  "api/OrpheusInterfaces.IPrimaryKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.IPrimaryKeySchemaConstraint.html",
    "title": "Interface IPrimaryKeySchemaConstraint | Orpheus ORM",
    "keywords": "Interface IPrimaryKeySchemaConstraint A primary key constraint. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IPrimaryKeySchemaConstraint : ISchemaConstraint"
  },
  "api/OrpheusInterfaces.ISchemaJoinDefinition.html": {
    "href": "api/OrpheusInterfaces.ISchemaJoinDefinition.html",
    "title": "Interface ISchemaJoinDefinition | Orpheus ORM",
    "keywords": "Interface ISchemaJoinDefinition Represents a schema join definition, which can be used by ISchemaObject when a schema is created. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaJoinDefinition Properties JoinKeyField Key field name of the join object. Declaration string JoinKeyField { get; set; } Property Value Type Description System.String JoinOperator Join operator SchemaJoinOperator . Declaration SchemaJoinOperator JoinOperator { get; set; } Property Value Type Description SchemaJoinOperator JoinType Type of join SchemaJoinType . Declaration SchemaJoinType JoinType { get; set; } Property Value Type Description SchemaJoinType KeyField Key field name of the main object. Declaration string KeyField { get; set; } Property Value Type Description System.String"
  },
  "api/OrpheusInterfaces.SchemaObjectType.html": {
    "href": "api/OrpheusInterfaces.SchemaObjectType.html",
    "title": "Enum SchemaObjectType | Orpheus ORM",
    "keywords": "Enum SchemaObjectType Type of a schema object. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum SchemaObjectType Fields Name Description sotAlterColumn Alter column. sotAlterTable Alter table. sotCreateTable Create table. sotCreateView Create view. sotDropTable Drop table. sotDropView Drop view. sotUnknown Unknown type. This is the default."
  },
  "api/OrpheusInterfaces.SchemaSort.html": {
    "href": "api/OrpheusInterfaces.SchemaSort.html",
    "title": "Enum SchemaSort | Orpheus ORM",
    "keywords": "Enum SchemaSort Schema sort type. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum SchemaSort Fields Name Description ssAsc Sort ascending. ssDesc Sort descending."
  },
  "api/OrpheusAttributes.DefaultValue.html": {
    "href": "api/OrpheusAttributes.DefaultValue.html",
    "title": "Class DefaultValue | Orpheus ORM",
    "keywords": "Class DefaultValue Default value attribute. Decorate a property with attribute to set it's default value. Inheritance System.Object System.Attribute OrpheusBaseAttribute DefaultValue Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class DefaultValue : OrpheusBaseAttribute, _Attribute Constructors DefaultValue(Object) DefaultValue attribute constructor. Declaration public DefaultValue(object value) Parameters Type Name Description System.Object value Properties Value The default value. Declaration public object Value { get; } Property Value Type Description System.Object Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusAttributes.PrimaryKey.html": {
    "href": "api/OrpheusAttributes.PrimaryKey.html",
    "title": "Class PrimaryKey | Orpheus ORM",
    "keywords": "Class PrimaryKey Primary key constraint attribute. Decorate a property with attribute to create a primary key constraint on a schema object. Inheritance System.Object System.Attribute OrpheusBaseAttribute PrimaryKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class PrimaryKey : OrpheusBaseAttribute, _Attribute Constructors PrimaryKey(Boolean, Boolean) Primary key attribute constructor. Declaration public PrimaryKey(bool isAutoGenerated = true, bool isDBGenerated = false) Parameters Type Name Description System.Boolean isAutoGenerated System.Boolean isDBGenerated Properties IsAutoGenerated Indicates if the primary key value will be auto-generated in memory. Only System.Guid type is supported. Declaration public bool IsAutoGenerated { get; } Property Value Type Description System.Boolean IsDBGenerated Indicates if the primary key value is auto-generated. Declaration public bool IsDBGenerated { get; } Property Value Type Description System.Boolean Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusAttributes.html": {
    "href": "api/OrpheusAttributes.html",
    "title": "Namespace OrpheusAttributes | Orpheus ORM",
    "keywords": "Namespace OrpheusAttributes Classes DataTypeAttribute Annotate a property with attribute to set it's DbType DefaultValue Default value attribute. Decorate a property with attribute to set it's default value. ForeignKey Primary key constraint attribute. Decorate a property with attribute to create a foreign key constraint on a schema object. Length Length attribute. Decorate a property with attribute to set a maximum length value. Applies only to string types. OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute Composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. PrimaryCompositeKey Primary composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. PrimaryKey Primary key constraint attribute. Decorate a property with attribute to create a primary key constraint on a schema object. RequiredField Required field attribute. UniqueCompositeKey Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. UniqueKey Unique key constraint attribute. Decorate a property with attribute to create a unique key constraint on a schema object."
  },
  "api/OrpheusInterfaces.IOrpheusDatabase.html": {
    "href": "api/OrpheusInterfaces.IOrpheusDatabase.html",
    "title": "Interface IOrpheusDatabase | Orpheus ORM",
    "keywords": "Interface IOrpheusDatabase Orpheus database access component. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusDatabase Properties Connected State of the database. Connected or not. Declaration bool Connected { get; } Property Value Type Description System.Boolean ConnectionString Gets the underlying IDbConnection connection string. Declaration string ConnectionString { get; } Property Value Type Description System.String DDLHelper Helps execute DDL specific commands for the underlying db engine. Declaration IOrpheusDDLHelper DDLHelper { get; set; } Property Value Type Description IOrpheusDDLHelper Modules List of registered Orpheus modules. Declaration List<IOrpheusModule> Modules { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusModule > TypeMap Mapping dictionary of types to data types. Declaration Dictionary<Type, DbType> TypeMap { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Data.DbType > Methods BeginTransaction() Creates a transaction object. Declaration IDbTransaction BeginTransaction() Returns Type Description System.Data.IDbTransaction Connect(String) Connects to the database engine defined in the connection string. Declaration void Connect(string connectionString = null) Parameters Type Name Description System.String connectionString CreateCommand() / Declaration IDbCommand CreateCommand() Returns Type Description System.Data.IDbCommand CreateModule(IOrpheusModuleDefinition) Creates an OrpheusModule. Declaration IOrpheusModule CreateModule(IOrpheusModuleDefinition definition = null) Parameters Type Name Description IOrpheusModuleDefinition definition Returns Type Description IOrpheusModule CreateModuleDefinition() Creates an OrpheusModuleDefinition. Declaration IOrpheusModuleDefinition CreateModuleDefinition() Returns Type Description IOrpheusModuleDefinition CreatePreparedQuery(String) Returns a prepared query with parameters created. Declaration IDbCommand CreatePreparedQuery(string SQL) Parameters Type Name Description System.String SQL Returns Type Description System.Data.IDbCommand CreatePreparedQuery(String, List<String>) Returns a prepared query with parameters created. Declaration IDbCommand CreatePreparedQuery(string SQL, List<string> parameters) Parameters Type Name Description System.String SQL System.Collections.Generic.List < System.String > parameters Returns Type Description System.Data.IDbCommand CreateSchema(Guid, String, Double) Creates a schema object and sets it's database. Declaration ISchema CreateSchema(Guid id, string description, double version) Parameters Type Name Description System.Guid id System.String description System.Double version Returns Type Description ISchema CreateTable<T>(IOrpheusTableOptions) Creates a table and sets its database. Declaration IOrpheusTable<T> CreateTable<T>(IOrpheusTableOptions options) Parameters Type Name Description IOrpheusTableOptions options Returns Type Description IOrpheusTable <T> Type Parameters Name Description T CreateTable<T>(String, List<IOrpheusTableKeyField>) Creates a table and sets its database. Declaration IOrpheusTable<T> CreateTable<T>(string tableName, List<IOrpheusTableKeyField> keyFields = null) Parameters Type Name Description System.String tableName System.Collections.Generic.List < IOrpheusTableKeyField > keyFields Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Disconnect() Disconnects from the database engine. Declaration void Disconnect() IsNullableType(Type) Returns true if the type is a nullable type. Declaration bool IsNullableType(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean RegisterModule(IOrpheusModule) Register an Orpheus module to the database. Declaration void RegisterModule(IOrpheusModule module) Parameters Type Name Description IOrpheusModule module"
  },
  "api/OrpheusInterfaces.IOrpheusReferenceTable-1.html": {
    "href": "api/OrpheusInterfaces.IOrpheusReferenceTable-1.html",
    "title": "Interface IOrpheusReferenceTable<T> | Orpheus ORM",
    "keywords": "Interface IOrpheusReferenceTable<T> Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusReferenceTable<T> : IOrpheusReferenceTable, IOrpheusTable Type Parameters Name Description T"
  },
  "api/OrpheusInterfaces.IOrpheusTableKeyField.html": {
    "href": "api/OrpheusInterfaces.IOrpheusTableKeyField.html",
    "title": "Interface IOrpheusTableKeyField | Orpheus ORM",
    "keywords": "Interface IOrpheusTableKeyField Represents an Orpheus table key field. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTableKeyField Properties IsAutoGenerated If set to true and the type is System.Guid then with every new insert, a value will be auto generated. Declaration bool IsAutoGenerated { get; set; } Property Value Type Description System.Boolean IsDBGenerated True if the underlying db engine is going to generate the value for the key. Declaration bool IsDBGenerated { get; set; } Property Value Type Description System.Boolean KeySQLUpdate Function that returns a SQL string to be used in a WHERE clause, to select the new key value(s) after an insert. Declaration Func<string> KeySQLUpdate { get; set; } Property Value Type Description System.Func < System.String > Name Name of the field that is the table key. Declaration string Name { get; set; } Property Value Type Description System.String"
  },
  "api/OrpheusInterfaces.ISchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.ISchemaConstraint.html",
    "title": "Interface ISchemaConstraint | Orpheus ORM",
    "keywords": "Interface ISchemaConstraint Represents a schema constraint. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaConstraint Properties Action Returns true if the constraint needs to drop. Declaration DDLAction Action { get; set; } Property Value Type Description DDLAction Fields Fields which the constraint will be applied. Declaration List<string> Fields { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > Name Key name. Declaration string Name { get; set; } Property Value Type Description System.String SchemaObject Schema object were this schema constraint exists Declaration ISchemaObject SchemaObject { get; } Property Value Type Description ISchemaObject Sort Key's sort direction. Declaration SchemaSort Sort { get; set; } Property Value Type Description SchemaSort Methods SQL() Returns the SQL definition of the key. Declaration string SQL() Returns Type Description System.String"
  },
  "api/OrpheusAttributes.Length.html": {
    "href": "api/OrpheusAttributes.Length.html",
    "title": "Class Length | Orpheus ORM",
    "keywords": "Class Length Length attribute. Decorate a property with attribute to set a maximum length value. Applies only to string types. Inheritance System.Object System.Attribute OrpheusBaseAttribute Length Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class Length : OrpheusBaseAttribute, _Attribute Constructors Length(Int32) Length attribute constructor. Declaration public Length(int value) Parameters Type Name Description System.Int32 value Properties Value The maximum length value. Declaration public int Value { get; } Property Value Type Description System.Int32 Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusAttributes.OrpheusBaseAttribute.html": {
    "href": "api/OrpheusAttributes.OrpheusBaseAttribute.html",
    "title": "Class OrpheusBaseAttribute | Orpheus ORM",
    "keywords": "Class OrpheusBaseAttribute Inheritance System.Object System.Attribute OrpheusBaseAttribute DataTypeAttribute DefaultValue ForeignKey Length OrpheusCompositeKeyBaseAttribute PrimaryKey RequiredField UniqueKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class OrpheusBaseAttribute : Attribute, _Attribute Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusAttributes.RequiredField.html": {
    "href": "api/OrpheusAttributes.RequiredField.html",
    "title": "Class RequiredField | Orpheus ORM",
    "keywords": "Class RequiredField Required field attribute. Inheritance System.Object System.Attribute OrpheusBaseAttribute RequiredField Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class RequiredField : OrpheusBaseAttribute, _Attribute Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusInterfaces.ExtendedDbTypes.html": {
    "href": "api/OrpheusInterfaces.ExtendedDbTypes.html",
    "title": "Enum ExtendedDbTypes | Orpheus ORM",
    "keywords": "Enum ExtendedDbTypes Extended DbTypes enumeration, for types that are not listed in the generic DbType enumeration. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum ExtendedDbTypes Fields Name Description StringBlob A variable-length stream of Unicode data with a maximum length"
  },
  "api/OrpheusInterfaces.IOrpheusModule.html": {
    "href": "api/OrpheusInterfaces.IOrpheusModule.html",
    "title": "Interface IOrpheusModule | Orpheus ORM",
    "keywords": "Interface IOrpheusModule OrpheusModule represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusModule Properties Database Module's database. Declaration IOrpheusDatabase Database { get; } Property Value Type Description IOrpheusDatabase Definition Module's definition. Declaration IOrpheusModuleDefinition Definition { get; } Property Value Type Description IOrpheusModuleDefinition MainTable The module's main table. Declaration IOrpheusTable MainTable { get; set; } Property Value Type Description IOrpheusTable ReferenceTables List of module's reference tables. Reference tables are tables that are referenced from a module table, through a foreign key constraint. Declaration List<IOrpheusTable> ReferenceTables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > Tables List of module's tables. Declaration List<IOrpheusTable> Tables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > Methods GetReferenceTable<T>() Gets a table by model. Uses the model class name as the table name. Declaration IOrpheusTable<T> GetReferenceTable<T>() Returns Type Description IOrpheusTable <T> Type Parameters Name Description T GetReferenceTable<T>(Int32) Gets a table by index, for a model. Declaration IOrpheusTable<T> GetReferenceTable<T>(int index) Parameters Type Name Description System.Int32 index Returns Type Description IOrpheusTable <T> Type Parameters Name Description T GetReferenceTable<T>(String) Gets a table by name, for a model. Declaration IOrpheusTable<T> GetReferenceTable<T>(string tableName) Parameters Type Name Description System.String tableName Returns Type Description IOrpheusTable <T> Type Parameters Name Description T GetTable<T>() Gets a table by model. Uses the model class name as the table name. Declaration IOrpheusTable<T> GetTable<T>() Returns Type Description IOrpheusTable <T> Type Parameters Name Description T GetTable<T>(Int32) Gets a table by index, for a model. Declaration IOrpheusTable<T> GetTable<T>(int index) Parameters Type Name Description System.Int32 index Returns Type Description IOrpheusTable <T> Type Parameters Name Description T GetTable<T>(String) Gets a table by name, for a model. Declaration IOrpheusTable<T> GetTable<T>(string tableName) Parameters Type Name Description System.String tableName Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Load(Dictionary<String, List<Object>>) Declaration void Load(Dictionary<string, List<object>> keyValues) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < System.Object >> keyValues Load(List<Object>) Loads a module's record from the database. Declaration void Load(List<object> keyValues = null) Parameters Type Name Description System.Collections.Generic.List < System.Object > keyValues Save() Saves all changes to the database. Declaration void Save()"
  },
  "api/OrpheusInterfaces.IOrpheusTable.html": {
    "href": "api/OrpheusInterfaces.IOrpheusTable.html",
    "title": "Interface IOrpheusTable | Orpheus ORM",
    "keywords": "Interface IOrpheusTable Orpheus table is the core Orpheus data object. It is responsible for performing data operations. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTable Properties DetailTables List of dependent detail tables. Declaration List<IOrpheusTable> DetailTables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > KeyFields Table's key field(s). Declaration List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > Level Table's level. Zero if the table is not a child to any other table. Declaration int Level { get; } Property Value Type Description System.Int32 MasterTable Master table name. Declaration IOrpheusTable MasterTable { get; set; } Property Value Type Description IOrpheusTable MasterTableKeyFields Master table's key field(s) Declaration List<IOrpheusTableKeyField> MasterTableKeyFields { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > Modified True when table data have been modified. Declaration bool Modified { get; } Property Value Type Description System.Boolean Name The table name. Declaration string Name { get; } Property Value Type Description System.String Methods ClearData() Clears existing loaded data. Declaration void ClearData() ExecuteDeletes(IDbTransaction) Executes any delete changes that the table has. Declaration void ExecuteDeletes(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction ExecuteInserts(IDbTransaction) Executes any insert changes that the table has. Declaration void ExecuteInserts(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction ExecuteUpdates(IDbTransaction) Executes any update changes that the table has. Declaration void ExecuteUpdates(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction GetKeyValues() Returns list of current key values. Declaration List<object> GetKeyValues() Returns Type Description System.Collections.Generic.List < System.Object > Load(Dictionary<String, List<Object>>, Boolean) Loads records from the DB to the table. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields are bound with a logical AND Declaration void Load(Dictionary<string, List<object>> keyValues, bool clearExistingData = true) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < System.Object >> keyValues System.Boolean clearExistingData Load(List<Object>, Boolean) Loads records from the DB to the table. Declaration void Load(List<object> keyValues = null, bool clearExistingData = true) Parameters Type Name Description System.Collections.Generic.List < System.Object > keyValues System.Boolean clearExistingData"
  },
  "api/OrpheusInterfaces.ISchema.html": {
    "href": "api/OrpheusInterfaces.ISchema.html",
    "title": "Interface ISchema | Orpheus ORM",
    "keywords": "Interface ISchema Represents an Orpheus Schema. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchema Properties DB Orpheus database. Declaration IOrpheusDatabase DB { get; } Property Value Type Description IOrpheusDatabase Description Schema description. Declaration string Description { get; } Property Value Type Description System.String Id Schema Id. Declaration Guid Id { get; } Property Value Type Description System.Guid SchemaInfoTable Orpheus schema info table. Declaration string SchemaInfoTable { get; } Property Value Type Description System.String SchemaModulesTable Orpheus module definition table. Declaration string SchemaModulesTable { get; } Property Value Type Description System.String SchemaObjects List of schema objects. ISchemaObject Declaration List<ISchemaObject> SchemaObjects { get; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > SchemaObjectsTable Orpheus schema objects table. Declaration string SchemaObjectsTable { get; } Property Value Type Description System.String Version Schema version. Declaration double Version { get; } Property Value Type Description System.Double Methods AddSchemaObject(ISchemaObject) Adds a schema object to the list. Declaration ISchemaObject AddSchemaObject(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Returns Type Description ISchemaObject AddSchemaTable(Object, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable(object model, List<ISchemaObject> dependencies = null) Parameters Type Name Description System.Object model System.Collections.Generic.List < ISchemaObject > dependencies Returns Type Description ISchemaTable AddSchemaTable(String, List<ISchemaObject>, Object) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable(string tableName, List<ISchemaObject> dependencies = null, object model = null) Parameters Type Name Description System.String tableName System.Collections.Generic.List < ISchemaObject > dependencies System.Object model Returns Type Description ISchemaTable AddSchemaTable(Type, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable(Type modelType, List<ISchemaObject> dependencies = null) Parameters Type Name Description System.Type modelType System.Collections.Generic.List < ISchemaObject > dependencies Returns Type Description ISchemaTable Drop() Drops schema. Removes all schema objects from the database. Declaration void Drop() Execute() Iterate through the schema objects and executes them. Declaration void Execute() LoadFromFile(String) Loads schema from an xml file. Declaration void LoadFromFile(string fileName) Parameters Type Name Description System.String fileName RemoveSchemaObject(ISchemaObject) Removes from the schema list Declaration void RemoveSchemaObject(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject SaveToFile(String) Saves schema to an xml file. Declaration void SaveToFile(string fileName) Parameters Type Name Description System.String fileName SchemaObjectExists(ISchemaObject) Returns the guid of the schema object it is created. Declaration Guid SchemaObjectExists(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Returns Type Description System.Guid"
  },
  "api/OrpheusInterfaces.ISchemaTable.html": {
    "href": "api/OrpheusInterfaces.ISchemaTable.html",
    "title": "Interface ISchemaTable | Orpheus ORM",
    "keywords": "Interface ISchemaTable Create table schema interface. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaTable : ISchemaObject Properties JoinDefinition Join definition. Defines how schema objects can be joined. Declaration ISchemaJoinDefinition JoinDefinition { get; set; } Property Value Type Description ISchemaJoinDefinition"
  },
  "api/OrpheusInterfaces.SchemaJoinOperator.html": {
    "href": "api/OrpheusInterfaces.SchemaJoinOperator.html",
    "title": "Enum SchemaJoinOperator | Orpheus ORM",
    "keywords": "Enum SchemaJoinOperator Join operator type. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum SchemaJoinOperator Fields Name Description joEquals Equals. joNotEquals Not equals."
  },
  "api/OrpheusInterfaces.SchemaJoinType.html": {
    "href": "api/OrpheusInterfaces.SchemaJoinType.html",
    "title": "Enum SchemaJoinType | Orpheus ORM",
    "keywords": "Enum SchemaJoinType Schema join types. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum SchemaJoinType Fields Name Description jtInner Inner join. jtLeftInner Left inner join. jtLeftOuter Left out join jtRightInner Right inner join. jtRightOuter Right outer join."
  },
  "about/about.html": {
    "href": "about/about.html",
    "title": "About Aspect WFO Core Documentation Project | Orpheus ORM",
    "keywords": "About Aspect WFO Core Documentation Project Contributors Trifidis Yiorgos, yiorgos.trifidis@aspect.com Tools used Used DocFx Microsoft's new documentation utility."
  },
  "examples/update_module.html": {
    "href": "examples/update_module.html",
    "title": "Using an OrpheusModule | Orpheus ORM",
    "keywords": "Using an OrpheusModule var sqlServerConnectionString = @\"Data Source=[yourserver];Initial Catalog=orpheusTestDB;Integrated Security=True\"; var db = OrpheusIocContainer.Resolve<IOrpheusDatabase>(); //Connect to the database. db.Connect(sqlServerConnectionString); var module = OrpheusIocContainer.Resolve<IOrpheusModule>(new ResolverOverride[] { new ParameterOverride(\"database\",db) }); module.ReferenceTables.Add(this.Database.CreateTable<TestModelTransactor>(\"TestModelTransactor\")); module.ReferenceTables.Add(this.Database.CreateTable<TestModelItem>(\"TestModelItem\")); module.Tables.Add(this.Database.CreateTable<TestModelOrder>(\"TestModelOrder\")); var order = module.GetTable<TestModelOrder>(\"TestModelOrder\"); var orderLineOptions = OrpheusIocContainer.Resolve<IOrpheusTableOptions>(); orderLineOptions.TableName = \"TestModelOrderLine\"; orderLineOptions.MasterTableKeyFields = new List<IOrpheusTableKeyField>(); orderLineOptions.Database = this.Database; var orderMasterKeyField = OrpheusIocContainer.Resolve<IOrpheusTableKeyField>(); orderMasterKeyField.Name = \"OrderId\"; orderLineOptions.MasterTableKeyFields.Add(orderMasterKeyField); orderLineOptions.MasterTableName = \"TestModelOrder\"; module.Tables.Add(this.Database.CreateTable<TestModelOrderLine>(orderLineOptions)); var transactors = module.GetReferenceTable<TestModelTransactor>(\"TestModelTransactor\"); var items = module.GetReferenceTable<TestModelItem>(\"TestModelItem\"); var orderLines = module.GetTable<TestModelOrderLine>(\"TestModelOrderLine\"); orderLines.MasterTable = order; //populating auxiliary data. transactors.Add(GetTransactors()); items.Add(GetItems()); using(var tr = db.BeginTransaction()) { transactors.ExecuteInserts(tr); items.ExecuteInserts(tr); try { tr.Commit(); } catch { throw; } } //loading auxiliary data in memory. transactors.Load(); items.Load(); order.Add(new TestModelOrder() { OrderId = Guid.NewGuid(), OrderDateTime = DateTime.Now, TransactorId = transactors.Data.First().TransactorId }); orderLines.Add(new TestModelOrderLine() { ItemId = items.Data.First().ItemId, OrderLineId = Guid.NewGuid(), Price = 5, Quantity = 10, TotalPrice = 50 }); //saving the module will save both _Order_ and *OrderLine* tables module.Save();"
  },
  "examples/update_single_table.html": {
    "href": "examples/update_single_table.html",
    "title": "| Orpheus ORM",
    "keywords": "Using a single OrpheusTable = var sqlServerConnectionString = @\"Data Source=[yourserver];Initial Catalog=orpheusTestDB;Integrated Security=True\"; var db = OrpheusIocContainer.Resolve<IOrpheusDatabase>(); //Connect to the database. db.Connect(sqlServerConnectionString); //create a table options object and create the orpheus table. var tableOptions = OrpheusIocContainer.Resolve<IOrpheusTableOptions>(); tableOptions.TableName = \"TestModelUser\"; tableOptions.KeyFields = new List<IOrpheusTableKeyField>(); var usersTable = this.Database.CreateTable<TestModelUser>(tableOptions); //add one or more TestModelUser records usersTable.Add(TestDatabase.GetRandomUsersForTesting(recordCount)); IDbTransaction trans = this.Database.BeginTransaction(); try { usersTable.ExecuteInserts(trans); trans.Commit(); } catch(Exception e) { trans.Rollback(); throw e; }"
  },
  "examples/define_dbengine.html": {
    "href": "examples/define_dbengine.html",
    "title": "Defining database engine | Orpheus ORM",
    "keywords": "Defining database engine OrpheusORM uses Unity in order to have the same code base for all supported database engines. To configure which database engine to use, you need only to update the unity configuration section with the appropriate types. SQL Server <unity xmlns=\"http://schemas.microsoft.com/practices/2010/unityx\"> <assembly name=\"System.Data,4.0.0.0 ,Culture=neutral,PublicKeyToken=b77a5c561934e089\"/> <alias alias=\"IDbConnection\" type=\"System.Data.IDbConnection, System.Data\"/> <alias alias=\"SqlConnection\" type=\"System.Data.SqlClient.SqlConnection, System.Data\"/> <register type=\"IDbConnection\" mapTo=\"SqlConnection\"> <constructor/> </register> MySQL <unity xmlns=\"http://schemas.microsoft.com/practices/2010/unityx\"> <assembly name=\"System.Data,4.0.0.0 ,Culture=neutral,PublicKeyToken=b77a5c561934e089\"/> <alias alias=\"IDbConnection\" type=\"System.Data.IDbConnection, System.Data\"/> <alias alias=\"MySqlConnection\" type=\"MySql.Data.MySqlClient.MySqlConnection, MySql.Data\"/> <register type=\"IDbConnection\" mapTo=\"MySqlConnection\"> <constructor/> </register>"
  },
  "api/OrpheusInterfaces.ISchemaObject.html": {
    "href": "api/OrpheusInterfaces.ISchemaObject.html",
    "title": "Interface ISchemaObject | Orpheus ORM",
    "keywords": "Interface ISchemaObject Base schema object interface. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaObject Properties Action Defines the DDL action to be taken when schema objects are executed. Declaration DDLAction Action { get; set; } Property Value Type Description DDLAction Constraints List of schema object constraints. Primary,foreign or any type of constraint. Declaration List<ISchemaConstraint> Constraints { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaConstraint > DB Orpheus database. Declaration IOrpheusDatabase DB { get; } Property Value Type Description IOrpheusDatabase Fields Fields for the schema object. Applicable mostly when schema object is a table or a view. Declaration List<ISchemaField> Fields { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaField > IsCreated True if the schema object is created in the DB. Declaration bool IsCreated { get; } Property Value Type Description System.Boolean RawDDL If DDL is set all other fields and join schema objects are ignored. Dependencies still apply. Declaration string RawDDL { get; set; } Property Value Type Description System.String Schema Schema where the schema object belongs to. Declaration ISchema Schema { get; set; } Property Value Type Description ISchema SchemaName DB Schema name. Any DDL/SQL statement executed will have pre-pent the SchemaName if set. Declaration string SchemaName { get; set; } Property Value Type Description System.String SchemaObjectsThatDependOnMe Other schema objects that depend on this object. First it will iterate through the dependency list and run any schema object that is not yet destroyed. Declaration List<ISchemaObject> SchemaObjectsThatDependOnMe { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > SchemaObjectsThatIDepend Other schema objects that this object depends upon. First it will iterate through the dependency list and run any schema object that is not yet created. Declaration List<ISchemaObject> SchemaObjectsThatIDepend { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > SQLName The name of the schema object. Could be the name of a table or a view or a stored procedure. Declaration string SQLName { get; set; } Property Value Type Description System.String UniqueKey Unique generated when the object is created and saved in the DB. Declaration Guid UniqueKey { get; set; } Property Value Type Description System.Guid Methods AddDependency(ISchemaObject) Adds a dependency to a schema object. Declaration void AddDependency(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject AddDependency(Type) Adds a dependency to a schema object based on the model type. Declaration void AddDependency(Type modelType) Parameters Type Name Description System.Type modelType AddField(String, String, Boolean, String, String, String) Creates and adds a field to the field list. Declaration ISchemaField AddField(string name, string dataType, bool nullable = true, string defaultValue = null, string size = null, string alias = null) Parameters Type Name Description System.String name System.String dataType System.Boolean nullable System.String defaultValue System.String size System.String alias Returns Type Description ISchemaField AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) Adds a foreign key constraint. Declaration IForeignKeySchemaConstraint AddForeignKeyConstraint(string name, List<string> fields, string foreignKeySchemaObject, List<string> foreignKeySchemaFields, bool onCascadeDelete = true, bool onUpdateCascade = true) Parameters Type Name Description System.String name System.Collections.Generic.List < System.String > fields System.String foreignKeySchemaObject System.Collections.Generic.List < System.String > foreignKeySchemaFields System.Boolean onCascadeDelete System.Boolean onUpdateCascade Returns Type Description IForeignKeySchemaConstraint AddPrimaryKeyConstraint(String, List<String>, SchemaSort) Adds a primary key constraint. Declaration IPrimaryKeySchemaConstraint AddPrimaryKeyConstraint(string name, List<string> fields, SchemaSort sort = SchemaSort.ssAsc) Parameters Type Name Description System.String name System.Collections.Generic.List < System.String > fields SchemaSort sort Returns Type Description IPrimaryKeySchemaConstraint AddUniqueKeyConstraint(String, List<String>) Adds a unique key constraint. Declaration IUniqueKeySchemaConstraint AddUniqueKeyConstraint(string name, List<string> fields) Parameters Type Name Description System.String name System.Collections.Generic.List < System.String > fields Returns Type Description IUniqueKeySchemaConstraint CreateFieldsFromModel(Object) Creates fields from a given model. Supports OrpheusAttributes attributes Declaration void CreateFieldsFromModel(object model) Parameters Type Name Description System.Object model Drop() Drops the schema object. Declaration void Drop() Execute() Executes schema object. Declaration void Execute() GetConstraintsDDL() Returns the DDL constraints string to be executed. Declaration string GetConstraintsDDL() Returns Type Description System.String GetData<T>() Returns the seed data for the table if defined. Declaration List<T> GetData<T>() Returns Type Description System.Collections.Generic.List <T> Type Parameters Name Description T GetDDLString() Returns the DDL string to be executed. Declaration string GetDDLString() Returns Type Description System.String GetSchemaType() Gets the schema type. Declaration SchemaObjectType GetSchemaType() Returns Type Description SchemaObjectType SetData<T>(List<T>) Optional data to initialize a schema object. Practically applicable only to a table. Declaration void SetData<T>(List<T> data) Parameters Type Name Description System.Collections.Generic.List <T> data Type Parameters Name Description T"
  },
  "api/OrpheusInterfaces.html": {
    "href": "api/OrpheusInterfaces.html",
    "title": "Namespace OrpheusInterfaces | Orpheus ORM",
    "keywords": "Namespace OrpheusInterfaces Interfaces IForeignKeySchemaConstraint A foreign key constraint. IOrpheusDatabase Orpheus database access component. IOrpheusDDLHelper Abstract definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. IOrpheusModule OrpheusModule represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. IOrpheusModuleDefinition The definition/database properties of a module. IOrpheusReferenceTable IOrpheusReferenceTable<T> IOrpheusTable Orpheus table is the core Orpheus data object. It is responsible for performing data operations. IOrpheusTable<T> Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. IOrpheusTableKeyField Represents an Orpheus table key field. IOrpheusTableOptions Represents IOrpheusTable options, which can be used to instantiate a table. IPrimaryKeySchemaConstraint A primary key constraint. ISchema Represents an Orpheus Schema. ISchemaConstraint Represents a schema constraint. ISchemaField Represents a schema field. ISchemaJoinDefinition Represents a schema join definition, which can be used by ISchemaObject when a schema is created. ISchemaObject Base schema object interface. ISchemaTable Create table schema interface. ISchemaView Create view schema object. IUniqueKeySchemaConstraint A unique key constraint. Enums DDLAction DDL action. ExtendedDbTypes Extended DbTypes enumeration, for types that are not listed in the generic DbType enumeration. SchemaJoinOperator Join operator type. SchemaJoinType Schema join types. SchemaObjectType Type of a schema object. SchemaSort Schema sort type."
  },
  "api/OrpheusAttributes.DataTypeAttribute.html": {
    "href": "api/OrpheusAttributes.DataTypeAttribute.html",
    "title": "Class DataTypeAttribute | Orpheus ORM",
    "keywords": "Class DataTypeAttribute Annotate a property with attribute to set it's DbType Inheritance System.Object System.Attribute OrpheusBaseAttribute DataTypeAttribute Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class DataTypeAttribute : OrpheusBaseAttribute, _Attribute Constructors DataTypeAttribute(DbType) Data type attribute constructor. Declaration public DataTypeAttribute(DbType dbType) Parameters Type Name Description System.Data.DbType dbType DataTypeAttribute(Int32) Data type attribute constructor. Declaration public DataTypeAttribute(int dbType) Parameters Type Name Description System.Int32 dbType Properties DataType Field's data type. Declaration public DbType DataType { get; } Property Value Type Description System.Data.DbType Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusAttributes.PrimaryCompositeKey.html": {
    "href": "api/OrpheusAttributes.PrimaryCompositeKey.html",
    "title": "Class PrimaryCompositeKey | Orpheus ORM",
    "keywords": "Class PrimaryCompositeKey Primary composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. Inheritance System.Object System.Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute PrimaryCompositeKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class PrimaryCompositeKey : OrpheusCompositeKeyBaseAttribute, _Attribute Constructors PrimaryCompositeKey(String[], String) Primary composite key. Declaration public PrimaryCompositeKey(string[] fields, string sort = null) Parameters Type Name Description System.String [] fields System.String sort Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusAttributes.UniqueCompositeKey.html": {
    "href": "api/OrpheusAttributes.UniqueCompositeKey.html",
    "title": "Class UniqueCompositeKey | Orpheus ORM",
    "keywords": "Class UniqueCompositeKey Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. Inheritance System.Object System.Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute UniqueCompositeKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class UniqueCompositeKey : OrpheusCompositeKeyBaseAttribute, _Attribute Constructors UniqueCompositeKey(String[], String) Primary composite key. Declaration public UniqueCompositeKey(string[] fields, string sort = null) Parameters Type Name Description System.String [] fields System.String sort Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusInterfaces.DDLAction.html": {
    "href": "api/OrpheusInterfaces.DDLAction.html",
    "title": "Enum DDLAction | Orpheus ORM",
    "keywords": "Enum DDLAction DDL action. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public enum DDLAction Fields Name Description ddlAlter DDL alter. ddlCreate DDL create. ddlDrop DDL drop."
  },
  "api/OrpheusInterfaces.IOrpheusDDLHelper.html": {
    "href": "api/OrpheusInterfaces.IOrpheusDDLHelper.html",
    "title": "Interface IOrpheusDDLHelper | Orpheus ORM",
    "keywords": "Interface IOrpheusDDLHelper Abstract definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusDDLHelper Properties DB Database for the DDL helper. Declaration IOrpheusDatabase DB { get; set; } Property Value Type Description IOrpheusDatabase DelimitedIndetifierEnd Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. Declaration char DelimitedIndetifierEnd { get; } Property Value Type Description System.Char DelimitedIndetifierStart Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. Declaration char DelimitedIndetifierStart { get; } Property Value Type Description System.Char SupportsGuidType Returns true if the DBEngine supports natively the Guid type. Declaration bool SupportsGuidType { get; } Property Value Type Description System.Boolean Methods CreateDatabase() Returns true if a database is successfully created using the underlying db engine settings. Declaration bool CreateDatabase() Returns Type Description System.Boolean CreateDatabase(String) Returns true if a database is successfully created using the underlying db engine settings. Declaration bool CreateDatabase(string dbName) Parameters Type Name Description System.String dbName Returns Type Description System.Boolean CreateDatabaseWithDDL(String) Returns true if a database is successfully created using the passed DDL script. Declaration bool CreateDatabaseWithDDL(string ddlString) Parameters Type Name Description System.String ddlString Returns Type Description System.Boolean DatabaseExists(String) Returns true the database exists. Declaration bool DatabaseExists(string dbName) Parameters Type Name Description System.String dbName Returns Type Description System.Boolean DbTypeToString(DbType) Returns the db engine specific string equivalent, for a DbType enumeration. Declaration string DbTypeToString(DbType dataType) Parameters Type Name Description System.Data.DbType dataType Returns Type Description System.String SafeFormatField(String) Properly formats a field name, to be used in a SQL statement, in case the field name is a reserved word. Declaration string SafeFormatField(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description System.String SchemaObjectExists(String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. Declaration bool SchemaObjectExists(string schemaObjectName) Parameters Type Name Description System.String schemaObjectName Returns Type Description System.Boolean TypeToString(Type) Returns the db engine specific string equivalent, for a .net type Declaration string TypeToString(Type type) Parameters Type Name Description System.Type type Returns Type Description System.String"
  },
  "api/OrpheusInterfaces.IOrpheusReferenceTable.html": {
    "href": "api/OrpheusInterfaces.IOrpheusReferenceTable.html",
    "title": "Interface IOrpheusReferenceTable | Orpheus ORM",
    "keywords": "Interface IOrpheusReferenceTable Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusReferenceTable : IOrpheusTable"
  },
  "api/OrpheusInterfaces.IOrpheusTableOptions.html": {
    "href": "api/OrpheusInterfaces.IOrpheusTableOptions.html",
    "title": "Interface IOrpheusTableOptions | Orpheus ORM",
    "keywords": "Interface IOrpheusTableOptions Represents IOrpheusTable options, which can be used to instantiate a table. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTableOptions Properties Database Database that the table is a part of. Declaration [IgnoreDataMember] IOrpheusDatabase Database { get; set; } Property Value Type Description IOrpheusDatabase KeyFields Table's key field(s). Can be more than one to support composite keys. Declaration List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > MasterTable Table's master table. To support the master-detail relationship. Declaration [IgnoreDataMember] IOrpheusTable MasterTable { get; set; } Property Value Type Description IOrpheusTable MasterTableKeyFields Master table's key field(s). Can be more than one to support composite keys. Declaration List<IOrpheusTableKeyField> MasterTableKeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > MasterTableName Table's master table. To support the master-detail relationship. Declaration string MasterTableName { get; set; } Property Value Type Description System.String ModelType Model type. Declaration Type ModelType { get; set; } Property Value Type Description System.Type TableName Table's name. Declaration string TableName { get; set; } Property Value Type Description System.String Methods AddKeyField(String, Boolean, Boolean, Func<String>) Creates a new key field. Declaration void AddKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters Type Name Description System.String name System.Boolean isAutoGenerated System.Boolean isDBGenerated System.Func < System.String > keySQLUpdate AddMasterKeyField(String, Boolean, Boolean, Func<String>) Creates a new master key field Declaration void AddMasterKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters Type Name Description System.String name System.Boolean isAutoGenerated System.Boolean isDBGenerated System.Func < System.String > keySQLUpdate"
  },
  "api/OrpheusInterfaces.ISchemaField.html": {
    "href": "api/OrpheusInterfaces.ISchemaField.html",
    "title": "Interface ISchemaField | Orpheus ORM",
    "keywords": "Interface ISchemaField Represents a schema field. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaField Properties Alias Field alias. Declaration string Alias { get; set; } Property Value Type Description System.String DataType Field data type. Declaration string DataType { get; set; } Property Value Type Description System.String DefaultValue Field's default value. Declaration string DefaultValue { get; set; } Property Value Type Description System.String Name Field name. Declaration string Name { get; set; } Property Value Type Description System.String Nullable True if field accepts null values. Declaration bool Nullable { get; set; } Property Value Type Description System.Boolean SchemaObject Schema object were this schema field exists Declaration ISchemaObject SchemaObject { get; } Property Value Type Description ISchemaObject Size Field size (if applicable). Declaration string Size { get; set; } Property Value Type Description System.String Methods SQL() Returns SQL definition for the field. Declaration string SQL() Returns Type Description System.String"
  },
  "api/OrpheusInterfaces.ISchemaView.html": {
    "href": "api/OrpheusInterfaces.ISchemaView.html",
    "title": "Interface ISchemaView | Orpheus ORM",
    "keywords": "Interface ISchemaView Create view schema object. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaView : ISchemaObject Properties JoinSchemaObjects Join schema objects. Applicable mostly when schema object is a table or a view. Declaration List<ISchemaTable> JoinSchemaObjects { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaTable > TableName Applicable only when DDLCommand = ddcCreateView. Declaration string TableName { get; set; } Property Value Type Description System.String"
  },
  "api/OrpheusInterfaces.IUniqueKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.IUniqueKeySchemaConstraint.html",
    "title": "Interface IUniqueKeySchemaConstraint | Orpheus ORM",
    "keywords": "Interface IUniqueKeySchemaConstraint A unique key constraint. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IUniqueKeySchemaConstraint : ISchemaConstraint"
  },
  "api/OrpheusAttributes.ForeignKey.html": {
    "href": "api/OrpheusAttributes.ForeignKey.html",
    "title": "Class ForeignKey | Orpheus ORM",
    "keywords": "Class ForeignKey Primary key constraint attribute. Decorate a property with attribute to create a foreign key constraint on a schema object. Inheritance System.Object System.Attribute OrpheusBaseAttribute ForeignKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class ForeignKey : OrpheusBaseAttribute, _Attribute Constructors ForeignKey(String, String, Boolean, Boolean) Foreign key attribute constructor. Declaration public ForeignKey(string referenceTable, string referenceField, bool onDeleteCascade = false, bool onUpdateCascade = false) Parameters Type Name Description System.String referenceTable System.String referenceField System.Boolean onDeleteCascade System.Boolean onUpdateCascade ForeignKey(Type, String, Boolean, Boolean) Foreign key attribute constructor. Declaration public ForeignKey(Type referenceTableType, string referenceField, bool onDeleteCascade = false, bool onUpdateCascade = false) Parameters Type Name Description System.Type referenceTableType System.String referenceField System.Boolean onDeleteCascade System.Boolean onUpdateCascade Properties OnDeleteCascade On delete cascade flag. Declaration public bool OnDeleteCascade { get; } Property Value Type Description System.Boolean OnUpdateCascade On update cascade flag. Declaration public bool OnUpdateCascade { get; } Property Value Type Description System.Boolean ReferenceField The reference table key. Declaration public string ReferenceField { get; } Property Value Type Description System.String ReferenceTable The reference table. Declaration public string ReferenceTable { get; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusAttributes.OrpheusCompositeKeyBaseAttribute.html": {
    "href": "api/OrpheusAttributes.OrpheusCompositeKeyBaseAttribute.html",
    "title": "Class OrpheusCompositeKeyBaseAttribute | Orpheus ORM",
    "keywords": "Class OrpheusCompositeKeyBaseAttribute Composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. Inheritance System.Object System.Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute PrimaryCompositeKey UniqueCompositeKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class OrpheusCompositeKeyBaseAttribute : OrpheusBaseAttribute, _Attribute Constructors OrpheusCompositeKeyBaseAttribute(String[], String) Create a OrpheusCompositeKeyBaseAttribute. Declaration public OrpheusCompositeKeyBaseAttribute(string[] fields, string sort = null) Parameters Type Name Description System.String [] fields Fields that are the key System.String sort Sort direction for the key Properties Fields List of fields that are the key. Declaration public string[] Fields { get; } Property Value Type Description System.String [] Sort Sort for the key. Declaration public string Sort { get; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusAttributes.UniqueKey.html": {
    "href": "api/OrpheusAttributes.UniqueKey.html",
    "title": "Class UniqueKey | Orpheus ORM",
    "keywords": "Class UniqueKey Unique key constraint attribute. Decorate a property with attribute to create a unique key constraint on a schema object. Inheritance System.Object System.Attribute OrpheusBaseAttribute UniqueKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class UniqueKey : OrpheusBaseAttribute, _Attribute Implements System.Runtime.InteropServices._Attribute"
  },
  "api/OrpheusInterfaces.IForeignKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.IForeignKeySchemaConstraint.html",
    "title": "Interface IForeignKeySchemaConstraint | Orpheus ORM",
    "keywords": "Interface IForeignKeySchemaConstraint A foreign key constraint. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IForeignKeySchemaConstraint : ISchemaConstraint Properties ForeignKeyFields Foreign key fields. Applicable only when key is of type ktForeign. Declaration List<string> ForeignKeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > ForeignKeySchemaObject Referenced table name. Applicable only when key is of type ktForeign. Declaration string ForeignKeySchemaObject { get; set; } Property Value Type Description System.String OnDeleteCascade Cascade on delete. Declaration bool OnDeleteCascade { get; set; } Property Value Type Description System.Boolean OnUpdateCascade Cascade on update. Declaration bool OnUpdateCascade { get; set; } Property Value Type Description System.Boolean"
  },
  "api/OrpheusInterfaces.IOrpheusModuleDefinition.html": {
    "href": "api/OrpheusInterfaces.IOrpheusModuleDefinition.html",
    "title": "Interface IOrpheusModuleDefinition | Orpheus ORM",
    "keywords": "Interface IOrpheusModuleDefinition The definition/database properties of a module. Namespace : OrpheusInterfaces Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusModuleDefinition Properties Database Orpheus database. Declaration IOrpheusDatabase Database { get; set; } Property Value Type Description IOrpheusDatabase DetailTableOptions List of module's detail table options. Declaration List<IOrpheusTableOptions> DetailTableOptions { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableOptions > MainTableOptions Module's main table options. Declaration IOrpheusTableOptions MainTableOptions { get; set; } Property Value Type Description IOrpheusTableOptions Name Module name. Declaration string Name { get; set; } Property Value Type Description System.String ReferenceTableOptions List of module reference tables. Declaration List<IOrpheusTableOptions> ReferenceTableOptions { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableOptions > Methods CreateTableOptions() Creates an instance of OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions() Returns Type Description IOrpheusTableOptions CreateTableOptions(String, Type) Creates an instance of OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions(string tableName, Type modelType) Parameters Type Name Description System.String tableName System.Type modelType Returns Type Description IOrpheusTableOptions CreateTableOptions(Type) Creates an instance of OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions(Type modelType) Parameters Type Name Description System.Type modelType Returns Type Description IOrpheusTableOptions LoadFrom(Stream) Load definition from stream. Declaration void LoadFrom(Stream stream) Parameters Type Name Description System.IO.Stream stream LoadFrom(String) Loads definition from a file. Declaration void LoadFrom(string fileName) Parameters Type Name Description System.String fileName LoadFromDB(String) Loads definition from the connected database. Declaration void LoadFromDB(string moduleName) Parameters Type Name Description System.String moduleName SaveTo(Stream) Saves definition to a stream. Declaration void SaveTo(Stream stream) Parameters Type Name Description System.IO.Stream stream SaveTo(String) Saves definition to a file. Declaration void SaveTo(string fileName) Parameters Type Name Description System.String fileName SaveToDB() Saves the definition the connected database. Declaration void SaveToDB()"
  },
  "index.html": {
    "href": "index.html",
    "title": "Orpheus ORM | Orpheus ORM",
    "keywords": ""
  }
}