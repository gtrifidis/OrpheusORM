{
  "documentation/benchmarks/orpheus_benchmarking_results_1.1.2.html": {
    "href": "documentation/benchmarks/orpheus_benchmarking_results_1.1.2.html",
    "title": "Benchmark results | Orpheus",
    "keywords": "Benchmark results Machine details Attribute Value Operating System Windows 10 CPU I7 Database engine SQL Server Database engine location Local HDD type SSD RAM 8GB Benchmark type Attribute Value Serialization type POCO Benchmark framework BenchmarkDotNet Performed on October 14th 2017 Orpheus version 1.1.2 Model used public enum TestModelTransactorType { ttCustomer, ttSupplier } public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } Insert results Inserting rows in a batch. One transaction per test. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Gen 2 Allocated Insert10Rows 1.564 ms 1.666 ms 0.4328 ms 1.00 0.00 11.7188 5.8594 - 72.2 KB Insert100Rows 9.711 ms 3.261 ms 0.8470 ms 6.62 1.75 93.7500 46.8750 - 553.4 KB Insert1000Rows 92.750 ms 31.579 ms 8.2026 ms 63.21 16.78 875.0000 250.0000 125.0000 5391.61 KB Load results Loading and serializing one model/record per iteration. Method Mean Error StdDev Scaled ScaledSD Gen 0 Allocated Load50RowsOneAtATime 4.804 ms 1.870 ms 0.4856 ms 1.00 0.00 156.2500 333.16 KB Load500RowsOneAtATime 44.574 ms 5.552 ms 1.4420 ms 9.35 0.86 1625.0000 3331.54 KB Load5000RowsOneAtATime 456.932 ms 86.088 ms 22.3610 ms 95.87 9.36 16250.0000 33315.86 KB Update results Updating rows in a batch. One transaction per test. 4 model fields have been updated. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Update10Rows 14.27 ms 13.302 ms 3.4551 ms 1.00 0.00 93.7500 46.8750 578.02 KB Update100Rows 13.31 ms 2.445 ms 0.6352 ms 0.97 0.16 93.7500 46.8750 578.02 KB Update1000Rows 130.70 ms 15.357 ms 3.9890 ms 9.50 1.59 1000.0000 250.0000 5592.98 KB Delete results Deleting rows in a batch. One transaction per test. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Delete10Rows 11.22 ms 7.682 ms 1.995 ms 1.00 0.00 - - 25.96 KB Delete100Rows 121.19 ms 32.724 ms 8.500 ms 11.04 1.68 125.0000 - 277.24 KB Delete1000Rows 890.56 ms 139.418 ms 36.213 ms 81.14 11.60 750.0000 250.0000 2578.13 KB Legend Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Scaled : Mean(CurrentBenchmark) / Mean(BaselineBenchmark) ScaledSD : Standard deviation of ratio of distribution of [CurrentBenchmark] and [BaselineBenchmark] Gen 0 : GC Generation 0 collects per 1k Operations Gen 1 : GC Generation 1 collects per 1k Operations Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 ms : 1 Millisecond (0.001 sec)"
  },
  "api/OrpheusAttributes.ForeignKey.html": {
    "href": "api/OrpheusAttributes.ForeignKey.html",
    "title": "Class ForeignKey | Orpheus",
    "keywords": "Class ForeignKey Primary key constraint attribute. Decorate a property with attribute to create a foreign key constraint on a schema object. Inheritance System.Object System.Attribute OrpheusBaseAttribute ForeignKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class ForeignKey : OrpheusBaseAttribute, IForeignKey, IOrpheusBaseAttribute Constructors | Improve this Doc View Source ForeignKey(String, String, String, Boolean, Boolean) Foreign key attribute constructor. Declaration public ForeignKey(string referenceTable, string referenceField, string schemaName = null, bool onDeleteCascade = false, bool onUpdateCascade = false) Parameters Type Name Description System.String referenceTable System.String referenceField System.String schemaName System.Boolean onDeleteCascade System.Boolean onUpdateCascade | Improve this Doc View Source ForeignKey(Type, String, String, Boolean, Boolean) Foreign key attribute constructor. Declaration public ForeignKey(Type referenceTableType, string referenceField, string schemaName = null, bool onDeleteCascade = false, bool onUpdateCascade = false) Parameters Type Name Description System.Type referenceTableType The referenced table type System.String referenceField The referenced field name System.String schemaName Schema name System.Boolean onDeleteCascade Delete cascade flag System.Boolean onUpdateCascade Update cascade flag Properties | Improve this Doc View Source Field The foreign key field name. Declaration public string Field { get; set; } Property Value Type Description System.String | Improve this Doc View Source OnDeleteCascade Set to true to enable cascade delete. Declaration public bool OnDeleteCascade { get; } Property Value Type Description System.Boolean Delete cascade flag | Improve this Doc View Source OnUpdateCascade Set to true to enable cascade update. Declaration public bool OnUpdateCascade { get; } Property Value Type Description System.Boolean Update cascade flag | Improve this Doc View Source ReferenceField The reference table key. Declaration public string ReferenceField { get; } Property Value Type Description System.String The referenced table key | Improve this Doc View Source ReferenceTable The reference table. Declaration public string ReferenceTable { get; } Property Value Type Description System.String The referenced table name | Improve this Doc View Source SchemaName Optional. Set the schema name of the reference table, if there is one. Declaration public string SchemaName { get; } Property Value Type Description System.String Implements IForeignKey IOrpheusBaseAttribute"
  },
  "api/OrpheusInterfaces.Core.ISQLServerDDLHelper.html": {
    "href": "api/OrpheusInterfaces.Core.ISQLServerDDLHelper.html",
    "title": "Interface ISQLServerDDLHelper | Orpheus",
    "keywords": "Interface ISQLServerDDLHelper SQL Server specific DDL helper definition. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface ISQLServerDDLHelper : IOrpheusDDLHelper Properties | Improve this Doc View Source SchemaSeparator Schema separator. Char that separates the schema name and the schema object. By default in SQL server, the separator is the dot char. Declaration string SchemaSeparator { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AddDatabaseRoleMember(String, String) Adds a database user to the specified role. Declaration void AddDatabaseRoleMember(string roleName, string userName) Parameters Type Name Description System.String roleName System.String userName | Improve this Doc View Source ChangeDatabaseUserPassword(String, String, String) Changes the password for an existing user. Declaration void ChangeDatabaseUserPassword(string userName, string oldPassword, string newPassword) Parameters Type Name Description System.String userName System.String oldPassword System.String newPassword | Improve this Doc View Source CreateDatabaseRole(String, String) Creates a database role. Declaration void CreateDatabaseRole(string roleName, string owner = null) Parameters Type Name Description System.String roleName System.String owner | Improve this Doc View Source CreateDatabaseUser(String, String) Creates a contained database user. Declaration void CreateDatabaseUser(string userName, string password) Parameters Type Name Description System.String userName System.String password | Improve this Doc View Source CreateSchema(String) Creates a schema. Declaration void CreateSchema(string schemaName) Parameters Type Name Description System.String schemaName | Improve this Doc View Source DatabaseRoleExists(String) Returns true if the database role exists. Declaration bool DatabaseRoleExists(string roleName) Parameters Type Name Description System.String roleName Returns Type Description System.Boolean | Improve this Doc View Source DatabaseUserExists(String) Returns true if a database user exists. Declaration bool DatabaseUserExists(string userName) Parameters Type Name Description System.String userName Returns Type Description System.Boolean | Improve this Doc View Source Deny(List<String>, String) Deny permissions to a database principal. Declaration void Deny(List<string> permissions, string databasePrincipal) Parameters Type Name Description System.Collections.Generic.List < System.String > permissions System.String databasePrincipal | Improve this Doc View Source Deny(String, String) Deny permission to a database principal. Declaration void Deny(string permission, string databasePrincipal) Parameters Type Name Description System.String permission System.String databasePrincipal | Improve this Doc View Source Deny(String, String, String) Denies permission to a database principal for a specific schema object. Declaration void Deny(string permission, string schemaObject, string databasePrincipal) Parameters Type Name Description System.String permission System.String schemaObject System.String databasePrincipal | Improve this Doc View Source DropDatabaseRole(String) Drops a database role. Declaration void DropDatabaseRole(string roleName) Parameters Type Name Description System.String roleName | Improve this Doc View Source DropDatabaseRoleMember(String, String) Drops a database user to the specified role. Declaration void DropDatabaseRoleMember(string roleName, string userName) Parameters Type Name Description System.String roleName System.String userName | Improve this Doc View Source DropDatabaseUser(String) Drops a user. Declaration void DropDatabaseUser(string userName) Parameters Type Name Description System.String userName | Improve this Doc View Source DropSchema(String) Drops a schema. Declaration void DropSchema(string schemaName) Parameters Type Name Description System.String schemaName | Improve this Doc View Source EnableContainedDatabases(Boolean) Enables/disables the contained database feature on the SQL server instance. A feature supported from SQL server 2012 and later. Declaration void EnableContainedDatabases(bool enable) Parameters Type Name Description System.Boolean enable | Improve this Doc View Source Grant(List<String>, String) Grants permission to a database principal. Declaration void Grant(List<string> permissions, string databasePrincipal) Parameters Type Name Description System.Collections.Generic.List < System.String > permissions System.String databasePrincipal | Improve this Doc View Source Grant(String, String) Grants permission to a database principal. Declaration void Grant(string permission, string databasePrincipal) Parameters Type Name Description System.String permission System.String databasePrincipal | Improve this Doc View Source Grant(String, String, String) Grants permission to a database principal for a specific schema object. Declaration void Grant(string permission, string schemaObject, string databasePrincipal) Parameters Type Name Description System.String permission System.String schemaObject System.String databasePrincipal | Improve this Doc View Source Revoke(List<String>, String, String) Revoke permissions for a database principal. Declaration void Revoke(List<string> permissions, string schemaObject, string databasePrincipal) Parameters Type Name Description System.Collections.Generic.List < System.String > permissions System.String schemaObject System.String databasePrincipal | Improve this Doc View Source Revoke(String, String, String) Revoke permission for a database principal. Declaration void Revoke(string permission, string schemaObject, string databasePrincipal) Parameters Type Name Description System.String permission System.String schemaObject System.String databasePrincipal | Improve this Doc View Source SchemaExists(String) Returns true if the schema exists. Declaration bool SchemaExists(string schemaName) Parameters Type Name Description System.String schemaName Returns Type Description System.Boolean | Improve this Doc View Source SchemaObjectExists(String, String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. Declaration bool SchemaObjectExists(string schemaObjectName, string schemaName = null) Parameters Type Name Description System.String schemaObjectName System.String schemaName Returns Type Description System.Boolean | Improve this Doc View Source SetDatabaseContainment(String, String) Sets the containment option for a database. Declaration void SetDatabaseContainment(string containment, string databaseName = null) Parameters Type Name Description System.String containment Containment value. NONE or PARTIAL System.String databaseName"
  },
  "api/OrpheusInterfaces.Core.ISaveEventArguments.html": {
    "href": "api/OrpheusInterfaces.Core.ISaveEventArguments.html",
    "title": "Interface ISaveEventArguments | Orpheus",
    "keywords": "Interface ISaveEventArguments Orpheus save event arguments. Occurs when data are actually being save to the database. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface ISaveEventArguments Properties | Improve this Doc View Source Transaction Current transaction. Declaration IDbTransaction Transaction { get; set; } Property Value Type Description System.Data.IDbTransaction"
  },
  "api/OrpheusInterfaces.Core.IModifyRecordEventArguments-1.html": {
    "href": "api/OrpheusInterfaces.Core.IModifyRecordEventArguments-1.html",
    "title": "Interface IModifyRecordEventArguments<T> | Orpheus",
    "keywords": "Interface IModifyRecordEventArguments<T> Orpheus record modify event. Occurs when data are processed in memory. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IModifyRecordEventArguments<T> Type Parameters Name Description T Model type Properties | Improve this Doc View Source ModifyAction Modify action. 0 Insert, 1 Update, 2 Delete Declaration int ModifyAction { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Record Modified record. Declaration T Record { get; } Property Value Type Description T"
  },
  "api/OrpheusInterfaces.Core.ExtendedDbTypes.html": {
    "href": "api/OrpheusInterfaces.Core.ExtendedDbTypes.html",
    "title": "Enum ExtendedDbTypes | Orpheus",
    "keywords": "Enum ExtendedDbTypes Extended DbTypes enumeration, for types that are not listed in the generic DbType enumeration. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public enum ExtendedDbTypes Fields Name Description StringBlob A variable-length stream of Unicode data with a maximum length"
  },
  "api/OrpheusAttributes.TableName.html": {
    "href": "api/OrpheusAttributes.TableName.html",
    "title": "Class TableName | Orpheus",
    "keywords": "Class TableName TableName attribute. Decorate a model with this attribute to to explicitly define the corresponding db table name. Inheritance System.Object System.Attribute OrpheusBaseAttribute TableName Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class TableName : OrpheusBaseAttribute, IOrpheusBaseAttribute Constructors | Improve this Doc View Source TableName(String) TableName constructor. Declaration public TableName(string tableName) Parameters Type Name Description System.String tableName Properties | Improve this Doc View Source Name Table name. Declaration public string Name { get; } Property Value Type Description System.String Implements IOrpheusBaseAttribute"
  },
  "api/OrpheusInterfaces.Schema.SchemaObjectType.html": {
    "href": "api/OrpheusInterfaces.Schema.SchemaObjectType.html",
    "title": "Enum SchemaObjectType | Orpheus",
    "keywords": "Enum SchemaObjectType Type of a schema object. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public enum SchemaObjectType Fields Name Description sotTable Table. sotUniqueIndex Unique index sotUnknown Unknown type. This is the default. sotView View."
  },
  "api/OrpheusInterfaces.Schema.SchemaJoinType.html": {
    "href": "api/OrpheusInterfaces.Schema.SchemaJoinType.html",
    "title": "Enum SchemaJoinType | Orpheus",
    "keywords": "Enum SchemaJoinType Schema join types. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public enum SchemaJoinType Fields Name Description jtInner Inner join. jtLeftInner Left inner join. jtLeftOuter Left out join jtRightInner Right inner join. jtRightOuter Right outer join."
  },
  "api/OrpheusInterfaces.Schema.SchemaJoinOperator.html": {
    "href": "api/OrpheusInterfaces.Schema.SchemaJoinOperator.html",
    "title": "Enum SchemaJoinOperator | Orpheus",
    "keywords": "Enum SchemaJoinOperator Join operator type. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public enum SchemaJoinOperator Fields Name Description joEquals Equals. joNotEquals Not equals."
  },
  "api/OrpheusInterfaces.Schema.IUniqueKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.Schema.IUniqueKeySchemaConstraint.html",
    "title": "Interface IUniqueKeySchemaConstraint | Orpheus",
    "keywords": "Interface IUniqueKeySchemaConstraint A unique key constraint. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface IUniqueKeySchemaConstraint : ISchemaConstraint"
  },
  "api/OrpheusInterfaces.Schema.ISchemaDataObject.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaDataObject.html",
    "title": "Interface ISchemaDataObject | Orpheus",
    "keywords": "Interface ISchemaDataObject Base schema data object interface. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaDataObject : ISchemaObject Properties | Improve this Doc View Source Constraints List of schema object constraints. Primary,foreign or any type of constraint. Declaration List<ISchemaConstraint> Constraints { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaConstraint > Constraints in the schema object | Improve this Doc View Source DB Orpheus database. Declaration IOrpheusDatabase DB { get; } Property Value Type Description IOrpheusDatabase Database where the schema object exists | Improve this Doc View Source Fields Fields for the schema object. Applicable mostly when schema object is a table or a view. Declaration List<ISchemaField> Fields { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaField > Fields in the schema object Methods | Improve this Doc View Source AddField(String, String, Boolean, String, String, String) Creates and adds a field to the field list. Declaration ISchemaField AddField(string name, string dataType, bool nullable = true, string defaultValue = null, string size = null, string alias = null) Parameters Type Name Description System.String name Field name System.String dataType Field data type System.Boolean nullable Nullable System.String defaultValue Field default value System.String size Field size System.String alias Field alias Returns Type Description ISchemaField | Improve this Doc View Source AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) Adds a foreign key constraint. Declaration IForeignKeySchemaConstraint AddForeignKeyConstraint(string name, List<string> fields, string foreignKeySchemaObject, List<string> foreignKeySchemaFields, bool onCascadeDelete = true, bool onUpdateDelete = true) Parameters Type Name Description System.String name Constraint name System.Collections.Generic.List < System.String > fields Constraint fields System.String foreignKeySchemaObject Reference table name System.Collections.Generic.List < System.String > foreignKeySchemaFields Reference table fields System.Boolean onCascadeDelete Cascade on delete System.Boolean onUpdateDelete Cascade on update Returns Type Description IForeignKeySchemaConstraint | Improve this Doc View Source AddPrimaryKeyConstraint(String, List<String>, SchemaSort) Adds a primary key constraint. Declaration IPrimaryKeySchemaConstraint AddPrimaryKeyConstraint(string name, List<string> fields, SchemaSort sort = SchemaSort.ssAsc) Parameters Type Name Description System.String name Constraint name System.Collections.Generic.List < System.String > fields Constraint fields SchemaSort sort Constraint sort Returns Type Description IPrimaryKeySchemaConstraint | Improve this Doc View Source AddUniqueKeyConstraint(String, List<String>) Adds a unique key constraint. Declaration IUniqueKeySchemaConstraint AddUniqueKeyConstraint(string name, List<string> fields) Parameters Type Name Description System.String name Constraint name System.Collections.Generic.List < System.String > fields Constraint fields Returns Type Description IUniqueKeySchemaConstraint An IUniqueKeySchemaConstraint | Improve this Doc View Source CreateFieldsFromModel(Object) Creates fields from a given model. Supports OrpheusAttributes attributes Instance of model Declaration void CreateFieldsFromModel(object model) Parameters Type Name Description System.Object model | Improve this Doc View Source CreateFieldsFromModel(Type) Creates fields from a given model. Supports OrpheusAttributes attributes Model type Declaration void CreateFieldsFromModel(Type modelType) Parameters Type Name Description System.Type modelType | Improve this Doc View Source CreateFieldsFromModel<T>() Creates fields from a given model. Supports OrpheusAttributes attributes Declaration void CreateFieldsFromModel<T>() Type Parameters Name Description T Model type | Improve this Doc View Source GetConstraintsDDL() Returns the DDL constraints string to be executed. Declaration List<string> GetConstraintsDDL() Returns Type Description System.Collections.Generic.List < System.String > Get the generated DDL string for the schema constraints | Improve this Doc View Source GetData<T>() Returns the seed data for the table if defined. Declaration List<T> GetData<T>() Returns Type Description System.Collections.Generic.List <T> Schema object's data Type Parameters Name Description T Schema object model type | Improve this Doc View Source SetData<T>(List<T>) Optional data to initialize a schema object. Practically applicable only to a table. Declaration void SetData<T>(List<T> data) Parameters Type Name Description System.Collections.Generic.List <T> data Type Parameters Name Description T"
  },
  "api/OrpheusInterfaces.Schema.ISchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaConstraint.html",
    "title": "Interface ISchemaConstraint | Orpheus",
    "keywords": "Interface ISchemaConstraint Represents a schema constraint. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaConstraint Properties | Improve this Doc View Source Action Returns true if the constraint needs to drop. Declaration DDLAction Action { get; set; } Property Value Type Description DDLAction Constraint's DDLAction | Improve this Doc View Source ConstraintSQLCommand The constraint SQL command. UNIQUE, PRIMARY KEY etc. Declaration string ConstraintSQLCommand { get; } Property Value Type Description System.String | Improve this Doc View Source Fields Fields which the constraint will be applied. Declaration List<string> Fields { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > Fields affected from the constraint | Improve this Doc View Source Name Constraint name. Declaration string Name { get; set; } Property Value Type Description System.String Constraint name | Improve this Doc View Source SchemaObject Schema object were this schema constraint exists Declaration ISchemaDataObject SchemaObject { get; } Property Value Type Description ISchemaDataObject The schema object where the constraint exists | Improve this Doc View Source Sort Key's sort direction. Declaration SchemaSort Sort { get; set; } Property Value Type Description SchemaSort Schema sort type Methods | Improve this Doc View Source SQL() Returns the SQL definition of the key. Declaration string SQL() Returns Type Description System.String Constraint's SQL"
  },
  "api/OrpheusInterfaces.Logging.html": {
    "href": "api/OrpheusInterfaces.Logging.html",
    "title": "Namespace OrpheusInterfaces.Logging | Orpheus",
    "keywords": "Namespace OrpheusInterfaces.Logging Interfaces ILogEntry Log entry model. ILoggingConfiguration Logging configuration model. IOrpheusLogger Orpheus logger interface."
  },
  "api/OrpheusInterfaces.Logging.IOrpheusLogger.html": {
    "href": "api/OrpheusInterfaces.Logging.IOrpheusLogger.html",
    "title": "Interface IOrpheusLogger | Orpheus",
    "keywords": "Interface IOrpheusLogger Orpheus logger interface. Namespace : OrpheusInterfaces.Logging Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusLogger Properties | Improve this Doc View Source LoggingConfiguration Logging configuration. Declaration ILoggingConfiguration LoggingConfiguration { get; set; } Property Value Type Description ILoggingConfiguration"
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.IPrimaryKey.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.IPrimaryKey.html",
    "title": "Interface IPrimaryKey | Orpheus",
    "keywords": "Interface IPrimaryKey Orpheus primary key attribute Namespace : OrpheusInterfaces.Interfaces.Attributes Assembly : OrpheusInterfaces.dll Syntax public interface IPrimaryKey : IOrpheusBaseAttribute Properties | Improve this Doc View Source IsAutoGenerated Indicates if the primary key value will be auto-generated in memory. Only System.Guid type is supported. Declaration bool IsAutoGenerated { get; } Property Value Type Description System.Boolean True if the key value is auto-generated. | Improve this Doc View Source IsDBGenerated Indicates if the primary key value is auto-generated. Declaration bool IsDBGenerated { get; } Property Value Type Description System.Boolean True if the key is generated from the DB engine"
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.IOrpheusBaseCompositeKeyAttribute.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.IOrpheusBaseCompositeKeyAttribute.html",
    "title": "Interface IOrpheusBaseCompositeKeyAttribute | Orpheus",
    "keywords": "Interface IOrpheusBaseCompositeKeyAttribute Orpheus composite key attribute Namespace : OrpheusInterfaces.Interfaces.Attributes Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusBaseCompositeKeyAttribute : IOrpheusBaseAttribute Properties | Improve this Doc View Source Fields List of fields that are the key. Declaration string[] Fields { get; } Property Value Type Description System.String [] Array of field names | Improve this Doc View Source Sort Sort for the key. Declaration string Sort { get; } Property Value Type Description System.String Sort direction"
  },
  "api/OrpheusInterfaces.Core.html": {
    "href": "api/OrpheusInterfaces.Core.html",
    "title": "Namespace OrpheusInterfaces.Core | Orpheus",
    "keywords": "Namespace OrpheusInterfaces.Core Interfaces IModifyRecordEventArguments<T> Orpheus record modify event. Occurs when data are processed in memory. IMySQLServerDDLHelper MySQL Server specific DDL helper definition. IOrpheusDatabase Orpheus database access component. IOrpheusDDLHelper Abstract definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. IOrpheusModelHelper Orpheus model helper IOrpheusModule OrpheusModule represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. IOrpheusModuleDefinition The definition/database properties of a module. IOrpheusReferenceTable Orpheus reference table. IOrpheusReferenceTable<T> Orpheus reference table. IOrpheusTable Orpheus table is the core Orpheus data object. It is responsible for performing data operations. IOrpheusTable<T> Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. IOrpheusTableKeyField Represents an Orpheus table key field. IOrpheusTableOptions Represents IOrpheusTable options, which can be used to instantiate a table. ISaveEventArguments Orpheus save event arguments. Occurs when data are actually being save to the database. ISQLServerDDLHelper SQL Server specific DDL helper definition. Enums DatabaseEngineType Database engine type. ExtendedDbTypes Extended DbTypes enumeration, for types that are not listed in the generic DbType enumeration. LogicalOperator Logical operator"
  },
  "api/OrpheusInterfaces.Core.LogicalOperator.html": {
    "href": "api/OrpheusInterfaces.Core.LogicalOperator.html",
    "title": "Enum LogicalOperator | Orpheus",
    "keywords": "Enum LogicalOperator Logical operator Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public enum LogicalOperator Fields Name Description loAND The AND operator displays a record if all the conditions separated by AND is TRUE. loNOT The NOT operator displays a record if the condition(s) is NOT TRUE. loOR The OR operator displays a record if any of the conditions separated by OR is TRUE."
  },
  "api/OrpheusInterfaces.Core.IOrpheusReferenceTable.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusReferenceTable.html",
    "title": "Interface IOrpheusReferenceTable | Orpheus",
    "keywords": "Interface IOrpheusReferenceTable Orpheus reference table. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusReferenceTable : IOrpheusTable"
  },
  "api/OrpheusInterfaces.Core.IOrpheusReferenceTable-1.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusReferenceTable-1.html",
    "title": "Interface IOrpheusReferenceTable<T> | Orpheus",
    "keywords": "Interface IOrpheusReferenceTable<T> Orpheus reference table. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusReferenceTable<T> : IOrpheusReferenceTable, IOrpheusTable Type Parameters Name Description T Model type"
  },
  "api/OrpheusInterfaces.Core.DatabaseEngineType.html": {
    "href": "api/OrpheusInterfaces.Core.DatabaseEngineType.html",
    "title": "Enum DatabaseEngineType | Orpheus",
    "keywords": "Enum DatabaseEngineType Database engine type. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public enum DatabaseEngineType Fields Name Description dbMySQL MySQL. dbSQLite SQLite dbSQLServer SQL Server. dbUnknown Unknown - unsupported."
  },
  "api/OrpheusInterfaces.Configuration.html": {
    "href": "api/OrpheusInterfaces.Configuration.html",
    "title": "Namespace OrpheusInterfaces.Configuration | Orpheus",
    "keywords": "Namespace OrpheusInterfaces.Configuration Interfaces IDatabaseConnectionConfiguration Database connection configuration."
  },
  "api/OrpheusInterfaces.Configuration.IDatabaseConnectionConfiguration.html": {
    "href": "api/OrpheusInterfaces.Configuration.IDatabaseConnectionConfiguration.html",
    "title": "Interface IDatabaseConnectionConfiguration | Orpheus",
    "keywords": "Interface IDatabaseConnectionConfiguration Database connection configuration. Namespace : OrpheusInterfaces.Configuration Assembly : OrpheusInterfaces.dll Syntax public interface IDatabaseConnectionConfiguration Properties | Improve this Doc View Source ConfigurationName Database configuration name. Declaration string ConfigurationName { get; set; } Property Value Type Description System.String | Improve this Doc View Source DatabaseName The database name. Declaration string DatabaseName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Password Password. Declaration string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Server Server name or IP address. Declaration string Server { get; set; } Property Value Type Description System.String | Improve this Doc View Source UseIntegratedSecurity SQL Server specific. Declaration bool UseIntegratedSecurity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UseIntegratedSecurityForServiceConnection Implicitly Orpheus makes a second connection to the database, to perform mainly schema related/DDL functionality. This boolean sets this second connection, integrated security setting. Declaration bool UseIntegratedSecurityForServiceConnection { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UserName User name. Declaration string UserName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Clone() Creates a clone of this database configuration. Declaration IDatabaseConnectionConfiguration Clone() Returns Type Description IDatabaseConnectionConfiguration"
  },
  "api/OrpheusInterfaces.Schema.ISchemaField.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaField.html",
    "title": "Interface ISchemaField | Orpheus",
    "keywords": "Interface ISchemaField Represents a schema field. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaField Properties | Improve this Doc View Source Alias Field alias. Declaration string Alias { get; set; } Property Value Type Description System.String Field alias | Improve this Doc View Source DataType Field data type. Declaration string DataType { get; set; } Property Value Type Description System.String Field data type | Improve this Doc View Source DefaultValue Field's default value. Declaration string DefaultValue { get; set; } Property Value Type Description System.String Field's default value | Improve this Doc View Source FullFieldName Gets the full field name. Declaration string FullFieldName { get; } Property Value Type Description System.String | Improve this Doc View Source Name Field name. Declaration string Name { get; set; } Property Value Type Description System.String Field name | Improve this Doc View Source Nullable True if field accepts null values. Declaration bool Nullable { get; set; } Property Value Type Description System.Boolean True if field accepts null values | Improve this Doc View Source SchemaObject Schema object where this schema field exists Declaration ISchemaObject SchemaObject { get; } Property Value Type Description ISchemaObject Schema object where the field exists | Improve this Doc View Source Size Field size (if applicable). Declaration string Size { get; set; } Property Value Type Description System.String Field size | Improve this Doc View Source TableName Table where the field belongs. Declaration string TableName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source SQL() Returns SQL definition for the field. Declaration string SQL() Returns Type Description System.String SQL definition for the field"
  },
  "api/OrpheusInterfaces.Logging.ILoggingConfiguration.html": {
    "href": "api/OrpheusInterfaces.Logging.ILoggingConfiguration.html",
    "title": "Interface ILoggingConfiguration | Orpheus",
    "keywords": "Interface ILoggingConfiguration Logging configuration model. Namespace : OrpheusInterfaces.Logging Assembly : OrpheusInterfaces.dll Syntax public interface ILoggingConfiguration Properties | Improve this Doc View Source FilePath Log file path. Declaration string FilePath { get; set; } Property Value Type Description System.String | Improve this Doc View Source Level Logging level. Declaration string Level { get; set; } Property Value Type Description System.String | Improve this Doc View Source MaxFileSize Maximum log file size. Declaration int MaxFileSize { get; set; } Property Value Type Description System.Int32"
  },
  "api/OrpheusInterfaces.Logging.ILogEntry.html": {
    "href": "api/OrpheusInterfaces.Logging.ILogEntry.html",
    "title": "Interface ILogEntry | Orpheus",
    "keywords": "Interface ILogEntry Log entry model. Namespace : OrpheusInterfaces.Logging Assembly : OrpheusInterfaces.dll Syntax public interface ILogEntry Properties | Improve this Doc View Source LineNumber Log entry line number. Declaration string LineNumber { get; set; } Property Value Type Description System.String | Improve this Doc View Source Message Log entry message. Declaration string Message { get; set; } Property Value Type Description System.String | Improve this Doc View Source SourceFile Log entry source file information. Declaration string SourceFile { get; set; } Property Value Type Description System.String | Improve this Doc View Source TimeStamp Log entry time-stamp. Declaration DateTime TimeStamp { get; set; } Property Value Type Description System.DateTime | Improve this Doc View Source Type Log entry type. Error, Information, Debug etc. Declaration string Type { get; set; } Property Value Type Description System.String"
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.IOrpheusBaseAttribute.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.IOrpheusBaseAttribute.html",
    "title": "Interface IOrpheusBaseAttribute | Orpheus",
    "keywords": "Interface IOrpheusBaseAttribute Orpheus base attribute. Namespace : OrpheusInterfaces.Interfaces.Attributes Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusBaseAttribute"
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.IForeignKey.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.IForeignKey.html",
    "title": "Interface IForeignKey | Orpheus",
    "keywords": "Interface IForeignKey Orpheus foreign key attribute Namespace : OrpheusInterfaces.Interfaces.Attributes Assembly : OrpheusInterfaces.dll Syntax public interface IForeignKey : IOrpheusBaseAttribute Properties | Improve this Doc View Source Field The foreign key field name. Declaration string Field { get; set; } Property Value Type Description System.String | Improve this Doc View Source OnDeleteCascade Set to true to enable cascade delete. Declaration bool OnDeleteCascade { get; } Property Value Type Description System.Boolean Delete cascade flag | Improve this Doc View Source OnUpdateCascade Set to true to enable cascade update. Declaration bool OnUpdateCascade { get; } Property Value Type Description System.Boolean Update cascade flag | Improve this Doc View Source ReferenceField The reference table key. Declaration string ReferenceField { get; } Property Value Type Description System.String The referenced table key | Improve this Doc View Source ReferenceTable The reference table. Declaration string ReferenceTable { get; } Property Value Type Description System.String The referenced table name | Improve this Doc View Source SchemaName Optional. Set the schema name of the reference table, if there is one. Declaration string SchemaName { get; } Property Value Type Description System.String"
  },
  "api/OrpheusInterfaces.Core.IMySQLServerDDLHelper.html": {
    "href": "api/OrpheusInterfaces.Core.IMySQLServerDDLHelper.html",
    "title": "Interface IMySQLServerDDLHelper | Orpheus",
    "keywords": "Interface IMySQLServerDDLHelper MySQL Server specific DDL helper definition. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IMySQLServerDDLHelper : IOrpheusDDLHelper"
  },
  "api/OrpheusCore.ServiceProvider.html": {
    "href": "api/OrpheusCore.ServiceProvider.html",
    "title": "Namespace OrpheusCore.ServiceProvider | Orpheus",
    "keywords": "Namespace OrpheusCore.ServiceProvider Classes OrpheusServiceProvider Orpheus DI service provider."
  },
  "api/OrpheusCore.ServiceProvider.OrpheusServiceProvider.html": {
    "href": "api/OrpheusCore.ServiceProvider.OrpheusServiceProvider.html",
    "title": "Class OrpheusServiceProvider | Orpheus",
    "keywords": "Class OrpheusServiceProvider Orpheus DI service provider. Inheritance System.Object OrpheusServiceProvider Namespace : OrpheusCore.ServiceProvider Assembly : OrpheusCore.dll Syntax public class OrpheusServiceProvider Properties | Improve this Doc View Source Provider Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects. Declaration public static IServiceProvider Provider { get; } Property Value Type Description System.IServiceProvider Methods | Improve this Doc View Source InitializeServiceCollection(IServiceCollection) Initialize the service collection. Declaration public static void InitializeServiceCollection(IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection | Improve this Doc View Source InitializeServiceProvider(IServiceCollection) Initializes services DI. Declaration public static void InitializeServiceProvider(IServiceCollection services = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services | Improve this Doc View Source Resolve<T>() Resolve an interface to a concrete implementation. Declaration public static T Resolve<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Resolve<T>(Object[]) Resolve an interface to a concrete implementation, with constructor parameter support. Declaration public static T Resolve<T>(object[] constructorParameters) Parameters Type Name Description System.Object [] constructorParameters Returns Type Description T Type Parameters Name Description T"
  },
  "api/OrpheusCore.Configuration.DatabaseConnectionConfiguration.html": {
    "href": "api/OrpheusCore.Configuration.DatabaseConnectionConfiguration.html",
    "title": "Class DatabaseConnectionConfiguration | Orpheus",
    "keywords": "Class DatabaseConnectionConfiguration Orpheus database configuration. Inheritance System.Object DatabaseConnectionConfiguration Namespace : OrpheusCore.Configuration Assembly : OrpheusCore.dll Syntax public class DatabaseConnectionConfiguration : IDatabaseConnectionConfiguration Properties | Improve this Doc View Source ConfigurationName Database configuration name. Declaration public string ConfigurationName { get; set; } Property Value Type Description System.String | Improve this Doc View Source DatabaseName The database name. Declaration public string DatabaseName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Password Password. Declaration public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Server Server name or IP address. Declaration public string Server { get; set; } Property Value Type Description System.String | Improve this Doc View Source UseIntegratedSecurity SQL Server specific. Declaration public bool UseIntegratedSecurity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UseIntegratedSecurityForServiceConnection Implicitly Orpheus makes a second connection to the database, to perform mainly schema related/DDL functionality. This boolean sets this second connection, integrated security setting. Declaration public bool UseIntegratedSecurityForServiceConnection { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UserName User name. Declaration public string UserName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Clone() Creates a clone of this database configuration. Declaration public IDatabaseConnectionConfiguration Clone() Returns Type Description IDatabaseConnectionConfiguration Implements IDatabaseConnectionConfiguration"
  },
  "api/OrpheusAttributes.UniqueKey.html": {
    "href": "api/OrpheusAttributes.UniqueKey.html",
    "title": "Class UniqueKey | Orpheus",
    "keywords": "Class UniqueKey Unique key constraint attribute. Decorate a property with attribute to create a unique key constraint on a schema object. Inheritance System.Object System.Attribute OrpheusBaseAttribute UniqueKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class UniqueKey : OrpheusBaseAttribute, IUniqueKey, IOrpheusBaseAttribute Implements IUniqueKey IOrpheusBaseAttribute"
  },
  "api/OrpheusInterfaces.Schema.ISchemaViewTable.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaViewTable.html",
    "title": "Interface ISchemaViewTable | Orpheus",
    "keywords": "Interface ISchemaViewTable A data table that is used in a View. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaViewTable : ISchemaTable, ISchemaDataObject, ISchemaObject Properties | Improve this Doc View Source SchemaName Override for a table's schema name. Declaration string SchemaName { get; set; } Property Value Type Description System.String"
  },
  "api/OrpheusInterfaces.Schema.ISchemaView.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaView.html",
    "title": "Interface ISchemaView | Orpheus",
    "keywords": "Interface ISchemaView Create view schema object. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaView : ISchemaDataObject, ISchemaObject Properties | Improve this Doc View Source JoinSchemaObjects Join schema objects. Applicable mostly when schema object is a table or a view. Declaration List<ISchemaTable> JoinSchemaObjects { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaTable > Schema objects in the schema view | Improve this Doc View Source TableName Applicable only when DDLCommand = ddcCreateView. Declaration string TableName { get; set; } Property Value Type Description System.String Table name | Improve this Doc View Source WithSchemaBinding SQL server specific option, to create views with schema binding, in order to be able to create indexes on the view itself. Declaration bool WithSchemaBinding { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source FormattedTableName() Returns the main table name, SQL formatted, with a schema name, if the underlying db engine supports it, and with the table alias, if defined. Declaration string FormattedTableName() Returns Type Description System.String"
  },
  "api/OrpheusInterfaces.Schema.ISchema.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchema.html",
    "title": "Interface ISchema | Orpheus",
    "keywords": "Interface ISchema Represents an Orpheus Schema. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface ISchema Properties | Improve this Doc View Source DB Orpheus database. Declaration IOrpheusDatabase DB { get; } Property Value Type Description IOrpheusDatabase Instance of the Orpheus Database | Improve this Doc View Source Description Schema description. Declaration string Description { get; } Property Value Type Description System.String Schema description | Improve this Doc View Source Id Schema Id. Declaration Guid Id { get; } Property Value Type Description System.Guid Schema unique id | Improve this Doc View Source Name DB SQL schema name. Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source ReferencedSchemas List of other schemas. Declaration List<ISchema> ReferencedSchemas { get; } Property Value Type Description System.Collections.Generic.List < ISchema > | Improve this Doc View Source SchemaInfoTable Orpheus schema info table. Declaration string SchemaInfoTable { get; } Property Value Type Description System.String Table name for the Orpheus schema information table | Improve this Doc View Source SchemaModulesTable Orpheus module definition table. Declaration string SchemaModulesTable { get; } Property Value Type Description System.String Table name for the Orpheus schema modules table | Improve this Doc View Source SchemaObjects List of schema objects. ISchemaObject Declaration List<ISchemaObject> SchemaObjects { get; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > | Improve this Doc View Source SchemaObjectsTable Orpheus schema objects table. Declaration string SchemaObjectsTable { get; } Property Value Type Description System.String Table name for the Orpheus schema objects table | Improve this Doc View Source Version Schema version. Declaration double Version { get; } Property Value Type Description System.Double Schema version Methods | Improve this Doc View Source AddSchemaObject(ISchemaObject) Adds a schema object to the list. Declaration ISchemaObject AddSchemaObject(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Returns Type Description ISchemaObject The schema object that was added | Improve this Doc View Source AddSchemaTable(Object, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable(object model, List<ISchemaObject> dependencies = null) Parameters Type Name Description System.Object model Model will be used to auto-generate fields, primary keys etc, for the schema object System.Collections.Generic.List < ISchemaObject > dependencies List of schema objects, that this objects depends upon Returns Type Description ISchemaTable | Improve this Doc View Source AddSchemaTable(String, List<ISchemaObject>, Object) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable(string tableName, List<ISchemaObject> dependencies = null, object model = null) Parameters Type Name Description System.String tableName Table name System.Collections.Generic.List < ISchemaObject > dependencies List of schema objects, that this objects depends upon System.Object model Model will be used to auto-generate fields, primary keys etc, for the schema object Returns Type Description ISchemaTable | Improve this Doc View Source AddSchemaTable(Type, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable(Type modelType, List<ISchemaObject> dependencies = null) Parameters Type Name Description System.Type modelType Model type will be used to auto-generate fields, primary keys etc, for the schema object System.Collections.Generic.List < ISchemaObject > dependencies List of schema objects, that this objects depends upon Returns Type Description ISchemaTable | Improve this Doc View Source AddSchemaTable<T>(List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable<T>(List<ISchemaObject> dependencies = null) where T : class Parameters Type Name Description System.Collections.Generic.List < ISchemaObject > dependencies Returns Type Description ISchemaTable Type Parameters Name Description T | Improve this Doc View Source AddSchemaTable<T, D>() Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration ISchemaTable AddSchemaTable<T, D>() Returns Type Description ISchemaTable Type Parameters Name Description T Model type D Dependency model type | Improve this Doc View Source CreateSchemaJoinDefinition() Creates a join schema definition. Declaration ISchemaJoinDefinition CreateSchemaJoinDefinition() Returns Type Description ISchemaJoinDefinition | Improve this Doc View Source CreateSchemaObject() Creates a schema object. Declaration ISchemaObject CreateSchemaObject() Returns Type Description ISchemaObject | Improve this Doc View Source CreateSchemaTable() Creates a table schema object. Declaration ISchemaTable CreateSchemaTable() Returns Type Description ISchemaTable | Improve this Doc View Source CreateSchemaView() Creates a view schema object. Declaration ISchemaView CreateSchemaView() Returns Type Description ISchemaView | Improve this Doc View Source CreateSchemaViewTable() Creates a view table schema object. Declaration ISchemaViewTable CreateSchemaViewTable() Returns Type Description ISchemaViewTable | Improve this Doc View Source Drop() Drops schema. Removes all schema objects from the database. Declaration void Drop() | Improve this Doc View Source Execute() Iterate through the schema objects and executes them. Declaration void Execute() | Improve this Doc View Source LoadFromFile(String) Loads schema from an xml file. Declaration void LoadFromFile(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source RegisterSchema() Registers schema information, in the schema information table. Declaration void RegisterSchema() | Improve this Doc View Source RemoveSchemaObject(ISchemaObject) Removes from the schema list Declaration void RemoveSchemaObject(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Schema object to remove | Improve this Doc View Source SaveToFile(String) Saves schema to an xml file. Declaration void SaveToFile(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source SchemaObjectExists(ISchemaObject) Returns the guid of the schema object it is created. Declaration Guid SchemaObjectExists(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Schema object to be checked if it exists Returns Type Description System.Guid The schema object unique id"
  },
  "api/OrpheusInterfaces.Schema.IPrimaryKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.Schema.IPrimaryKeySchemaConstraint.html",
    "title": "Interface IPrimaryKeySchemaConstraint | Orpheus",
    "keywords": "Interface IPrimaryKeySchemaConstraint A primary key constraint. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface IPrimaryKeySchemaConstraint : ISchemaConstraint"
  },
  "api/OrpheusSQLDDLHelper.html": {
    "href": "api/OrpheusSQLDDLHelper.html",
    "title": "Namespace OrpheusSQLDDLHelper | Orpheus",
    "keywords": "Namespace OrpheusSQLDDLHelper Classes OrpheusSQLServerDDLHelper SQL Server definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands."
  },
  "api/OrpheusSQLDDLHelper.OrpheusSQLServerDDLHelper.html": {
    "href": "api/OrpheusSQLDDLHelper.OrpheusSQLServerDDLHelper.html",
    "title": "Class OrpheusSQLServerDDLHelper | Orpheus",
    "keywords": "Class OrpheusSQLServerDDLHelper SQL Server definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. Inheritance System.Object OrpheusSQLServerDDLHelper Namespace : OrpheusSQLDDLHelper Assembly : OrpheusSQLServerDDLHelper.dll Syntax public class OrpheusSQLServerDDLHelper : ISQLServerDDLHelper, IOrpheusDDLHelper Constructors | Improve this Doc View Source OrpheusSQLServerDDLHelper() Declaration public OrpheusSQLServerDDLHelper() Properties | Improve this Doc View Source ConnectionString Builds the connection string. Declaration public string ConnectionString { get; } Property Value Type Description System.String | Improve this Doc View Source DatabaseName Gets the database name. Declaration public string DatabaseName { get; } Property Value Type Description System.String | Improve this Doc View Source DB Database for the DDL helper. Declaration public IOrpheusDatabase DB { get; set; } Property Value Type Description IOrpheusDatabase Database the helper is associated with | Improve this Doc View Source DbEngineType Returns the underlying database engine type. Declaration public DatabaseEngineType DbEngineType { get; } Property Value Type Description DatabaseEngineType | Improve this Doc View Source DelimitedIndetifierEnd Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. Declaration public char DelimitedIndetifierEnd { get; } Property Value Type Description System.Char Char | Improve this Doc View Source DelimitedIndetifierStart Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. Declaration public char DelimitedIndetifierStart { get; } Property Value Type Description System.Char Char | Improve this Doc View Source ModifyColumnCommand Returns the DB specific modify table command. Declaration public string ModifyColumnCommand { get; } Property Value Type Description System.String | Improve this Doc View Source SchemaSeparator Schema separator. Char that separates the schema name and the schema object. By default in SQL server, the separator is the dot char. Declaration public string SchemaSeparator { get; } Property Value Type Description System.String | Improve this Doc View Source SupportsGuidType Returns true if the DBEngine supports natively the Guid type. Declaration public bool SupportsGuidType { get; } Property Value Type Description System.Boolean True if the DBEngine supports natively the Guid type | Improve this Doc View Source SupportsSchemaNameSpace Returns true if the DBEngine supports having schema name spaces. From the currently supported databases, only SQL has this feature. Declaration public bool SupportsSchemaNameSpace { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source AddDatabaseRoleMember(String, String) Adds a database user to the specified role. Declaration public void AddDatabaseRoleMember(string roleName, string userName) Parameters Type Name Description System.String roleName System.String userName | Improve this Doc View Source ChangeDatabaseUserPassword(String, String, String) Changes the password for an existing user. Declaration public void ChangeDatabaseUserPassword(string userName, string oldPassword, string newPassword) Parameters Type Name Description System.String userName System.String oldPassword System.String newPassword | Improve this Doc View Source CreateDatabase() Returns true if a database is successfully created using the underlying db engine settings. Declaration public bool CreateDatabase() Returns Type Description System.Boolean True if database was created successfully | Improve this Doc View Source CreateDatabase(String) Returns true if a database is successfully created using the underlying db engine settings. Declaration public bool CreateDatabase(string dbName) Parameters Type Name Description System.String dbName Database name Returns Type Description System.Boolean True if the database was created successfully | Improve this Doc View Source CreateDatabaseRole(String, String) Creates a database role. Declaration public void CreateDatabaseRole(string roleName, string owner = null) Parameters Type Name Description System.String roleName System.String owner | Improve this Doc View Source CreateDatabaseUser(String, String) Creates a contained database user. Declaration public void CreateDatabaseUser(string userName, string password) Parameters Type Name Description System.String userName System.String password | Improve this Doc View Source CreateDatabaseWithDDL(String) Returns true if a database is successfully created using the passed DDL script. Declaration public bool CreateDatabaseWithDDL(string ddlString) Parameters Type Name Description System.String ddlString DDL command Returns Type Description System.Boolean True if the database was created successfully | Improve this Doc View Source CreateSchema(String) Creates a schema. Declaration public void CreateSchema(string schemaName) Parameters Type Name Description System.String schemaName | Improve this Doc View Source DatabaseExists(String) Returns true the database exists. Declaration public bool DatabaseExists(string dbName) Parameters Type Name Description System.String dbName Database name Returns Type Description System.Boolean True if the database exists | Improve this Doc View Source DatabaseRoleExists(String) Returns true if the database role exists. Declaration public bool DatabaseRoleExists(string roleName) Parameters Type Name Description System.String roleName Returns Type Description System.Boolean | Improve this Doc View Source DatabaseUserExists(String) Returns true if a database user exists. Declaration public bool DatabaseUserExists(string userName) Parameters Type Name Description System.String userName Returns Type Description System.Boolean | Improve this Doc View Source DbTypeToString(DbType) Returns the db engine specific string equivalent, for a DbType enumeration. Declaration public string DbTypeToString(DbType dataType) Parameters Type Name Description System.Data.DbType dataType DbType Returns Type Description System.String String value for the DbType | Improve this Doc View Source Deny(List<String>, String) Deny permissions to a database principal. Declaration public void Deny(List<string> permissions, string databasePrincipal) Parameters Type Name Description System.Collections.Generic.List < System.String > permissions System.String databasePrincipal | Improve this Doc View Source Deny(String, String) Deny permission to a database principal. Declaration public void Deny(string permission, string databasePrincipal) Parameters Type Name Description System.String permission System.String databasePrincipal | Improve this Doc View Source Deny(String, String, String) Denies permission to a database principal for a specific schema object. Declaration public void Deny(string permission, string schemaObject, string databasePrincipal) Parameters Type Name Description System.String permission System.String schemaObject System.String databasePrincipal | Improve this Doc View Source DropDatabaseRole(String) Drops a database role. Declaration public void DropDatabaseRole(string roleName) Parameters Type Name Description System.String roleName | Improve this Doc View Source DropDatabaseRoleMember(String, String) Drops a database user to the specified role. Declaration public void DropDatabaseRoleMember(string roleName, string userName) Parameters Type Name Description System.String roleName System.String userName | Improve this Doc View Source DropDatabaseUser(String) Drops a user. Declaration public void DropDatabaseUser(string userName) Parameters Type Name Description System.String userName | Improve this Doc View Source DropSchema(String) Drops a schema. Declaration public void DropSchema(string schemaName) Parameters Type Name Description System.String schemaName | Improve this Doc View Source EnableContainedDatabases(Boolean) Enables/disables the contained database feature on the SQL server instance. A feature supported from SQL server 2012 and later. Declaration public void EnableContainedDatabases(bool enable) Parameters Type Name Description System.Boolean enable | Improve this Doc View Source Grant(List<String>, String) Grants permission to a database principal. Declaration public void Grant(List<string> permissions, string databasePrincipal) Parameters Type Name Description System.Collections.Generic.List < System.String > permissions System.String databasePrincipal | Improve this Doc View Source Grant(String, String) Grants permission to a database principal. Declaration public void Grant(string permission, string databasePrincipal) Parameters Type Name Description System.String permission System.String databasePrincipal | Improve this Doc View Source Grant(String, String, String) Grants permission to a database principal for a specific schema object. Declaration public void Grant(string permission, string schemaObject, string databasePrincipal) Parameters Type Name Description System.String permission System.String schemaObject System.String databasePrincipal | Improve this Doc View Source Revoke(List<String>, String, String) Revokes permissions for a database principal. Declaration public void Revoke(List<string> permissions, string schemaObject, string databasePrincipal) Parameters Type Name Description System.Collections.Generic.List < System.String > permissions System.String schemaObject System.String databasePrincipal | Improve this Doc View Source Revoke(String, String, String) Revokes permission for a database principal. Declaration public void Revoke(string permission, string schemaObject, string databasePrincipal) Parameters Type Name Description System.String permission System.String schemaObject System.String databasePrincipal | Improve this Doc View Source SafeFormatAlterTableAddColumn(String, List<String>) Properly formats an ALTER TABLE ADD COLUMN command for the underlying database engine. Declaration public string SafeFormatAlterTableAddColumn(string tableName, List<string> columnsToAdd) Parameters Type Name Description System.String tableName Table's name that schema is going to change System.Collections.Generic.List < System.String > columnsToAdd Columns for creation Returns Type Description System.String | Improve this Doc View Source SafeFormatAlterTableDropColumn(String, List<String>) Properly formats an ALTER TABLE DROP COLUMN command for the underlying database engine. Declaration public string SafeFormatAlterTableDropColumn(string tableName, List<string> columnsToDelete) Parameters Type Name Description System.String tableName Table's name that schema is going to change System.Collections.Generic.List < System.String > columnsToDelete Columns for deletion Returns Type Description System.String | Improve this Doc View Source SafeFormatField(String) Properly formats a field name, to be used in a SQL statement, in case the field name is a reserved word. Declaration public string SafeFormatField(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description System.String | Improve this Doc View Source SchemaExists(String) Returns true if the schema exists. Declaration public bool SchemaExists(string schemaName) Parameters Type Name Description System.String schemaName Returns Type Description System.Boolean | Improve this Doc View Source SchemaObjectExists(ISchemaConstraint) Returns true if the schema object exists in the database. Declaration public bool SchemaObjectExists(ISchemaConstraint schemaConstraint) Parameters Type Name Description ISchemaConstraint schemaConstraint Returns Type Description System.Boolean | Improve this Doc View Source SchemaObjectExists(ISchemaObject) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. Declaration public bool SchemaObjectExists(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Schema object Returns Type Description System.Boolean True if the object exists | Improve this Doc View Source SchemaObjectExists(String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. Declaration public bool SchemaObjectExists(string schemaObjectName) Parameters Type Name Description System.String schemaObjectName Returns Type Description System.Boolean | Improve this Doc View Source SchemaObjectExists(String, String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. Declaration public bool SchemaObjectExists(string schemaObjectName, string schemaName = null) Parameters Type Name Description System.String schemaObjectName System.String schemaName Returns Type Description System.Boolean | Improve this Doc View Source SetDatabaseContainment(String, String) Sets the containment option for a database. Declaration public void SetDatabaseContainment(string containment, string databaseName = null) Parameters Type Name Description System.String containment Containment value. NONE or PARTIAL System.String databaseName | Improve this Doc View Source TypeToString(Type) Returns the db engine specific string equivalent, for a .net type Declaration public string TypeToString(Type type) Parameters Type Name Description System.Type type Type Returns Type Description System.String String value for the mapped DbType Implements ISQLServerDDLHelper IOrpheusDDLHelper"
  },
  "api/OrpheusMySQLDDLHelper.html": {
    "href": "api/OrpheusMySQLDDLHelper.html",
    "title": "Namespace OrpheusMySQLDDLHelper | Orpheus",
    "keywords": "Namespace OrpheusMySQLDDLHelper Classes OrpheusMySQLServerDDLHelper MySQL Server definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands."
  },
  "api/OrpheusMySQLDDLHelper.OrpheusMySQLServerDDLHelper.html": {
    "href": "api/OrpheusMySQLDDLHelper.OrpheusMySQLServerDDLHelper.html",
    "title": "Class OrpheusMySQLServerDDLHelper | Orpheus",
    "keywords": "Class OrpheusMySQLServerDDLHelper MySQL Server definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. Inheritance System.Object OrpheusMySQLServerDDLHelper Namespace : OrpheusMySQLDDLHelper Assembly : OrpheusMySQLDDLHelper.dll Syntax public class OrpheusMySQLServerDDLHelper : IMySQLServerDDLHelper, IOrpheusDDLHelper Constructors | Improve this Doc View Source OrpheusMySQLServerDDLHelper() MySQL Server DDL helper constructor. Declaration public OrpheusMySQLServerDDLHelper() Properties | Improve this Doc View Source ConnectionString Builds the connection string. Declaration public string ConnectionString { get; } Property Value Type Description System.String | Improve this Doc View Source DatabaseName Gets the database name. Declaration public string DatabaseName { get; } Property Value Type Description System.String | Improve this Doc View Source DB Database for the DDL helper. Declaration public IOrpheusDatabase DB { get; set; } Property Value Type Description IOrpheusDatabase Database the helper is associated with | Improve this Doc View Source DbEngineType Returns the underlying database engine type. Declaration public DatabaseEngineType DbEngineType { get; } Property Value Type Description DatabaseEngineType | Improve this Doc View Source DelimitedIndetifierEnd Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. Declaration public char DelimitedIndetifierEnd { get; } Property Value Type Description System.Char Char | Improve this Doc View Source DelimitedIndetifierStart Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. Declaration public char DelimitedIndetifierStart { get; } Property Value Type Description System.Char Char | Improve this Doc View Source ModifyColumnCommand Returns the DB specific modify table command. Declaration public string ModifyColumnCommand { get; } Property Value Type Description System.String | Improve this Doc View Source SupportsGuidType Returns true if the DBEngine supports natively the Guid type. Declaration public bool SupportsGuidType { get; } Property Value Type Description System.Boolean True if the DBEngine supports natively the Guid type | Improve this Doc View Source SupportsSchemaNameSpace Returns true if the DBEngine supports having schema name spaces. From the currently supported databases, only SQL has this feature. Declaration public bool SupportsSchemaNameSpace { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CreateDatabase() Returns true if a database is successfully created using the underlying db engine settings. Declaration public bool CreateDatabase() Returns Type Description System.Boolean True if database was created successfully | Improve this Doc View Source CreateDatabase(String) Returns true if a database is successfully created using the underlying db engine settings. Declaration public bool CreateDatabase(string dbName) Parameters Type Name Description System.String dbName Database name Returns Type Description System.Boolean True if the database was created successfully | Improve this Doc View Source CreateDatabaseWithDDL(String) Returns true if a database is successfully created using the passed DDL script. Declaration public bool CreateDatabaseWithDDL(string ddlString) Parameters Type Name Description System.String ddlString DDL command Returns Type Description System.Boolean True if the database was created successfully | Improve this Doc View Source DatabaseExists(String) Returns true the database exists. Declaration public bool DatabaseExists(string dbName) Parameters Type Name Description System.String dbName Database name Returns Type Description System.Boolean True if the database exists | Improve this Doc View Source DbTypeToString(DbType) Returns the db engine specific string equivalent, for a DbType enumeration. Declaration public string DbTypeToString(DbType dataType) Parameters Type Name Description System.Data.DbType dataType DbType Returns Type Description System.String String value for the DbType | Improve this Doc View Source SafeFormatAlterTableAddColumn(String, List<String>) Properly formats an ALTER TABLE ADD COLUMN command for the underlying database engine. Declaration public string SafeFormatAlterTableAddColumn(string tableName, List<string> columnsToAdd) Parameters Type Name Description System.String tableName Table's name that schema is going to change System.Collections.Generic.List < System.String > columnsToAdd Columns for creation Returns Type Description System.String | Improve this Doc View Source SafeFormatAlterTableDropColumn(String, List<String>) Properly formats an ALTER TABLE DROP COLUMN command for the underlying database engine. Declaration public string SafeFormatAlterTableDropColumn(string tableName, List<string> columnsToDelete) Parameters Type Name Description System.String tableName Table's name that schema is going to change System.Collections.Generic.List < System.String > columnsToDelete Columns for deletion Returns Type Description System.String | Improve this Doc View Source SafeFormatField(String) Properly formats a field name, to be used in a SQL statement, in case the field name is a reserved word. Declaration public string SafeFormatField(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description System.String | Improve this Doc View Source SchemaObjectExists(ISchemaConstraint) Returns true if the schema object exists in the database. Declaration public bool SchemaObjectExists(ISchemaConstraint schemaConstraint) Parameters Type Name Description ISchemaConstraint schemaConstraint Returns Type Description System.Boolean | Improve this Doc View Source SchemaObjectExists(ISchemaObject) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. Declaration public bool SchemaObjectExists(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Returns Type Description System.Boolean | Improve this Doc View Source SchemaObjectExists(String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. Declaration public bool SchemaObjectExists(string schemaObjectName) Parameters Type Name Description System.String schemaObjectName Schema object name Returns Type Description System.Boolean True if the object exists | Improve this Doc View Source TypeToString(Type) Returns the db engine specific string equivalent, for a .net type Declaration public string TypeToString(Type type) Parameters Type Name Description System.Type type Type Returns Type Description System.String String value for the mapped DbType Implements IMySQLServerDDLHelper IOrpheusDDLHelper"
  },
  "api/OrpheusInterfaces.Core.IOrpheusModuleDefinition.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusModuleDefinition.html",
    "title": "Interface IOrpheusModuleDefinition | Orpheus",
    "keywords": "Interface IOrpheusModuleDefinition The definition/database properties of a module. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusModuleDefinition Properties | Improve this Doc View Source Database Orpheus database. Declaration IOrpheusDatabase Database { get; set; } Property Value Type Description IOrpheusDatabase Orpheus Database | Improve this Doc View Source DetailTableOptions List of module's detail table options. Declaration List<IOrpheusTableOptions> DetailTableOptions { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableOptions > Module's detail table options | Improve this Doc View Source MainTableOptions Module's main table options. Declaration IOrpheusTableOptions MainTableOptions { get; set; } Property Value Type Description IOrpheusTableOptions Module's main table options | Improve this Doc View Source Name Module name. Declaration string Name { get; set; } Property Value Type Description System.String Module name | Improve this Doc View Source ReferenceTableOptions List of module reference tables. Declaration List<IOrpheusTableOptions> ReferenceTableOptions { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableOptions > Module's reference table options Methods | Improve this Doc View Source CreateTableOptions() Creates an instance of OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions() Returns Type Description IOrpheusTableOptions An IOrpheusTableOptions instance | Improve this Doc View Source CreateTableOptions(String, Type) Creates an instance of OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions(string tableName, Type modelType) Parameters Type Name Description System.String tableName System.Type modelType Returns Type Description IOrpheusTableOptions An IOrpheusTableOptions instance | Improve this Doc View Source CreateTableOptions(Type) Creates an instance of OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions(Type modelType) Parameters Type Name Description System.Type modelType Returns Type Description IOrpheusTableOptions An IOrpheusTableOptions instance | Improve this Doc View Source LoadFrom(Stream) Load definition from stream. Declaration void LoadFrom(Stream stream) Parameters Type Name Description System.IO.Stream stream | Improve this Doc View Source LoadFrom(String) Loads definition from a file. Declaration void LoadFrom(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source LoadFromDB(String) Loads definition from the connected database. Declaration void LoadFromDB(string moduleName) Parameters Type Name Description System.String moduleName | Improve this Doc View Source SaveTo(Stream) Saves definition to a stream. Declaration void SaveTo(Stream stream) Parameters Type Name Description System.IO.Stream stream | Improve this Doc View Source SaveTo(String) Saves definition to a file. Declaration void SaveTo(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source SaveToDB() Saves the definition the connected database. Declaration void SaveToDB()"
  },
  "api/OrpheusInterfaces.Core.IOrpheusModule.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusModule.html",
    "title": "Interface IOrpheusModule | Orpheus",
    "keywords": "Interface IOrpheusModule OrpheusModule represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusModule Properties | Improve this Doc View Source Database Module's database. Declaration IOrpheusDatabase Database { get; } Property Value Type Description IOrpheusDatabase Module's database | Improve this Doc View Source Definition Module's definition. Declaration IOrpheusModuleDefinition Definition { get; } Property Value Type Description IOrpheusModuleDefinition Module's definition | Improve this Doc View Source MainTable The module's main table. Declaration IOrpheusTable MainTable { get; set; } Property Value Type Description IOrpheusTable Module's main table | Improve this Doc View Source ReferenceTables List of module's reference tables. Reference tables are tables that are referenced from a module table, through a foreign key constraint. Declaration List<IOrpheusTable> ReferenceTables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > Module's reference tables | Improve this Doc View Source Tables List of module's tables. Declaration List<IOrpheusTable> Tables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > Module's tables Methods | Improve this Doc View Source ClearData() Clears data from all module tables. Declaration void ClearData() | Improve this Doc View Source GetReferenceTable<T>() Gets a table by model. Uses the model class name as the table name. Declaration IOrpheusTable<T> GetReferenceTable<T>() Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source GetReferenceTable<T>(Int32) Gets a table by index, for a model. Declaration IOrpheusTable<T> GetReferenceTable<T>(int index) Parameters Type Name Description System.Int32 index Table index Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source GetReferenceTable<T>(String) Gets a table by name, for a model. Declaration IOrpheusTable<T> GetReferenceTable<T>(string tableName) Parameters Type Name Description System.String tableName Table index Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source GetTable<T>() Gets a table by model. Uses the model class name as the table name. Declaration IOrpheusTable<T> GetTable<T>() Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source GetTable<T>(Int32) Gets a table by index, for a model. Declaration IOrpheusTable<T> GetTable<T>(int index) Parameters Type Name Description System.Int32 index Table index Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source GetTable<T>(String) Gets a table by name, for a model. Declaration IOrpheusTable<T> GetTable<T>(string tableName) Parameters Type Name Description System.String tableName Table name Returns Type Description IOrpheusTable <T> Type Parameters Name Description T Model type | Improve this Doc View Source Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) Loads records from the DB to the table. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields by default are bound with a logical OR. Defining a logical operator, you can change the default behavior. This applies only for the MainTable. Declaration void Load(Dictionary<string, List<object>> keyValues, LogicalOperator logicalOperator = LogicalOperator.loOR, bool clearExistingData = true) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < System.Object >> keyValues LogicalOperator logicalOperator System.Boolean clearExistingData | Improve this Doc View Source Load(List<Object>) Loads a module's record from the database. Declaration void Load(List<object> keyValues = null) Parameters Type Name Description System.Collections.Generic.List < System.Object > keyValues | Improve this Doc View Source Load(IDbCommand, Boolean) Loads main table data by executing a db command. Declaration void Load(IDbCommand dbCommand, bool clearExistingData = true) Parameters Type Name Description System.Data.IDbCommand dbCommand System.Boolean clearExistingData | Improve this Doc View Source Save() Saves all changes to the database. Declaration void Save() Events | Improve this Doc View Source OnAfterSave Occurs after the transaction has been commited. Declaration event EventHandler<ISaveEventArguments> OnAfterSave Event Type Type Description System.EventHandler < ISaveEventArguments > | Improve this Doc View Source OnBeforeSave Occurs before records are save in the database. Declaration event EventHandler<ISaveEventArguments> OnBeforeSave Event Type Type Description System.EventHandler < ISaveEventArguments >"
  },
  "api/OrpheusCore.SchemaBuilder.html": {
    "href": "api/OrpheusCore.SchemaBuilder.html",
    "title": "Namespace OrpheusCore.SchemaBuilder | Orpheus",
    "keywords": "Namespace OrpheusCore.SchemaBuilder Classes ForeignKeySchemaConstraint A foreign key constraint. PrimaryKeySchemaConstraint A primary key constraint. Schema Represents an Orpheus Schema. SchemaDataObject Base schema data object. SchemaField Represents a schema field. SchemaJoinDefinition Represents a schema join definition, which can be used by ISchemaObject when a schema is created. SchemaObject Base schema object. SchemaObjectTable Derived class to specifically handle TABLE type schema objects. SchemaObjectView Derived class to specifically handle VIEW type schema objects. SchemaObjectViewTable Derived class to specifically handle data tables that are part of a view. UniqueKeySchemaConstraint A unique key constraint."
  },
  "api/OrpheusCore.SchemaBuilder.UniqueKeySchemaConstraint.html": {
    "href": "api/OrpheusCore.SchemaBuilder.UniqueKeySchemaConstraint.html",
    "title": "Class UniqueKeySchemaConstraint | Orpheus",
    "keywords": "Class UniqueKeySchemaConstraint A unique key constraint. Inheritance System.Object PrimaryKeySchemaConstraint UniqueKeySchemaConstraint Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class UniqueKeySchemaConstraint : PrimaryKeySchemaConstraint, IPrimaryKeySchemaConstraint, IUniqueKeySchemaConstraint, ISchemaConstraint Constructors | Improve this Doc View Source UniqueKeySchemaConstraint(ISchemaDataObject) Creates a unique key constraint. Declaration public UniqueKeySchemaConstraint(ISchemaDataObject schemaObject) Parameters Type Name Description ISchemaDataObject schemaObject Schema object where the constraint belong Methods | Improve this Doc View Source SQL() Returns the SQL definition of the key. Declaration public override string SQL() Returns Type Description System.String Constraint's SQL Overrides PrimaryKeySchemaConstraint.SQL() Implements IPrimaryKeySchemaConstraint IUniqueKeySchemaConstraint ISchemaConstraint"
  },
  "api/OrpheusAttributes.PrimaryCompositeKey.html": {
    "href": "api/OrpheusAttributes.PrimaryCompositeKey.html",
    "title": "Class PrimaryCompositeKey | Orpheus",
    "keywords": "Class PrimaryCompositeKey Primary composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. Inheritance System.Object System.Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute PrimaryCompositeKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class PrimaryCompositeKey : OrpheusCompositeKeyBaseAttribute, IOrpheusBaseCompositeKeyAttribute, IOrpheusBaseAttribute Constructors | Improve this Doc View Source PrimaryCompositeKey(String[], String) Primary composite key. Declaration public PrimaryCompositeKey(string[] fields, string sort = null) Parameters Type Name Description System.String [] fields Fields that are part of the key System.String sort Sort direction Implements IOrpheusBaseCompositeKeyAttribute IOrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.DefaultValue.html": {
    "href": "api/OrpheusAttributes.DefaultValue.html",
    "title": "Class DefaultValue | Orpheus",
    "keywords": "Class DefaultValue Default value attribute. Decorate a property with attribute to set it's default value. Inheritance System.Object System.Attribute OrpheusBaseAttribute DefaultValue Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class DefaultValue : OrpheusBaseAttribute, IOrpheusBaseAttribute Constructors | Improve this Doc View Source DefaultValue(Object) DefaultValue attribute constructor. Declaration public DefaultValue(object value) Parameters Type Name Description System.Object value Property's default value Properties | Improve this Doc View Source Value The default value. Declaration public object Value { get; } Property Value Type Description System.Object Default value Implements IOrpheusBaseAttribute"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaDataObject.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaDataObject.html",
    "title": "Class SchemaDataObject | Orpheus",
    "keywords": "Class SchemaDataObject Base schema data object. Inheritance System.Object SchemaObject SchemaDataObject SchemaObjectTable SchemaObjectView Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class SchemaDataObject : SchemaObject, ISchemaDataObject, ISchemaObject Constructors | Improve this Doc View Source SchemaDataObject() Constructor. Declaration public SchemaDataObject() Fields | Improve this Doc View Source modelHelper Schema model helper. Declaration protected OrpheusModelHelper modelHelper Field Value Type Description OrpheusModelHelper | Improve this Doc View Source seedDataTable Table that holds the initial seed data for the schema. Declaration protected IOrpheusTable seedDataTable Field Value Type Description IOrpheusTable Properties | Improve this Doc View Source Constraints The list of constraints of the schema object. Declaration public List<ISchemaConstraint> Constraints { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaConstraint > | Improve this Doc View Source DB Database that the schema object belongs to. Taken from the ISchema property. Declaration public IOrpheusDatabase DB { get; } Property Value Type Description IOrpheusDatabase | Improve this Doc View Source Fields The list of fields of the schema object. Declaration public List<ISchemaField> Fields { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaField > Methods | Improve this Doc View Source AddField(String, String, Boolean, String, String, String) Adds a field. Declaration public ISchemaField AddField(string name, string dataType, bool nullable = true, string defaultValue = null, string size = null, string alias = null) Parameters Type Name Description System.String name System.String dataType System.Boolean nullable System.String defaultValue System.String size System.String alias Returns Type Description ISchemaField | Improve this Doc View Source AddForeignKeyConstraint(String, List<String>, String, List<String>, Boolean, Boolean) Adds a foreign key constraint. Declaration public IForeignKeySchemaConstraint AddForeignKeyConstraint(string name, List<string> fields, string foreignKeySchemaObject, List<string> foreignKeySchemaFields, bool onCascadeDelete = true, bool onUpdateCascade = true) Parameters Type Name Description System.String name System.Collections.Generic.List < System.String > fields System.String foreignKeySchemaObject System.Collections.Generic.List < System.String > foreignKeySchemaFields System.Boolean onCascadeDelete System.Boolean onUpdateCascade Returns Type Description IForeignKeySchemaConstraint | Improve this Doc View Source AddPrimaryKeyConstraint(String, List<String>, SchemaSort) Adds a primary key constraint. Declaration public IPrimaryKeySchemaConstraint AddPrimaryKeyConstraint(string name, List<string> fields, SchemaSort sort = SchemaSort.ssAsc) Parameters Type Name Description System.String name System.Collections.Generic.List < System.String > fields SchemaSort sort Returns Type Description IPrimaryKeySchemaConstraint | Improve this Doc View Source AddUniqueKeyConstraint(String, List<String>) Adds a unique key constraint. Declaration public IUniqueKeySchemaConstraint AddUniqueKeyConstraint(string name, List<string> fields) Parameters Type Name Description System.String name System.Collections.Generic.List < System.String > fields Returns Type Description IUniqueKeySchemaConstraint | Improve this Doc View Source applyConstraints(IDbCommand) Applies schema constraints. Declaration protected virtual void applyConstraints(IDbCommand cmd) Parameters Type Name Description System.Data.IDbCommand cmd | Improve this Doc View Source canExecuteSchema() Returns true if the schema can be executed. Declaration protected override bool canExecuteSchema() Returns Type Description System.Boolean Overrides SchemaObject.canExecuteSchema() | Improve this Doc View Source CreateFieldsFromModel(Object) Creates fields from a given model. Declaration public void CreateFieldsFromModel(object model) Parameters Type Name Description System.Object model | Improve this Doc View Source CreateFieldsFromModel(Type) Creates fields from a given model. Supports OrpheusAttributes attributes Model type Declaration public void CreateFieldsFromModel(Type modelType) Parameters Type Name Description System.Type modelType | Improve this Doc View Source CreateFieldsFromModel<T>() Creates fields from a given model. Supports OrpheusAttributes attributes Declaration public void CreateFieldsFromModel<T>() Type Parameters Name Description T Model type | Improve this Doc View Source Drop() Drops the schema from the database. Declaration public override void Drop() Overrides SchemaObject.Drop() | Improve this Doc View Source Execute() Creates the schema object in the database. Declaration public override void Execute() Overrides SchemaObject.Execute() | Improve this Doc View Source getConstraintsDDL() Returns the schema constraints SQL. Declaration protected string getConstraintsDDL() Returns Type Description System.String | Improve this Doc View Source GetConstraintsDDL() Generate the schema's constraints DDL string. Declaration public List<string> GetConstraintsDDL() Returns Type Description System.Collections.Generic.List < System.String > Returns the DDL string ready to be executed. | Improve this Doc View Source GetData<T>() Returns the seed data. Declaration public List<T> GetData<T>() Returns Type Description System.Collections.Generic.List <T> Type Parameters Name Description T | Improve this Doc View Source registerSchema(IDbTransaction) Registers an Orpheus schema. Declaration protected override void registerSchema(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Overrides SchemaObject.registerSchema(IDbTransaction) | Improve this Doc View Source seedData(IDbCommand) Inserts data to the DB engine, if the schema is a Table. Declaration protected virtual void seedData(IDbCommand cmd) Parameters Type Name Description System.Data.IDbCommand cmd | Improve this Doc View Source SetData<T>(List<T>) Sets seed data to seed the schema object when constructed. Declaration public void SetData<T>(List<T> data) Parameters Type Name Description System.Collections.Generic.List <T> data Type Parameters Name Description T | Improve this Doc View Source unRegisterSchema(IDbTransaction) Unregisters an Orpheus schema. Declaration protected override void unRegisterSchema(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Overrides SchemaObject.unRegisterSchema(IDbTransaction) Implements ISchemaDataObject ISchemaObject"
  },
  "api/OrpheusCore.Configuration.html": {
    "href": "api/OrpheusCore.Configuration.html",
    "title": "Namespace OrpheusCore.Configuration | Orpheus",
    "keywords": "Namespace OrpheusCore.Configuration Classes ConfigurationManager Orpheus configuration manager. DatabaseConnectionConfiguration Orpheus database configuration. LoggingConfiguration Orpheus logging configuration. OrpheusConfiguration Orpheus's configuration. ServiceProviderItem Service DI configuration item."
  },
  "api/OrpheusAttributes.FieldName.html": {
    "href": "api/OrpheusAttributes.FieldName.html",
    "title": "Class FieldName | Orpheus",
    "keywords": "Class FieldName FieldName attribute. Decorate a model property with this attribute, to explicitly define the corresponding field name in the db table. Inheritance System.Object System.Attribute OrpheusBaseAttribute FieldName Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class FieldName : OrpheusBaseAttribute, IOrpheusBaseAttribute Constructors | Improve this Doc View Source FieldName(String) Field name constructor. Declaration public FieldName(string fieldName) Parameters Type Name Description System.String fieldName Field name Properties | Improve this Doc View Source Name Field name. Declaration public string Name { get; } Property Value Type Description System.String Implements IOrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.PrimaryKey.html": {
    "href": "api/OrpheusAttributes.PrimaryKey.html",
    "title": "Class PrimaryKey | Orpheus",
    "keywords": "Class PrimaryKey Primary key constraint attribute. Decorate a property with attribute to create a primary key constraint on a schema object. Inheritance System.Object System.Attribute OrpheusBaseAttribute PrimaryKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class PrimaryKey : OrpheusBaseAttribute, IPrimaryKey, IOrpheusBaseAttribute Constructors | Improve this Doc View Source PrimaryKey(Boolean, Boolean) Primary key attribute constructor. Declaration public PrimaryKey(bool isAutoGenerated = true, bool isDBGenerated = false) Parameters Type Name Description System.Boolean isAutoGenerated True if the key value is auto-generated System.Boolean isDBGenerated True if the key is generated from the DB engine Properties | Improve this Doc View Source IsAutoGenerated Indicates if the primary key value will be auto-generated in memory. Only System.Guid type is supported. Declaration public bool IsAutoGenerated { get; } Property Value Type Description System.Boolean True if the key value is auto-generated. | Improve this Doc View Source IsDBGenerated Indicates if the primary key value is auto-generated. Declaration public bool IsDBGenerated { get; } Property Value Type Description System.Boolean True if the key is generated from the DB engine Implements IPrimaryKey IOrpheusBaseAttribute"
  },
  "api/OrpheusInterfaces.Core.IOrpheusTable.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusTable.html",
    "title": "Interface IOrpheusTable | Orpheus",
    "keywords": "Interface IOrpheusTable Orpheus table is the core Orpheus data object. It is responsible for performing data operations. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTable Properties | Improve this Doc View Source DetailTables List of dependent detail tables. Declaration List<IOrpheusTable> DetailTables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > List of detail tables | Improve this Doc View Source KeyFields Table's key field(s). Declaration List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > Table's key field(s) | Improve this Doc View Source Level Table's level. Zero if the table is not a child to any other table. Declaration int Level { get; } Property Value Type Description System.Int32 Table's level | Improve this Doc View Source MasterTable Master table name, if the table is a detail table. Declaration IOrpheusTable MasterTable { get; set; } Property Value Type Description IOrpheusTable Master table name | Improve this Doc View Source MasterTableKeyFields Master table's key field(s), if the table is detail table. Declaration List<IOrpheusTableKeyField> MasterTableKeyFields { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > Master table key fields | Improve this Doc View Source Modified True when table data have been modified. Declaration bool Modified { get; } Property Value Type Description System.Boolean True if table data have been modified | Improve this Doc View Source Name The table name. Declaration string Name { get; } Property Value Type Description System.String Table name | Improve this Doc View Source SchemaName The table's schema name. Applicable only if the db engine is SQL Server. Declaration string SchemaName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source ClearData() Clears existing loaded data. Declaration void ClearData() | Improve this Doc View Source ExecuteDeletes(IDbTransaction) Executes any delete changes that the table has. Declaration void ExecuteDeletes(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source ExecuteInserts(IDbTransaction) Executes any insert changes that the table has. Declaration void ExecuteInserts(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source ExecuteUpdates(IDbTransaction) Executes any update changes that the table has. Declaration void ExecuteUpdates(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source GetKeyValues() Returns list of current key values. Declaration List<KeyValuePair<string, object>> GetKeyValues() Returns Type Description System.Collections.Generic.List < System.Collections.Generic.KeyValuePair < System.String , System.Object >> List of current key values | Improve this Doc View Source Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) Loads records from the DB to the table. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields by default are bound with a logical OR. Defining a logical operator, you can change the default behavior. Declaration void Load(Dictionary<string, List<object>> keyValues, LogicalOperator logicalOperator = LogicalOperator.loOR, bool clearExistingData = true) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < System.Object >> keyValues LogicalOperator logicalOperator System.Boolean clearExistingData | Improve this Doc View Source Load(List<Object>, Boolean) Loads records from the DB to the table. Declaration void Load(List<object> keyValues = null, bool clearExistingData = true) Parameters Type Name Description System.Collections.Generic.List < System.Object > keyValues System.Boolean clearExistingData | Improve this Doc View Source Load(IDbCommand, Boolean) Loads table data by executing a db command. Declaration void Load(IDbCommand dbCommand, bool clearExistingData = true) Parameters Type Name Description System.Data.IDbCommand dbCommand System.Boolean clearExistingData | Improve this Doc View Source Load(String, Boolean) Loads table data by executing a SQL command. Declaration void Load(string SQL, bool clearExistingData = true) Parameters Type Name Description System.String SQL SQL command to be executed System.Boolean clearExistingData | Improve this Doc View Source Save(IDbTransaction, Boolean) Save changes to the database. Declaration void Save(IDbTransaction dbTransaction = null, bool commitTransaction = true) Parameters Type Name Description System.Data.IDbTransaction dbTransaction Transaction in which the commands will be executed System.Boolean commitTransaction Commit transaction after save. Events | Improve this Doc View Source OnAfterSave Occurs after the transaction has been committed. Declaration event EventHandler<ISaveEventArguments> OnAfterSave Event Type Type Description System.EventHandler < ISaveEventArguments > | Improve this Doc View Source OnBeforeSave Occurs before records are save in the database. Declaration event EventHandler<ISaveEventArguments> OnBeforeSave Event Type Type Description System.EventHandler < ISaveEventArguments >"
  },
  "api/OrpheusCore.OrpheusModelHelper.html": {
    "href": "api/OrpheusCore.OrpheusModelHelper.html",
    "title": "Class OrpheusModelHelper | Orpheus",
    "keywords": "Class OrpheusModelHelper OrpheusModelHelper is a helper class that analyzes a model and can create primary-foreign keys and/or schema fields, when creating a schema. Inheritance System.Object OrpheusModelHelper Namespace : OrpheusCore Assembly : OrpheusCore.dll Syntax public class OrpheusModelHelper : IOrpheusModelHelper Constructors | Improve this Doc View Source OrpheusModelHelper(Type) OrpheusModelHelper is a helper class that analyzes a model and can create primary-foreign keys and/or schema fields, when creating a schema. Declaration public OrpheusModelHelper(Type modelType) Parameters Type Name Description System.Type modelType Properties | Improve this Doc View Source CustomFieldNameProperties Model properties that have an explicitly set field name. Declaration public Dictionary<string, string> CustomFieldNameProperties { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > | Improve this Doc View Source ForeignKeys Model's foreign keys. Declaration public Dictionary<string, IForeignKey> ForeignKeys { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IForeignKey > | Improve this Doc View Source ModelProperties Model's properties. Declaration public PropertyInfo[] ModelProperties { get; } Property Value Type Description System.Reflection.PropertyInfo [] | Improve this Doc View Source PrimaryCompositeKeys Model's composite primary keys. Declaration public List<IOrpheusBaseCompositeKeyAttribute> PrimaryCompositeKeys { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusBaseCompositeKeyAttribute > | Improve this Doc View Source PrimaryKeys Model's primary keys. Declaration public Dictionary<string, IPrimaryKey> PrimaryKeys { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IPrimaryKey > | Improve this Doc View Source SchemaIgnoreProperties Model properties that are not part of the schema. Declaration public List<string> SchemaIgnoreProperties { get; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source SQLName Model's SQLName. Defaults to the model's type name. Declaration public string SQLName { get; } Property Value Type Description System.String | Improve this Doc View Source SQLServerSchemaName SQL server's schema name. Declaration public string SQLServerSchemaName { get; } Property Value Type Description System.String | Improve this Doc View Source UniqueCompositeKeys Model's composite unique keys. Declaration public List<IOrpheusBaseCompositeKeyAttribute> UniqueCompositeKeys { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusBaseCompositeKeyAttribute > | Improve this Doc View Source UniqueKeys Model's unique keys. Declaration public Dictionary<string, IUniqueKey> UniqueKeys { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IUniqueKey > Methods | Improve this Doc View Source CreateInstance<T>() Creates an instance of the model and typecasts it to the given type. Declaration public T CreateInstance<T>() Returns Type Description T Type Parameters Name Description T Type to cast the model | Improve this Doc View Source CreateSchemaFields(ISchemaDataObject) Creates schema fields and constraints for a model. Declaration public void CreateSchemaFields(ISchemaDataObject schemaObj) Parameters Type Name Description ISchemaDataObject schemaObj | Improve this Doc View Source GetAlterDDLCommands(ISchemaDataObject, IOrpheusDDLHelper) Creates a list of SQL ALTER commands, based on the differences between the current version of the model and the current version of the corresponding db table. Declaration public List<string> GetAlterDDLCommands(ISchemaDataObject schemaObj, IOrpheusDDLHelper ddlHelper) Parameters Type Name Description ISchemaDataObject schemaObj IOrpheusDDLHelper ddlHelper Returns Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source GetFieldNameForProperty(PropertyInfo) Helper function that returns the corresponding field name for a property. Declaration public string GetFieldNameForProperty(PropertyInfo prop) Parameters Type Name Description System.Reflection.PropertyInfo prop Returns Type Description System.String | Improve this Doc View Source IsSchemaProperty(PropertyInfo) Helper function that returns true if the property is not actually part of the schema. Declaration public bool IsSchemaProperty(PropertyInfo property) Parameters Type Name Description System.Reflection.PropertyInfo property Returns Type Description System.Boolean | Improve this Doc View Source IterateModelProperties(ModelProperty) Helper function to iterate through the model properties and calls the given callback, for each property. Declaration public void IterateModelProperties(ModelProperty callback) Parameters Type Name Description ModelProperty callback | Improve this Doc View Source IteratePropertyAttributes(PropertyInfo, PropertyAttribute) Helper function to iterate through the property's attributes and calls the given callback, for each attribute. Declaration public void IteratePropertyAttributes(PropertyInfo property, PropertyAttribute callback) Parameters Type Name Description System.Reflection.PropertyInfo property PropertyAttribute callback Implements IOrpheusModelHelper"
  },
  "api/OrpheusAttributes.UniqueCompositeKey.html": {
    "href": "api/OrpheusAttributes.UniqueCompositeKey.html",
    "title": "Class UniqueCompositeKey | Orpheus",
    "keywords": "Class UniqueCompositeKey Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. Inheritance System.Object System.Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute UniqueCompositeKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class UniqueCompositeKey : OrpheusCompositeKeyBaseAttribute, IOrpheusBaseCompositeKeyAttribute, IOrpheusBaseAttribute Constructors | Improve this Doc View Source UniqueCompositeKey(String[], String) Primary composite key. Declaration public UniqueCompositeKey(string[] fields, string sort = null) Parameters Type Name Description System.String [] fields Fields that are part of the key System.String sort Sort direction Implements IOrpheusBaseCompositeKeyAttribute IOrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.RequiredField.html": {
    "href": "api/OrpheusAttributes.RequiredField.html",
    "title": "Class RequiredField | Orpheus",
    "keywords": "Class RequiredField Required field attribute. Inheritance System.Object System.Attribute OrpheusBaseAttribute RequiredField Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class RequiredField : OrpheusBaseAttribute, IOrpheusBaseAttribute Implements IOrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.OrpheusBaseAttribute.html": {
    "href": "api/OrpheusAttributes.OrpheusBaseAttribute.html",
    "title": "Class OrpheusBaseAttribute | Orpheus",
    "keywords": "Class OrpheusBaseAttribute The Orpheus base attribute class. Inheritance System.Object System.Attribute OrpheusBaseAttribute DataTypeAttribute DefaultValue FieldName ForeignKey Length OrpheusCompositeKeyBaseAttribute PrimaryKey RequiredField SchemaIgnore SQLServerSchemaName TableName UniqueKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class OrpheusBaseAttribute : Attribute, IOrpheusBaseAttribute Implements IOrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.DataTypeAttribute.html": {
    "href": "api/OrpheusAttributes.DataTypeAttribute.html",
    "title": "Class DataTypeAttribute | Orpheus",
    "keywords": "Class DataTypeAttribute Annotate a property with attribute to set it's DbType Inheritance System.Object System.Attribute OrpheusBaseAttribute DataTypeAttribute Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class DataTypeAttribute : OrpheusBaseAttribute, IOrpheusBaseAttribute Constructors | Improve this Doc View Source DataTypeAttribute(DbType) Data type attribute constructor. Declaration public DataTypeAttribute(DbType dbType) Parameters Type Name Description System.Data.DbType dbType Data type | Improve this Doc View Source DataTypeAttribute(Int32) Data type attribute constructor. Declaration public DataTypeAttribute(int dbType) Parameters Type Name Description System.Int32 dbType Casted to System.Data.DbType Properties | Improve this Doc View Source DataType Field's data type. Declaration public DbType DataType { get; } Property Value Type Description System.Data.DbType Data type Implements IOrpheusBaseAttribute"
  },
  "api/OrpheusCore.Configuration.LoggingConfiguration.html": {
    "href": "api/OrpheusCore.Configuration.LoggingConfiguration.html",
    "title": "Class LoggingConfiguration | Orpheus",
    "keywords": "Class LoggingConfiguration Orpheus logging configuration. Inheritance System.Object LoggingConfiguration Namespace : OrpheusCore.Configuration Assembly : OrpheusCore.dll Syntax public class LoggingConfiguration : ILoggingConfiguration Constructors | Improve this Doc View Source LoggingConfiguration() Constructor Declaration public LoggingConfiguration() Properties | Improve this Doc View Source FilePath Log file path. Declaration public string FilePath { get; set; } Property Value Type Description System.String | Improve this Doc View Source Level Logging level. Declaration public string Level { get; set; } Property Value Type Description System.String | Improve this Doc View Source MaxFileSize Maximum log file size. Declaration public int MaxFileSize { get; set; } Property Value Type Description System.Int32 Implements ILoggingConfiguration"
  },
  "api/OrpheusAttributes.SQLServerSchemaName.html": {
    "href": "api/OrpheusAttributes.SQLServerSchemaName.html",
    "title": "Class SQLServerSchemaName | Orpheus",
    "keywords": "Class SQLServerSchemaName Schema name attribute. Decorate a class with this attribute, to define to which schema the model exists. It's only applicable when the underlying database engine is SQL server, as it's the only one, from the supported database engines, that has this functionality. Inheritance System.Object System.Attribute OrpheusBaseAttribute SQLServerSchemaName Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class SQLServerSchemaName : OrpheusBaseAttribute, IOrpheusBaseAttribute Constructors | Improve this Doc View Source SQLServerSchemaName(String) Schema name attribute constructor. Declaration public SQLServerSchemaName(string schemaName) Parameters Type Name Description System.String schemaName Schema name. Properties | Improve this Doc View Source SchemaName The schema name. Declaration public string SchemaName { get; } Property Value Type Description System.String Implements IOrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.Length.html": {
    "href": "api/OrpheusAttributes.Length.html",
    "title": "Class Length | Orpheus",
    "keywords": "Class Length Length attribute. Decorate a property with attribute to set a maximum length value. Applies only to string types. Inheritance System.Object System.Attribute OrpheusBaseAttribute Length Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class Length : OrpheusBaseAttribute, IOrpheusBaseAttribute Constructors | Improve this Doc View Source Length(Int32) Length attribute constructor. Declaration public Length(int value) Parameters Type Name Description System.Int32 value The max length value Properties | Improve this Doc View Source Value The maximum length value. Declaration public int Value { get; } Property Value Type Description System.Int32 Length Implements IOrpheusBaseAttribute"
  },
  "api/OrpheusAttributes.SchemaIgnore.html": {
    "href": "api/OrpheusAttributes.SchemaIgnore.html",
    "title": "Class SchemaIgnore | Orpheus",
    "keywords": "Class SchemaIgnore SchemaIgnore attribute. Decorate a model property to indicate that it's not part of the actual db table schema. Useful for dynamically calculated/defined model properties. Inheritance System.Object System.Attribute OrpheusBaseAttribute SchemaIgnore Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class SchemaIgnore : OrpheusBaseAttribute, IOrpheusBaseAttribute Implements IOrpheusBaseAttribute"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaObjectViewTable.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaObjectViewTable.html",
    "title": "Class SchemaObjectViewTable | Orpheus",
    "keywords": "Class SchemaObjectViewTable Derived class to specifically handle data tables that are part of a view. Inheritance System.Object SchemaObject SchemaDataObject SchemaObjectTable SchemaObjectViewTable Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class SchemaObjectViewTable : SchemaObjectTable, ISchemaViewTable, ISchemaTable, ISchemaDataObject, ISchemaObject Properties | Improve this Doc View Source SchemaName Override for the schema name. Declaration public string SchemaName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source formatSQLName() Overriding the default behavior, for view objects. Declaration protected override string formatSQLName() Returns Type Description System.String Overrides SchemaObject.formatSQLName() Implements ISchemaViewTable ISchemaTable ISchemaDataObject ISchemaObject"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaObjectView.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaObjectView.html",
    "title": "Class SchemaObjectView | Orpheus",
    "keywords": "Class SchemaObjectView Derived class to specifically handle VIEW type schema objects. Inheritance System.Object SchemaObject SchemaDataObject SchemaObjectView Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class SchemaObjectView : SchemaDataObject, ISchemaView, ISchemaDataObject, ISchemaObject Constructors | Improve this Doc View Source SchemaObjectView() Constructor. Declaration public SchemaObjectView() Properties | Improve this Doc View Source JoinDefinition View's Join definition. How and if this table is connected to other tables. Declaration public ISchemaJoinDefinition JoinDefinition { get; set; } Property Value Type Description ISchemaJoinDefinition | Improve this Doc View Source JoinSchemaObjects List of schema table to be included in the view. Declaration public List<ISchemaTable> JoinSchemaObjects { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaTable > | Improve this Doc View Source TableName The main table around which the view will be built. Declaration public string TableName { get; set; } Property Value Type Description System.String | Improve this Doc View Source WithSchemaBinding SQL server specific option, to create views with schema binding, in order to be able to create indexes on the view itself. Declaration public bool WithSchemaBinding { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source createDDLString() Creates the DDL string for the schema object. Declaration protected override List<string> createDDLString() Returns Type Description System.Collections.Generic.List < System.String > Overrides SchemaObject.createDDLString() | Improve this Doc View Source FormattedTableName() Returns the main table name, SQL formatted, with a schema name, if the underlying db engine supports it, and with the table alias, if defined. Declaration public string FormattedTableName() Returns Type Description System.String | Improve this Doc View Source getType() Gets the SchemaObjectType . Declaration protected override SchemaObjectType getType() Returns Type Description SchemaObjectType Overrides SchemaObject.getType() Implements ISchemaView ISchemaDataObject ISchemaObject"
  },
  "api/OrpheusCore.SchemaBuilder.ForeignKeySchemaConstraint.html": {
    "href": "api/OrpheusCore.SchemaBuilder.ForeignKeySchemaConstraint.html",
    "title": "Class ForeignKeySchemaConstraint | Orpheus",
    "keywords": "Class ForeignKeySchemaConstraint A foreign key constraint. Inheritance System.Object PrimaryKeySchemaConstraint ForeignKeySchemaConstraint Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class ForeignKeySchemaConstraint : PrimaryKeySchemaConstraint, IPrimaryKeySchemaConstraint, IForeignKeySchemaConstraint, ISchemaConstraint Constructors | Improve this Doc View Source ForeignKeySchemaConstraint(ISchemaDataObject) Creates a foreign key constraint. Declaration public ForeignKeySchemaConstraint(ISchemaDataObject schemaObject) Parameters Type Name Description ISchemaDataObject schemaObject Schema object where the constraint belong Properties | Improve this Doc View Source ForeignKeyFields Foreign key fields. Applicable only when key is of type ktForeign. Declaration public List<string> ForeignKeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > List of key fields | Improve this Doc View Source ForeignKeySchemaObject Referenced table name. Applicable only when key is of type ktForeign. Declaration public string ForeignKeySchemaObject { get; set; } Property Value Type Description System.String Constraint's key | Improve this Doc View Source OnDeleteCascade Cascade on delete. Declaration public bool OnDeleteCascade { get; set; } Property Value Type Description System.Boolean True if cascade on delete is on | Improve this Doc View Source OnUpdateCascade Cascade on update. Declaration public bool OnUpdateCascade { get; set; } Property Value Type Description System.Boolean True if cascade on update is on Methods | Improve this Doc View Source SQL() Returns the SQL definition of the key. Declaration public override string SQL() Returns Type Description System.String Constraint's SQL Overrides PrimaryKeySchemaConstraint.SQL() Implements IPrimaryKeySchemaConstraint IForeignKeySchemaConstraint ISchemaConstraint"
  },
  "api/OrpheusCore.PropertyAttribute.html": {
    "href": "api/OrpheusCore.PropertyAttribute.html",
    "title": "Delegate PropertyAttribute | Orpheus",
    "keywords": "Delegate PropertyAttribute Helper delegate, to be called when iterating through property's attributes. Namespace : OrpheusCore Assembly : OrpheusCore.dll Syntax public delegate void PropertyAttribute(Attribute attribute); Parameters Type Name Description System.Attribute attribute"
  },
  "api/OrpheusCore.OrpheusModuleDefinition.html": {
    "href": "api/OrpheusCore.OrpheusModuleDefinition.html",
    "title": "Class OrpheusModuleDefinition | Orpheus",
    "keywords": "Class OrpheusModuleDefinition The OrpheusModuleDefinition can save and load a module definition. A module definition, includes relationship between the module tables and that is required for a module to be functional. IOrpheusModule Inheritance System.Object OrpheusModuleDefinition Namespace : OrpheusCore Assembly : OrpheusCore.dll Syntax public class OrpheusModuleDefinition : IOrpheusModuleDefinition Constructors | Improve this Doc View Source OrpheusModuleDefinition() Constructor Declaration public OrpheusModuleDefinition() Properties | Improve this Doc View Source Database Orpheus database. Declaration [IgnoreDataMember] public IOrpheusDatabase Database { get; set; } Property Value Type Description IOrpheusDatabase | Improve this Doc View Source DetailTableOptions List of module's detail table options. Declaration public List<IOrpheusTableOptions> DetailTableOptions { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableOptions > | Improve this Doc View Source MainTableOptions Module's main table options. Declaration public IOrpheusTableOptions MainTableOptions { get; set; } Property Value Type Description IOrpheusTableOptions | Improve this Doc View Source Name Module's name. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source ReferenceTableOptions List of module reference tables. Declaration public List<IOrpheusTableOptions> ReferenceTableOptions { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableOptions > Methods | Improve this Doc View Source CreateTableOptions() Creates an instance of OrpheusTableOptions. Declaration public IOrpheusTableOptions CreateTableOptions() Returns Type Description IOrpheusTableOptions | Improve this Doc View Source CreateTableOptions(String, Type) Creates an instance of OrpheusTableOptions. Declaration public IOrpheusTableOptions CreateTableOptions(string tableName, Type modelType) Parameters Type Name Description System.String tableName System.Type modelType Returns Type Description IOrpheusTableOptions | Improve this Doc View Source CreateTableOptions(Type) Creates an instance of OrpheusTableOptions. Declaration public IOrpheusTableOptions CreateTableOptions(Type modelType) Parameters Type Name Description System.Type modelType Returns Type Description IOrpheusTableOptions | Improve this Doc View Source LoadFrom(Stream) Load definition from memory. Declaration public void LoadFrom(Stream stream) Parameters Type Name Description System.IO.Stream stream | Improve this Doc View Source LoadFrom(String) Load definition from a file. Declaration public void LoadFrom(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source LoadFromDB(String) Load definition from the database. Declaration public void LoadFromDB(string moduleName) Parameters Type Name Description System.String moduleName | Improve this Doc View Source SaveTo(Stream) Save definition to memory. Declaration public void SaveTo(Stream stream) Parameters Type Name Description System.IO.Stream stream | Improve this Doc View Source SaveTo(String) Save definition to a file. Declaration public void SaveTo(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source SaveToDB() Save definition to the database. Declaration public void SaveToDB() Implements IOrpheusModuleDefinition"
  },
  "api/OrpheusCore.ModifiedRecordAction.html": {
    "href": "api/OrpheusCore.ModifiedRecordAction.html",
    "title": "Enum ModifiedRecordAction | Orpheus",
    "keywords": "Enum ModifiedRecordAction Modified record action. Namespace : OrpheusCore Assembly : OrpheusCore.dll Syntax public enum ModifiedRecordAction Fields Name Description mraDelete Delete an existing record. mraInsert Insert a new record. mraUpdate Update an existing record."
  },
  "api/OrpheusCore.Configuration.OrpheusConfiguration.html": {
    "href": "api/OrpheusCore.Configuration.OrpheusConfiguration.html",
    "title": "Class OrpheusConfiguration | Orpheus",
    "keywords": "Class OrpheusConfiguration Orpheus's configuration. Inheritance System.Object OrpheusConfiguration Namespace : OrpheusCore.Configuration Assembly : OrpheusCore.dll Syntax public class OrpheusConfiguration Constructors | Improve this Doc View Source OrpheusConfiguration() Creates an Orpheus configuration. Declaration public OrpheusConfiguration() Properties | Improve this Doc View Source DatabaseConnections Database connections information. Declaration public List<DatabaseConnectionConfiguration> DatabaseConnections { get; set; } Property Value Type Description System.Collections.Generic.List < DatabaseConnectionConfiguration > | Improve this Doc View Source DefaultStringSize Default size for string field, when creating a db schema. Declaration public int DefaultStringSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Logging Logging configuration. Declaration public LoggingConfiguration Logging { get; set; } Property Value Type Description LoggingConfiguration | Improve this Doc View Source Services List of services. Declaration public List<ServiceProviderItem> Services { get; set; } Property Value Type Description System.Collections.Generic.List < ServiceProviderItem >"
  },
  "api/OrpheusAttributes.html": {
    "href": "api/OrpheusAttributes.html",
    "title": "Namespace OrpheusAttributes | Orpheus",
    "keywords": "Namespace OrpheusAttributes Classes DataTypeAttribute Annotate a property with attribute to set it's DbType DefaultValue Default value attribute. Decorate a property with attribute to set it's default value. FieldName FieldName attribute. Decorate a model property with this attribute, to explicitly define the corresponding field name in the db table. ForeignKey Primary key constraint attribute. Decorate a property with attribute to create a foreign key constraint on a schema object. Length Length attribute. Decorate a property with attribute to set a maximum length value. Applies only to string types. OrpheusBaseAttribute The Orpheus base attribute class. OrpheusCompositeKeyBaseAttribute Composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. PrimaryCompositeKey Primary composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. PrimaryKey Primary key constraint attribute. Decorate a property with attribute to create a primary key constraint on a schema object. RequiredField Required field attribute. SchemaIgnore SchemaIgnore attribute. Decorate a model property to indicate that it's not part of the actual db table schema. Useful for dynamically calculated/defined model properties. SQLServerSchemaName Schema name attribute. Decorate a class with this attribute, to define to which schema the model exists. It's only applicable when the underlying database engine is SQL server, as it's the only one, from the supported database engines, that has this functionality. TableName TableName attribute. Decorate a model with this attribute to to explicitly define the corresponding db table name. UniqueCompositeKey Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. UniqueKey Unique key constraint attribute. Decorate a property with attribute to create a unique key constraint on a schema object."
  },
  "api/OrpheusInterfaces.Core.IOrpheusTableOptions.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusTableOptions.html",
    "title": "Interface IOrpheusTableOptions | Orpheus",
    "keywords": "Interface IOrpheusTableOptions Represents IOrpheusTable options, which can be used to instantiate a table. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTableOptions Properties | Improve this Doc View Source Database Database that the table is a part of. Declaration [IgnoreDataMember] IOrpheusDatabase Database { get; set; } Property Value Type Description IOrpheusDatabase Database that the table is part of | Improve this Doc View Source KeyFields Table's key field(s). Can be more than one to support composite keys. Declaration List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > Table's key fields | Improve this Doc View Source MasterTable Table's master table. To support the master-detail relationship. Declaration [IgnoreDataMember] IOrpheusTable MasterTable { get; set; } Property Value Type Description IOrpheusTable Table's master table | Improve this Doc View Source MasterTableKeyFields Master table's key field(s). Can be more than one to support composite keys. Declaration List<IOrpheusTableKeyField> MasterTableKeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > Master table's key field | Improve this Doc View Source MasterTableName Table's master table. To support the master-detail relationship. Declaration string MasterTableName { get; set; } Property Value Type Description System.String Table's master table name | Improve this Doc View Source ModelType Model type. Declaration Type ModelType { get; set; } Property Value Type Description System.Type Table model type | Improve this Doc View Source TableName Table's name. Declaration string TableName { get; set; } Property Value Type Description System.String Table's name Methods | Improve this Doc View Source AddKeyField(String, Boolean, Boolean, Func<String>) Creates a new key field. Declaration void AddKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters Type Name Description System.String name Field name System.Boolean isAutoGenerated Auto generate flag System.Boolean isDBGenerated DB generated flag System.Func < System.String > keySQLUpdate Function to return a custom SQL when updating the field value | Improve this Doc View Source AddMasterKeyField(String, Boolean, Boolean, Func<String>) Creates a new master key field Declaration void AddMasterKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters Type Name Description System.String name Field name System.Boolean isAutoGenerated Auto generate flag System.Boolean isDBGenerated DB generated flag System.Func < System.String > keySQLUpdate Function to return a custom SQL when updating the field value"
  },
  "api/OrpheusInterfaces.Core.IOrpheusTableKeyField.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusTableKeyField.html",
    "title": "Interface IOrpheusTableKeyField | Orpheus",
    "keywords": "Interface IOrpheusTableKeyField Represents an Orpheus table key field. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTableKeyField Properties | Improve this Doc View Source IsAutoGenerated If set to true and the type is System.Guid then with every new insert, a value will be auto generated. Declaration bool IsAutoGenerated { get; set; } Property Value Type Description System.Boolean True if the field value is auto generated | Improve this Doc View Source IsDBGenerated True if the underlying db engine is going to generate the value for the key. Declaration bool IsDBGenerated { get; set; } Property Value Type Description System.Boolean True if field value is DB generated | Improve this Doc View Source KeySQLUpdate Function that returns a SQL string to be used in a WHERE clause, to select the new key value(s) after an insert. Declaration Func<string> KeySQLUpdate { get; set; } Property Value Type Description System.Func < System.String > Function that returns a SQL string | Improve this Doc View Source Name Name of the field that is the table key. Declaration string Name { get; set; } Property Value Type Description System.String Field name"
  },
  "api/OrpheusInterfaces.Core.IOrpheusModelHelper.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusModelHelper.html",
    "title": "Interface IOrpheusModelHelper | Orpheus",
    "keywords": "Interface IOrpheusModelHelper Orpheus model helper Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusModelHelper Properties | Improve this Doc View Source CustomFieldNameProperties Model properties that have an explicitly set field name. Declaration Dictionary<string, string> CustomFieldNameProperties { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > | Improve this Doc View Source ForeignKeys Model's foreign keys. Declaration Dictionary<string, IForeignKey> ForeignKeys { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IForeignKey > | Improve this Doc View Source ModelProperties Model's properties. Declaration PropertyInfo[] ModelProperties { get; } Property Value Type Description System.Reflection.PropertyInfo [] | Improve this Doc View Source PrimaryCompositeKeys Model's composite primary keys. Declaration List<IOrpheusBaseCompositeKeyAttribute> PrimaryCompositeKeys { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusBaseCompositeKeyAttribute > | Improve this Doc View Source PrimaryKeys Model's primary keys. Declaration Dictionary<string, IPrimaryKey> PrimaryKeys { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IPrimaryKey > | Improve this Doc View Source SchemaIgnoreProperties Model properties that are not part of the schema. Declaration List<string> SchemaIgnoreProperties { get; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source SQLName Model's SQLName. Defaults to the model's type name. Declaration string SQLName { get; } Property Value Type Description System.String | Improve this Doc View Source SQLServerSchemaName SQL server's schema name. Declaration string SQLServerSchemaName { get; } Property Value Type Description System.String | Improve this Doc View Source UniqueCompositeKeys Model's composite unique keys. Declaration List<IOrpheusBaseCompositeKeyAttribute> UniqueCompositeKeys { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusBaseCompositeKeyAttribute > | Improve this Doc View Source UniqueKeys Model's unique keys. Declaration Dictionary<string, IUniqueKey> UniqueKeys { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IUniqueKey > Methods | Improve this Doc View Source CreateInstance<T>() Creates an instance of the model and typecasts it to the given type. Declaration T CreateInstance<T>() Returns Type Description T Type Parameters Name Description T Type to cast the model | Improve this Doc View Source CreateSchemaFields(ISchemaDataObject) Creates schema fields and constraints for a model. Declaration void CreateSchemaFields(ISchemaDataObject schemaObj) Parameters Type Name Description ISchemaDataObject schemaObj | Improve this Doc View Source GetAlterDDLCommands(ISchemaDataObject, IOrpheusDDLHelper) Creates a list of SQL ALTER commands, based on the differences between the current version of the model and the current version of the corresponding db table. Declaration List<string> GetAlterDDLCommands(ISchemaDataObject schemaObj, IOrpheusDDLHelper ddlHelper) Parameters Type Name Description ISchemaDataObject schemaObj IOrpheusDDLHelper ddlHelper Returns Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source GetFieldNameForProperty(PropertyInfo) Helper function that returns the corresponding field name for a property. Declaration string GetFieldNameForProperty(PropertyInfo prop) Parameters Type Name Description System.Reflection.PropertyInfo prop Returns Type Description System.String | Improve this Doc View Source IsSchemaProperty(PropertyInfo) Helper function that returns true if the property is not actually part of the schema. Declaration bool IsSchemaProperty(PropertyInfo property) Parameters Type Name Description System.Reflection.PropertyInfo property Returns Type Description System.Boolean"
  },
  "api/OrpheusInterfaces.Core.IOrpheusDDLHelper.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusDDLHelper.html",
    "title": "Interface IOrpheusDDLHelper | Orpheus",
    "keywords": "Interface IOrpheusDDLHelper Abstract definition of DDL helper. DDL helper is used to execute DB engine specific DDL commands. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusDDLHelper Properties | Improve this Doc View Source ConnectionString Builds the connection string. Declaration string ConnectionString { get; } Property Value Type Description System.String | Improve this Doc View Source DatabaseName Gets the database name. Declaration string DatabaseName { get; } Property Value Type Description System.String | Improve this Doc View Source DB Database for the DDL helper. Declaration IOrpheusDatabase DB { get; set; } Property Value Type Description IOrpheusDatabase Database the helper is associated with | Improve this Doc View Source DbEngineType Returns the underlying connection type. Declaration DatabaseEngineType DbEngineType { get; } Property Value Type Description DatabaseEngineType | Improve this Doc View Source DelimitedIndetifierEnd Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. Declaration char DelimitedIndetifierEnd { get; } Property Value Type Description System.Char Char | Improve this Doc View Source DelimitedIndetifierStart Identifiers that do not comply with all of the rules for identifiers must be delimited in a SQL statement, enclosed in the DelimitedIdentifier char. Declaration char DelimitedIndetifierStart { get; } Property Value Type Description System.Char Char | Improve this Doc View Source ModifyColumnCommand Returns the DB specific modify table command. Declaration string ModifyColumnCommand { get; } Property Value Type Description System.String | Improve this Doc View Source SupportsGuidType Returns true if the DBEngine supports natively the Guid type. Declaration bool SupportsGuidType { get; } Property Value Type Description System.Boolean True if the DBEngine supports natively the Guid type | Improve this Doc View Source SupportsSchemaNameSpace Returns true if the DBEngine supports having schema name spaces. From the currently supported databases, only SQL has this feature. Declaration bool SupportsSchemaNameSpace { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CreateDatabase() Returns true if a database is successfully created using the underlying db engine settings. Declaration bool CreateDatabase() Returns Type Description System.Boolean True if database was created successfully | Improve this Doc View Source CreateDatabase(String) Returns true if a database is successfully created using the underlying db engine settings. Declaration bool CreateDatabase(string dbName) Parameters Type Name Description System.String dbName Database name Returns Type Description System.Boolean True if the database was created successfully | Improve this Doc View Source CreateDatabaseWithDDL(String) Returns true if a database is successfully created using the passed DDL script. Declaration bool CreateDatabaseWithDDL(string ddlString) Parameters Type Name Description System.String ddlString DDL command Returns Type Description System.Boolean True if the database was created successfully | Improve this Doc View Source DatabaseExists(String) Returns true the database exists. Declaration bool DatabaseExists(string dbName) Parameters Type Name Description System.String dbName Database name Returns Type Description System.Boolean | Improve this Doc View Source DbTypeToString(DbType) Returns the db engine specific string equivalent, for a DbType enumeration. Declaration string DbTypeToString(DbType dataType) Parameters Type Name Description System.Data.DbType dataType DbType Returns Type Description System.String String value for the DbType | Improve this Doc View Source SafeFormatAlterTableAddColumn(String, List<String>) Properly formats an ALTER TABLE ADD COLUMN command for the underlying database engine. Declaration string SafeFormatAlterTableAddColumn(string tableName, List<string> columnsToAdd) Parameters Type Name Description System.String tableName Table's name that schema is going to change System.Collections.Generic.List < System.String > columnsToAdd Columns for creation Returns Type Description System.String | Improve this Doc View Source SafeFormatAlterTableDropColumn(String, List<String>) Properly formats an ALTER TABLE DROP COLUMN command for the underlying database engine. Declaration string SafeFormatAlterTableDropColumn(string tableName, List<string> columnsToDelete) Parameters Type Name Description System.String tableName Table's name that schema is going to change System.Collections.Generic.List < System.String > columnsToDelete Columns for deletion Returns Type Description System.String | Improve this Doc View Source SafeFormatField(String) Properly formats a field name, to be used in a SQL statement, in case the field name is a reserved word. Declaration string SafeFormatField(string fieldName) Parameters Type Name Description System.String fieldName Field name Returns Type Description System.String Safely formated field name | Improve this Doc View Source SchemaObjectExists(ISchemaConstraint) Returns true if the schema object exists in the database. Declaration bool SchemaObjectExists(ISchemaConstraint schemaConstraint) Parameters Type Name Description ISchemaConstraint schemaConstraint Returns Type Description System.Boolean | Improve this Doc View Source SchemaObjectExists(ISchemaObject) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. Declaration bool SchemaObjectExists(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Schema Returns Type Description System.Boolean True if the object exists | Improve this Doc View Source SchemaObjectExists(String) Returns true if the schema object exists in the database. A schema object can be a table,view,primary key, stored procedure, etc. Declaration bool SchemaObjectExists(string schemaObjectName) Parameters Type Name Description System.String schemaObjectName Schema Returns Type Description System.Boolean True if the object exists | Improve this Doc View Source TypeToString(Type) Returns the db engine specific string equivalent, for a .net type Declaration string TypeToString(Type type) Parameters Type Name Description System.Type type Type Returns Type Description System.String String value for the mapped DbType"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaJoinDefinition.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaJoinDefinition.html",
    "title": "Class SchemaJoinDefinition | Orpheus",
    "keywords": "Class SchemaJoinDefinition Represents a schema join definition, which can be used by ISchemaObject when a schema is created. Inheritance System.Object SchemaJoinDefinition Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class SchemaJoinDefinition : ISchemaJoinDefinition Properties | Improve this Doc View Source JoinKeyField Key field name of the join object. Declaration public string JoinKeyField { get; set; } Property Value Type Description System.String Key field name of the join object | Improve this Doc View Source JoinOperator Join operator SchemaJoinOperator . Declaration public SchemaJoinOperator JoinOperator { get; set; } Property Value Type Description SchemaJoinOperator Join operator | Improve this Doc View Source JoinTableName Table name to perform the join. Declaration public string JoinTableName { get; set; } Property Value Type Description System.String | Improve this Doc View Source JoinType Type of join SchemaJoinType . Declaration public SchemaJoinType JoinType { get; set; } Property Value Type Description SchemaJoinType Type of join | Improve this Doc View Source KeyField Key field name of the main object. Declaration public string KeyField { get; set; } Property Value Type Description System.String Key field name of the main object Implements ISchemaJoinDefinition"
  },
  "api/OrpheusCore.OrpheusTableOptions.html": {
    "href": "api/OrpheusCore.OrpheusTableOptions.html",
    "title": "Class OrpheusTableOptions | Orpheus",
    "keywords": "Class OrpheusTableOptions Represents IOrpheusTable options, which can be used to instantiate a table. Inheritance System.Object OrpheusTableOptions Namespace : OrpheusCore Assembly : OrpheusCore.dll Syntax public class OrpheusTableOptions : IOrpheusTableOptions Constructors | Improve this Doc View Source OrpheusTableOptions() Constructor. Declaration public OrpheusTableOptions() Properties | Improve this Doc View Source Database Database the table belongs to. Declaration public IOrpheusDatabase Database { get; set; } Property Value Type Description IOrpheusDatabase | Improve this Doc View Source KeyFields List of the table's key fields. IOrpheusTableKeyField Declaration public List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > | Improve this Doc View Source MasterTable Optional. A master table that this table is associated with. Declaration public IOrpheusTable MasterTable { get; set; } Property Value Type Description IOrpheusTable | Improve this Doc View Source MasterTableKeyFields List of the master table's keys (if master table is defined). These are being used to support a master-detail relationship. Declaration public List<IOrpheusTableKeyField> MasterTableKeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > | Improve this Doc View Source MasterTableName Optional. A master table that this table is associated with. Declaration public string MasterTableName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ModelType Table's model type. Declaration [IgnoreDataMember] public Type ModelType { get; set; } Property Value Type Description System.Type | Improve this Doc View Source TableName Table's name. Declaration public string TableName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source AddKeyField(String, Boolean, Boolean, Func<String>) Creates a new key field. Declaration public void AddKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters Type Name Description System.String name System.Boolean isAutoGenerated System.Boolean isDBGenerated System.Func < System.String > keySQLUpdate | Improve this Doc View Source AddMasterKeyField(String, Boolean, Boolean, Func<String>) Creates a new master key field Declaration public void AddMasterKeyField(string name, bool isAutoGenerated = false, bool isDBGenerated = false, Func<string> keySQLUpdate = null) Parameters Type Name Description System.String name System.Boolean isAutoGenerated System.Boolean isDBGenerated System.Func < System.String > keySQLUpdate Implements IOrpheusTableOptions"
  },
  "api/OrpheusCore.OrpheusModule.html": {
    "href": "api/OrpheusCore.OrpheusModule.html",
    "title": "Class OrpheusModule | Orpheus",
    "keywords": "Class OrpheusModule OrpheusModule class represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. Inheritance System.Object OrpheusModule Namespace : OrpheusCore Assembly : OrpheusCore.dll Syntax public class OrpheusModule : IOrpheusModule Constructors | Improve this Doc View Source OrpheusModule(IOrpheusDatabase) OrpheusModule class represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. Declaration public OrpheusModule(IOrpheusDatabase database) Parameters Type Name Description IOrpheusDatabase database Module's database | Improve this Doc View Source OrpheusModule(IOrpheusDatabase, IOrpheusModuleDefinition) OrpheusModule class represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. Declaration public OrpheusModule(IOrpheusDatabase database, IOrpheusModuleDefinition definition) Parameters Type Name Description IOrpheusDatabase database Module's database. IOrpheusModuleDefinition definition Module definition. Properties | Improve this Doc View Source Database Module's database. Declaration public IOrpheusDatabase Database { get; } Property Value Type Description IOrpheusDatabase | Improve this Doc View Source Definition Module's definition. Declaration public IOrpheusModuleDefinition Definition { get; } Property Value Type Description IOrpheusModuleDefinition | Improve this Doc View Source MainTable The module's main table. Declaration public IOrpheusTable MainTable { get; set; } Property Value Type Description IOrpheusTable | Improve this Doc View Source ReferenceTables List of module's reference tables. Reference tables are auxiliary or lookup tables. Declaration public List<IOrpheusTable> ReferenceTables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > | Improve this Doc View Source Tables List of module's tables. Declaration public List<IOrpheusTable> Tables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > Methods | Improve this Doc View Source ClearData() Clears data from all module tables. Declaration public void ClearData() | Improve this Doc View Source GetReferenceTable<T>() Gets a table by model. Uses the model class name as the table name. Declaration public IOrpheusTable<T> GetReferenceTable<T>() Returns Type Description IOrpheusTable <T> Type Parameters Name Description T | Improve this Doc View Source GetReferenceTable<T>(Int32) Gets a reference table by index for a model Declaration public IOrpheusTable<T> GetReferenceTable<T>(int index) Parameters Type Name Description System.Int32 index Returns Type Description IOrpheusTable <T> Type Parameters Name Description T | Improve this Doc View Source GetReferenceTable<T>(String) Gets a reference table by name for a model Declaration public IOrpheusTable<T> GetReferenceTable<T>(string tableName) Parameters Type Name Description System.String tableName Returns Type Description IOrpheusTable <T> Type Parameters Name Description T | Improve this Doc View Source GetTable<T>() Gets a table by model. Uses the model class name as the table name. Declaration public IOrpheusTable<T> GetTable<T>() Returns Type Description IOrpheusTable <T> Type Parameters Name Description T | Improve this Doc View Source GetTable<T>(Int32) Gets a reference table by index for a model Declaration public IOrpheusTable<T> GetTable<T>(int index) Parameters Type Name Description System.Int32 index Returns Type Description IOrpheusTable <T> Type Parameters Name Description T | Improve this Doc View Source GetTable<T>(String) Gets a table by name for a model Declaration public IOrpheusTable<T> GetTable<T>(string tableName) Parameters Type Name Description System.String tableName Returns Type Description IOrpheusTable <T> Type Parameters Name Description T | Improve this Doc View Source Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) Loads records from the DB to the table. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields by default are bound with a logical OR. Defining a logical operator, you can change the default behavior. This applies only for the MainTable. Declaration public void Load(Dictionary<string, List<object>> keyValues, LogicalOperator logicalOperator = LogicalOperator.loOR, bool clearExistingData = true) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < System.Object >> keyValues LogicalOperator logicalOperator System.Boolean clearExistingData | Improve this Doc View Source Load(List<Object>) Loads a module's record from the database. Declaration public void Load(List<object> keyValues = null) Parameters Type Name Description System.Collections.Generic.List < System.Object > keyValues | Improve this Doc View Source Load(IDbCommand, Boolean) Loads main table data by executing a db command. Declaration public void Load(IDbCommand dbCommand, bool clearExistingData = true) Parameters Type Name Description System.Data.IDbCommand dbCommand System.Boolean clearExistingData | Improve this Doc View Source Save() Saves all changes to the database within a transaction. Declaration public void Save() Events | Improve this Doc View Source OnAfterSave Occurs after the transaction has been committed. Declaration public event EventHandler<ISaveEventArguments> OnAfterSave Event Type Type Description System.EventHandler < ISaveEventArguments > | Improve this Doc View Source OnBeforeSave Occurs before records are save in the database. Declaration public event EventHandler<ISaveEventArguments> OnBeforeSave Event Type Type Description System.EventHandler < ISaveEventArguments > Implements IOrpheusModule"
  },
  "api/OrpheusCore.ModelProperty.html": {
    "href": "api/OrpheusCore.ModelProperty.html",
    "title": "Delegate ModelProperty | Orpheus",
    "keywords": "Delegate ModelProperty Helper delegate, to be called when iterating through model's properties. Namespace : OrpheusCore Assembly : OrpheusCore.dll Syntax public delegate void ModelProperty(PropertyInfo property); Parameters Type Name Description System.Reflection.PropertyInfo property"
  },
  "api/OrpheusInterfaces.Schema.ISchemaTable.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaTable.html",
    "title": "Interface ISchemaTable | Orpheus",
    "keywords": "Interface ISchemaTable Create table schema interface. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaTable : ISchemaDataObject, ISchemaObject Properties | Improve this Doc View Source JoinDefinition Join definition. Defines how schema objects can be joined. Declaration ISchemaJoinDefinition JoinDefinition { get; set; } Property Value Type Description ISchemaJoinDefinition Join definition"
  },
  "api/OrpheusInterfaces.Schema.ISchemaObject.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaObject.html",
    "title": "Interface ISchemaObject | Orpheus",
    "keywords": "Interface ISchemaObject Base schema object interface. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaObject Properties | Improve this Doc View Source Action Defines the DDL action to be taken when schema objects are executed. Declaration DDLAction Action { get; set; } Property Value Type Description DDLAction Defines the DDL action to be taken when schema objects are executed | Improve this Doc View Source AliasName The schema object alias name. Declaration string AliasName { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsCreated True if the schema object is created in the DB. Declaration bool IsCreated { get; } Property Value Type Description System.Boolean True if the schema object is created in the DB | Improve this Doc View Source RawDDL If DDL is set all other fields and join schema objects are ignored. Dependencies still apply. Declaration string RawDDL { get; set; } Property Value Type Description System.String Set raw DDL for the schema object | Improve this Doc View Source Schema Schema where the schema object belongs to. Declaration ISchema Schema { get; set; } Property Value Type Description ISchema Schema where the schema object exists | Improve this Doc View Source SchemaObjectsThatDependOnMe Other schema objects that depend on this object. First it will iterate through the dependency list and run any schema object that is not yet destroyed. Declaration List<ISchemaObject> SchemaObjectsThatDependOnMe { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > Schema objects that depend on this object | Improve this Doc View Source SchemaObjectsThatIDepend Other schema objects that this object depends upon. First it will iterate through the dependency list and run any schema object that is not yet created. Declaration List<ISchemaObject> SchemaObjectsThatIDepend { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > Schema object that this object depends upon | Improve this Doc View Source SQLName The name of the schema object. Could be the name of a table or a view or a stored procedure. Declaration string SQLName { get; set; } Property Value Type Description System.String SQL name of the schema object | Improve this Doc View Source UniqueKey Unique generated when the object is created and saved in the DB. Declaration Guid UniqueKey { get; set; } Property Value Type Description System.Guid Schema object unique key Methods | Improve this Doc View Source AddDependency(ISchemaObject) Adds a dependency to a schema object. Declaration void AddDependency(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject | Improve this Doc View Source AddDependency(Type) Adds a dependency to a schema object based on the model type. Declaration void AddDependency(Type modelType) Parameters Type Name Description System.Type modelType | Improve this Doc View Source AddDependency<T>() Adds a dependency to a schema object based on the model type. Declaration void AddDependency<T>() where T : class Type Parameters Name Description T | Improve this Doc View Source Drop() Drops the schema object. Declaration void Drop() | Improve this Doc View Source Execute() Executes schema object. Declaration void Execute() | Improve this Doc View Source GetDDLString() Returns the DDL string to be executed. Declaration List<string> GetDDLString() Returns Type Description System.Collections.Generic.List < System.String > Get the generated DDL string for the schema object | Improve this Doc View Source GetSchemaType() Gets the schema type. Declaration SchemaObjectType GetSchemaType() Returns Type Description SchemaObjectType Schema type"
  },
  "api/OrpheusInterfaces.Schema.IForeignKeySchemaConstraint.html": {
    "href": "api/OrpheusInterfaces.Schema.IForeignKeySchemaConstraint.html",
    "title": "Interface IForeignKeySchemaConstraint | Orpheus",
    "keywords": "Interface IForeignKeySchemaConstraint A foreign key constraint. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface IForeignKeySchemaConstraint : ISchemaConstraint Properties | Improve this Doc View Source ForeignKeyFields Foreign key fields. Applicable only when key is of type ktForeign. Declaration List<string> ForeignKeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > List of key fields | Improve this Doc View Source ForeignKeySchemaObject Referenced table name. Applicable only when key is of type ktForeign. Declaration string ForeignKeySchemaObject { get; set; } Property Value Type Description System.String Constraint's key | Improve this Doc View Source OnDeleteCascade Cascade on delete. Declaration bool OnDeleteCascade { get; set; } Property Value Type Description System.Boolean True if cascade on delete is on | Improve this Doc View Source OnUpdateCascade Cascade on update. Declaration bool OnUpdateCascade { get; set; } Property Value Type Description System.Boolean True if cascade on update is on"
  },
  "api/OrpheusInterfaces.Schema.DDLAction.html": {
    "href": "api/OrpheusInterfaces.Schema.DDLAction.html",
    "title": "Enum DDLAction | Orpheus",
    "keywords": "Enum DDLAction DDL action. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public enum DDLAction Fields Name Description ddlAlter DDL alter. ddlCreate DDL create. ddlDrop DDL drop."
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.html",
    "title": "Namespace OrpheusInterfaces.Interfaces.Attributes | Orpheus",
    "keywords": "Namespace OrpheusInterfaces.Interfaces.Attributes Interfaces IForeignKey Orpheus foreign key attribute IOrpheusBaseAttribute Orpheus base attribute. IOrpheusBaseCompositeKeyAttribute Orpheus composite key attribute IPrimaryKey Orpheus primary key attribute IUniqueKey Orpheus unique key attribute"
  },
  "api/OrpheusInterfaces.Interfaces.Attributes.IUniqueKey.html": {
    "href": "api/OrpheusInterfaces.Interfaces.Attributes.IUniqueKey.html",
    "title": "Interface IUniqueKey | Orpheus",
    "keywords": "Interface IUniqueKey Orpheus unique key attribute Namespace : OrpheusInterfaces.Interfaces.Attributes Assembly : OrpheusInterfaces.dll Syntax public interface IUniqueKey : IOrpheusBaseAttribute"
  },
  "api/OrpheusCore.SchemaBuilder.Schema.html": {
    "href": "api/OrpheusCore.SchemaBuilder.Schema.html",
    "title": "Class Schema | Orpheus",
    "keywords": "Class Schema Represents an Orpheus Schema. Inheritance System.Object Schema Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class Schema : ISchema Constructors | Improve this Doc View Source Schema() Parameterless constructor. Declaration public Schema() | Improve this Doc View Source Schema(IOrpheusDatabase, String, Double, Guid) Creates an Orpheus schema. Declaration public Schema(IOrpheusDatabase db, string description, double version, Guid id) Parameters Type Name Description IOrpheusDatabase db Database instance that the schema belongs to. System.String description Schema description. System.Double version Schema version. System.Guid id Schema unique id | Improve this Doc View Source Schema(IOrpheusDatabase, String, Double, Guid, String) Creates an Orpheus schema. Declaration public Schema(IOrpheusDatabase db, string description, double version, Guid id, string name = null) Parameters Type Name Description IOrpheusDatabase db Database instance that the schema belongs to. System.String description Schema description. System.Double version Schema version. System.Guid id Schema unique id System.String name Schema name. If the DB engine is SQL server, name value if set, will be used as SCHEMA name. Properties | Improve this Doc View Source DB Orpheus database. Declaration public IOrpheusDatabase DB { get; } Property Value Type Description IOrpheusDatabase Instance of the Orpheus Database | Improve this Doc View Source Description Schema description. Declaration public string Description { get; protected set; } Property Value Type Description System.String Schema description | Improve this Doc View Source Id Schema Id. Declaration public Guid Id { get; } Property Value Type Description System.Guid Schema unique id | Improve this Doc View Source Name Schema name. Declaration public string Name { get; protected set; } Property Value Type Description System.String Schema description | Improve this Doc View Source ReferencedSchemas List of reference schemas Declaration public List<ISchema> ReferencedSchemas { get; set; } Property Value Type Description System.Collections.Generic.List < ISchema > | Improve this Doc View Source SchemaInfoTable Orpheus schema info table. Declaration public string SchemaInfoTable { get; } Property Value Type Description System.String | Improve this Doc View Source SchemaModulesTable Orpheus module definition table. Declaration public string SchemaModulesTable { get; } Property Value Type Description System.String Table name for the Orpheus schema modules table | Improve this Doc View Source SchemaObjects List of schema objects. ISchemaObject Declaration public List<ISchemaObject> SchemaObjects { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > | Improve this Doc View Source SchemaObjectsTable Orpheus schema objects table. Declaration public string SchemaObjectsTable { get; } Property Value Type Description System.String | Improve this Doc View Source Version Schema version. Declaration public double Version { get; protected set; } Property Value Type Description System.Double Schema version Methods | Improve this Doc View Source AddSchemaObject(ISchemaObject) Creates a schema object. Declaration public ISchemaObject AddSchemaObject(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Returns Type Description ISchemaObject | Improve this Doc View Source AddSchemaTable(Object, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration public ISchemaTable AddSchemaTable(object model, List<ISchemaObject> dependencies = null) Parameters Type Name Description System.Object model System.Collections.Generic.List < ISchemaObject > dependencies Returns Type Description ISchemaTable | Improve this Doc View Source AddSchemaTable(String, List<ISchemaObject>, Object) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration public ISchemaTable AddSchemaTable(string tableName, List<ISchemaObject> dependencies = null, object model = null) Parameters Type Name Description System.String tableName System.Collections.Generic.List < ISchemaObject > dependencies System.Object model Returns Type Description ISchemaTable | Improve this Doc View Source AddSchemaTable(Type, List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration public ISchemaTable AddSchemaTable(Type modelType, List<ISchemaObject> dependencies = null) Parameters Type Name Description System.Type modelType System.Collections.Generic.List < ISchemaObject > dependencies Returns Type Description ISchemaTable | Improve this Doc View Source AddSchemaTable<T>(List<ISchemaObject>) Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration public ISchemaTable AddSchemaTable<T>(List<ISchemaObject> dependencies = null) where T : class Parameters Type Name Description System.Collections.Generic.List < ISchemaObject > dependencies Returns Type Description ISchemaTable Type Parameters Name Description T | Improve this Doc View Source AddSchemaTable<T, D>() Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. Declaration public ISchemaTable AddSchemaTable<T, D>() Returns Type Description ISchemaTable Type Parameters Name Description T Model type D Dependency model type | Improve this Doc View Source CreateSchemaJoinDefinition() Creates a join schema definition. Declaration public ISchemaJoinDefinition CreateSchemaJoinDefinition() Returns Type Description ISchemaJoinDefinition | Improve this Doc View Source CreateSchemaObject() Creates a schema object. Declaration public ISchemaObject CreateSchemaObject() Returns Type Description ISchemaObject | Improve this Doc View Source CreateSchemaTable() Creates a table schema object. Declaration public ISchemaTable CreateSchemaTable() Returns Type Description ISchemaTable | Improve this Doc View Source CreateSchemaView() Creates a view schema object. Declaration public ISchemaView CreateSchemaView() Returns Type Description ISchemaView | Improve this Doc View Source CreateSchemaViewTable() Creates a view table schema object. Declaration public ISchemaViewTable CreateSchemaViewTable() Returns Type Description ISchemaViewTable | Improve this Doc View Source Drop() Drops schema. Removes all schema objects from the database. Declaration public void Drop() | Improve this Doc View Source Execute() Iterates through registered schema objects and executes them. Declaration public void Execute() | Improve this Doc View Source LoadFromFile(String) Loads schema definition from a file. Declaration public void LoadFromFile(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source RegisterSchema() Registers schema information, in the schema information table. Declaration public void RegisterSchema() | Improve this Doc View Source RemoveSchemaObject(ISchemaObject) Removes a schema object from the schema list. Declaration public void RemoveSchemaObject(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject | Improve this Doc View Source SaveToFile(String) Saves schema definition to a file. If the file exists it will overwrite it. Declaration public void SaveToFile(string fileName) Parameters Type Name Description System.String fileName | Improve this Doc View Source SchemaObjectExists(ISchemaObject) Declaration public Guid SchemaObjectExists(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject Returns Type Description System.Guid Implements ISchema"
  },
  "api/OrpheusCore.SchemaBuilder.PrimaryKeySchemaConstraint.html": {
    "href": "api/OrpheusCore.SchemaBuilder.PrimaryKeySchemaConstraint.html",
    "title": "Class PrimaryKeySchemaConstraint | Orpheus",
    "keywords": "Class PrimaryKeySchemaConstraint A primary key constraint. Inheritance System.Object PrimaryKeySchemaConstraint ForeignKeySchemaConstraint UniqueKeySchemaConstraint Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class PrimaryKeySchemaConstraint : IPrimaryKeySchemaConstraint, ISchemaConstraint Constructors | Improve this Doc View Source PrimaryKeySchemaConstraint(ISchemaDataObject) Creates a primary key constraint. Declaration public PrimaryKeySchemaConstraint(ISchemaDataObject schemaObject) Parameters Type Name Description ISchemaDataObject schemaObject Schema object where the constraint belong Properties | Improve this Doc View Source Action Returns true if the constraint needs to drop. Declaration public DDLAction Action { get; set; } Property Value Type Description DDLAction Constraint's DDLAction | Improve this Doc View Source ConstraintSQLCommand The constraint SQL command. UNIQUE, PRIMARY KEY etc. Declaration public string ConstraintSQLCommand { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source Fields Fields which the constraint will be applied. Declaration public List<string> Fields { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > Fields affected from the constraint | Improve this Doc View Source Name Constraint name. Declaration public string Name { get; set; } Property Value Type Description System.String Constraint name | Improve this Doc View Source SchemaObject Schema object were this schema constraint exists Declaration public ISchemaDataObject SchemaObject { get; } Property Value Type Description ISchemaDataObject The schema object where the constraint exists | Improve this Doc View Source Sort Key's sort direction. Declaration public SchemaSort Sort { get; set; } Property Value Type Description SchemaSort Schema sort type Methods | Improve this Doc View Source SQL() Returns the SQL definition of the key. Declaration public virtual string SQL() Returns Type Description System.String Constraint's SQL Implements IPrimaryKeySchemaConstraint ISchemaConstraint"
  },
  "api/OrpheusInterfaces.Core.IOrpheusTable-1.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusTable-1.html",
    "title": "Interface IOrpheusTable<T> | Orpheus",
    "keywords": "Interface IOrpheusTable<T> Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusTable<T> : IOrpheusTable Type Parameters Name Description T Model type Properties | Improve this Doc View Source Data Table's data. Declaration List<T> Data { get; } Property Value Type Description System.Collections.Generic.List <T> Table's data Methods | Improve this Doc View Source Add(T) Adds a new record to the table. Declaration void Add(T newRecord) Parameters Type Name Description T newRecord New record to be added | Improve this Doc View Source Add(List<T>) Adds a list of new records. Declaration void Add(List<T> newRecords) Parameters Type Name Description System.Collections.Generic.List <T> newRecords New records to be added | Improve this Doc View Source Delete(T) Deletes a record. Declaration void Delete(T record) Parameters Type Name Description T record Record to delete | Improve this Doc View Source Delete(List<T>) Deletes records. Declaration void Delete(List<T> records) Parameters Type Name Description System.Collections.Generic.List <T> records Records to be deleted | Improve this Doc View Source Update(T) Updates an existing record. Declaration void Update(T record) Parameters Type Name Description T record Record to be updated | Improve this Doc View Source Update(List<T>) Updates existing records. Declaration void Update(List<T> records) Parameters Type Name Description System.Collections.Generic.List <T> records Records to be updated Events | Improve this Doc View Source OnAfterModify Occurs after a table modifies a record. It is fired on any Add,Update,Delete Declaration event EventHandler<IModifyRecordEventArguments<T>> OnAfterModify Event Type Type Description System.EventHandler < IModifyRecordEventArguments <T>> | Improve this Doc View Source OnBeforeModify Occurs before a table modifies a record. It is fired on any Add,Update,Delete Declaration event EventHandler<IModifyRecordEventArguments<T>> OnBeforeModify Event Type Type Description System.EventHandler < IModifyRecordEventArguments <T>>"
  },
  "api/OrpheusInterfaces.Core.IOrpheusDatabase.html": {
    "href": "api/OrpheusInterfaces.Core.IOrpheusDatabase.html",
    "title": "Interface IOrpheusDatabase | Orpheus",
    "keywords": "Interface IOrpheusDatabase Orpheus database access component. Namespace : OrpheusInterfaces.Core Assembly : OrpheusInterfaces.dll Syntax public interface IOrpheusDatabase Properties | Improve this Doc View Source Connected State of the database. Connected or not. Declaration bool Connected { get; } Property Value Type Description System.Boolean True if database is connected | Improve this Doc View Source ConnectionString Gets the underlying IDbConnection connection string. Declaration string ConnectionString { get; } Property Value Type Description System.String The database connection string. | Improve this Doc View Source DatabaseConnectionConfiguration Database connection configuration. Declaration IDatabaseConnectionConfiguration DatabaseConnectionConfiguration { get; set; } Property Value Type Description IDatabaseConnectionConfiguration | Improve this Doc View Source DbConnection Exposing the underlying IDbConnection instance. Declaration IDbConnection DbConnection { get; } Property Value Type Description System.Data.IDbConnection | Improve this Doc View Source DDLHelper Helps execute DDL specific commands for the underlying db engine. Declaration IOrpheusDDLHelper DDLHelper { get; set; } Property Value Type Description IOrpheusDDLHelper An OrpheusDDLHelper instance. | Improve this Doc View Source LastActiveTransaction Last active transaction. Declaration IDbTransaction LastActiveTransaction { get; } Property Value Type Description System.Data.IDbTransaction | Improve this Doc View Source Modules List of registered Orpheus modules. Declaration List<IOrpheusModule> Modules { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusModule > Modules that are part in the database | Improve this Doc View Source TypeMap Mapping dictionary of types to data types. Declaration Dictionary<Type, DbType> TypeMap { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Data.DbType > Type map dictionary between types and DbType. Methods | Improve this Doc View Source BeginTransaction() Creates a transaction object. Declaration IDbTransaction BeginTransaction() Returns Type Description System.Data.IDbTransaction Returns a transaction instance | Improve this Doc View Source CommitTransaction(IDbTransaction) Commits a transaction. Declaration void CommitTransaction(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Transaction to be committed. | Improve this Doc View Source Connect(IDatabaseConnectionConfiguration) Connects to the database engine defined in the configuration object. Declaration void Connect(IDatabaseConnectionConfiguration databaseConnectionConfiguration) Parameters Type Name Description IDatabaseConnectionConfiguration databaseConnectionConfiguration | Improve this Doc View Source Connect(String) Connects to the database engine defined in the connection string. Declaration void Connect(string connectionString = null) Parameters Type Name Description System.String connectionString | Improve this Doc View Source CreateCommand() Create a DbCommand. Declaration IDbCommand CreateCommand() Returns Type Description System.Data.IDbCommand A DbCommand instance. | Improve this Doc View Source CreateModule(IOrpheusModuleDefinition) Creates an OrpheusModule. Declaration IOrpheusModule CreateModule(IOrpheusModuleDefinition definition = null) Parameters Type Name Description IOrpheusModuleDefinition definition Module definition Returns Type Description IOrpheusModule An IOrpheusModule instance | Improve this Doc View Source CreateModuleDefinition() Creates an OrpheusModuleDefinition. Declaration IOrpheusModuleDefinition CreateModuleDefinition() Returns Type Description IOrpheusModuleDefinition An IOrpheusModuleDefinition instance. | Improve this Doc View Source CreatePreparedQuery(String) Returns a prepared query with parameters created. Declaration IDbCommand CreatePreparedQuery(string SQL) Parameters Type Name Description System.String SQL SQL for the prepared query Returns Type Description System.Data.IDbCommand A DbCommand instance. | Improve this Doc View Source CreatePreparedQuery(String, List<String>, List<Object>) Returns a prepared query with parameters created. Declaration IDbCommand CreatePreparedQuery(string SQL, List<string> parameters, List<object> parameterValues = null) Parameters Type Name Description System.String SQL SQL for the prepared query System.Collections.Generic.List < System.String > parameters SQL parameters System.Collections.Generic.List < System.Object > parameterValues SQL parameter values Returns Type Description System.Data.IDbCommand A DbCommand instance. | Improve this Doc View Source CreateSchema(Guid, String, Double, String) Creates a schema object and sets it's database. Declaration ISchema CreateSchema(Guid id, string description, double version, string name = null) Parameters Type Name Description System.Guid id Schema id System.String description Schema description System.Double version Schema version System.String name Schema name.From the supported db engines, only SQL server has support for named schemas. Returns Type Description ISchema An ISchema instance. | Improve this Doc View Source CreateTable<T>() Creates a table and sets its database,using the type name as the table name. Declaration IOrpheusTable<T> CreateTable<T>() Returns Type Description IOrpheusTable <T> An Orpheus table instance. Type Parameters Name Description T | Improve this Doc View Source CreateTable<T>(IOrpheusTableOptions) Creates a table and sets its database. Declaration IOrpheusTable<T> CreateTable<T>(IOrpheusTableOptions options) Parameters Type Name Description IOrpheusTableOptions options Table options Returns Type Description IOrpheusTable <T> An Orpheus table instance. Type Parameters Name Description T Model type for table | Improve this Doc View Source CreateTable<T>(String, List<IOrpheusTableKeyField>) Creates a table and sets its database. Declaration IOrpheusTable<T> CreateTable<T>(string tableName, List<IOrpheusTableKeyField> keyFields = null) Parameters Type Name Description System.String tableName Table name System.Collections.Generic.List < IOrpheusTableKeyField > keyFields Table key fields Returns Type Description IOrpheusTable <T> An Orpheus table instance. Type Parameters Name Description T Model type for the table | Improve this Doc View Source CreateTableKeyField() Creates an OrpheusTableKeyField. Declaration IOrpheusTableKeyField CreateTableKeyField() Returns Type Description IOrpheusTableKeyField An IOrpheusTableKeyField instance. | Improve this Doc View Source CreateTableOptions() Creates an OrpheusTableOptions. Declaration IOrpheusTableOptions CreateTableOptions() Returns Type Description IOrpheusTableOptions An IOrpheusTableOptions instance. | Improve this Doc View Source DDLHelperAs<T>() Casts the DDL helper to the specified type. Declaration T DDLHelperAs<T>() Returns Type Description T An instance of T. Type Parameters Name Description T Type in which to cast the DDLHelper. Must be a descendant of IOrpheusDDLHelper. | Improve this Doc View Source Disconnect() Disconnects from the database engine. Declaration void Disconnect() | Improve this Doc View Source ExecuteDDL(String) Executes a DDL command. Declaration bool ExecuteDDL(string DDLCommand) Parameters Type Name Description System.String DDLCommand DbCommand to run. Returns Type Description System.Boolean True if command was successfully executed. | Improve this Doc View Source GetTableCount(String) Returns the row count of a table. Declaration long GetTableCount(string tableName) Parameters Type Name Description System.String tableName Returns Type Description System.Int64 | Improve this Doc View Source GetTableCount<T>() Returns the row count of a table. Declaration long GetTableCount<T>() Returns Type Description System.Int64 Type Parameters Name Description T | Improve this Doc View Source IsNullableType(Type) Returns true if the type is a nullable type. Declaration bool IsNullableType(Type type) Parameters Type Name Description System.Type type Type Returns Type Description System.Boolean True if type is nullable | Improve this Doc View Source RegisterModule(IOrpheusModule) Register an Orpheus module to the database. Declaration void RegisterModule(IOrpheusModule module) Parameters Type Name Description IOrpheusModule module Module to be registered | Improve this Doc View Source RollbackTransaction(IDbTransaction) Rolls back a transaction. Declaration void RollbackTransaction(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Transaction to be rolled-back. | Improve this Doc View Source SQL<T>(IDbCommand, String) Executes a db command and returns it as specific model. Declaration List<T> SQL<T>(IDbCommand dbCommand, string tableName = null) Parameters Type Name Description System.Data.IDbCommand dbCommand DbCommand to run. System.String tableName Optionally set the table name, for which the query will run. Returns Type Description System.Collections.Generic.List <T> A list of 'T' Type Parameters Name Description T | Improve this Doc View Source SQL<T>(String, String) Executes a SQL statement and returns it as specific model. Declaration List<T> SQL<T>(string SQL, string tableName = null) Parameters Type Name Description System.String SQL SQL command to execute. System.String tableName Table name. Returns Type Description System.Collections.Generic.List <T> A list of 'T' Type Parameters Name Description T"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaField.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaField.html",
    "title": "Class SchemaField | Orpheus",
    "keywords": "Class SchemaField Represents a schema field. Inheritance System.Object SchemaField Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class SchemaField : ISchemaField Constructors | Improve this Doc View Source SchemaField(ISchemaDataObject) Creates a schema field. Declaration public SchemaField(ISchemaDataObject schemaObject) Parameters Type Name Description ISchemaDataObject schemaObject Schema where the field belongs Properties | Improve this Doc View Source Alias Field alias. Declaration public string Alias { get; set; } Property Value Type Description System.String Field alias | Improve this Doc View Source DataType Field data type. Declaration public string DataType { get; set; } Property Value Type Description System.String Field data type | Improve this Doc View Source DefaultValue Field's default value. Declaration public string DefaultValue { get; set; } Property Value Type Description System.String Field's default value | Improve this Doc View Source FullFieldName Gets the full field name. Declaration public string FullFieldName { get; } Property Value Type Description System.String | Improve this Doc View Source Name Field name. Declaration public string Name { get; set; } Property Value Type Description System.String Field name | Improve this Doc View Source Nullable True if field accepts null values. Declaration public bool Nullable { get; set; } Property Value Type Description System.Boolean True if field accepts null values | Improve this Doc View Source SchemaObject Schema object where this schema field exists Declaration public ISchemaObject SchemaObject { get; } Property Value Type Description ISchemaObject Schema object where the field exists | Improve this Doc View Source Size Field size (if applicable). Declaration public string Size { get; set; } Property Value Type Description System.String Field size | Improve this Doc View Source TableName Table where the field belongs. Declaration public string TableName { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source SQL() Returns SQL definition for the field. Declaration public string SQL() Returns Type Description System.String SQL definition for the field Implements ISchemaField"
  },
  "api/OrpheusCore.OrpheusTableKeyField.html": {
    "href": "api/OrpheusCore.OrpheusTableKeyField.html",
    "title": "Class OrpheusTableKeyField | Orpheus",
    "keywords": "Class OrpheusTableKeyField Inheritance System.Object OrpheusTableKeyField Namespace : OrpheusCore Assembly : OrpheusCore.dll Syntax public class OrpheusTableKeyField : IOrpheusTableKeyField Properties | Improve this Doc View Source IsAutoGenerated If set to true and the type is System.Guid then with every new insert, a value will be auto generated. Declaration public bool IsAutoGenerated { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsDBGenerated True if the underlying db engine is going to generate the value for the key. Declaration public bool IsDBGenerated { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source KeySQLUpdate Function that returns a SQL string to used to select the new key value after an insert. Declaration public Func<string> KeySQLUpdate { get; set; } Property Value Type Description System.Func < System.String > | Improve this Doc View Source Name Name of the field that is the table key. Declaration public string Name { get; set; } Property Value Type Description System.String Implements IOrpheusTableKeyField"
  },
  "api/OrpheusAttributes.OrpheusCompositeKeyBaseAttribute.html": {
    "href": "api/OrpheusAttributes.OrpheusCompositeKeyBaseAttribute.html",
    "title": "Class OrpheusCompositeKeyBaseAttribute | Orpheus",
    "keywords": "Class OrpheusCompositeKeyBaseAttribute Composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. Inheritance System.Object System.Attribute OrpheusBaseAttribute OrpheusCompositeKeyBaseAttribute PrimaryCompositeKey UniqueCompositeKey Namespace : OrpheusAttributes Assembly : OrpheusAttributes.dll Syntax public class OrpheusCompositeKeyBaseAttribute : OrpheusBaseAttribute, IOrpheusBaseCompositeKeyAttribute, IOrpheusBaseAttribute Constructors | Improve this Doc View Source OrpheusCompositeKeyBaseAttribute(String[], String) Create a OrpheusCompositeKeyBaseAttribute. Declaration public OrpheusCompositeKeyBaseAttribute(string[] fields, string sort = null) Parameters Type Name Description System.String [] fields Fields that are the key System.String sort Sort direction for the key Properties | Improve this Doc View Source Fields List of fields that are the key. Declaration public string[] Fields { get; } Property Value Type Description System.String [] Array of field names | Improve this Doc View Source Sort Sort for the key. Declaration public string Sort { get; } Property Value Type Description System.String Sort direction Implements IOrpheusBaseCompositeKeyAttribute IOrpheusBaseAttribute"
  },
  "about/about.html": {
    "href": "about/about.html",
    "title": "| Orpheus",
    "keywords": ""
  },
  "examples/update_single_table.html": {
    "href": "examples/update_single_table.html",
    "title": "| Orpheus",
    "keywords": "Using a single OrpheusTable = var sqlServerConnectionString = @\"Data Source=[yourserver];Initial Catalog=orpheusTestDB;Integrated Security=True\"; var db = OrpheusIocContainer.Resolve<IOrpheusDatabase>(); //Connect to the database. db.Connect(sqlServerConnectionString); //create a table options object and create the orpheus table. var tableOptions = OrpheusIocContainer.Resolve<IOrpheusTableOptions>(); tableOptions.TableName = \"TestModelUser\"; tableOptions.KeyFields = new List<IOrpheusTableKeyField>(); var usersTable = this.Database.CreateTable<TestModelUser>(tableOptions); //add one or more TestModelUser records usersTable.Add(TestDatabase.GetRandomUsersForTesting(recordCount)); IDbTransaction trans = this.Database.BeginTransaction(); try { usersTable.ExecuteInserts(trans); trans.Commit(); } catch(Exception e) { trans.Rollback(); throw e; }"
  },
  "examples/update_module.html": {
    "href": "examples/update_module.html",
    "title": "Using an OrpheusModule | Orpheus",
    "keywords": "Using an OrpheusModule var sqlServerConnectionString = @\"Data Source=[yourserver];Initial Catalog=orpheusTestDB;Integrated Security=True\"; var db = OrpheusIocContainer.Resolve<IOrpheusDatabase>(); //Connect to the database. db.Connect(sqlServerConnectionString); var module = OrpheusIocContainer.Resolve<IOrpheusModule>(new ResolverOverride[] { new ParameterOverride(\"database\",db) }); module.ReferenceTables.Add(this.Database.CreateTable<TestModelTransactor>(\"TestModelTransactor\")); module.ReferenceTables.Add(this.Database.CreateTable<TestModelItem>(\"TestModelItem\")); module.Tables.Add(this.Database.CreateTable<TestModelOrder>(\"TestModelOrder\")); var order = module.GetTable<TestModelOrder>(\"TestModelOrder\"); var orderLineOptions = OrpheusIocContainer.Resolve<IOrpheusTableOptions>(); orderLineOptions.TableName = \"TestModelOrderLine\"; orderLineOptions.MasterTableKeyFields = new List<IOrpheusTableKeyField>(); orderLineOptions.Database = this.Database; var orderMasterKeyField = OrpheusIocContainer.Resolve<IOrpheusTableKeyField>(); orderMasterKeyField.Name = \"OrderId\"; orderLineOptions.MasterTableKeyFields.Add(orderMasterKeyField); orderLineOptions.MasterTableName = \"TestModelOrder\"; module.Tables.Add(this.Database.CreateTable<TestModelOrderLine>(orderLineOptions)); var transactors = module.GetReferenceTable<TestModelTransactor>(\"TestModelTransactor\"); var items = module.GetReferenceTable<TestModelItem>(\"TestModelItem\"); var orderLines = module.GetTable<TestModelOrderLine>(\"TestModelOrderLine\"); orderLines.MasterTable = order; //populating auxiliary data. transactors.Add(GetTransactors()); items.Add(GetItems()); using(var tr = db.BeginTransaction()) { transactors.ExecuteInserts(tr); items.ExecuteInserts(tr); try { tr.Commit(); } catch { throw; } } //loading auxiliary data in memory. transactors.Load(); items.Load(); order.Add(new TestModelOrder() { OrderId = Guid.NewGuid(), OrderDateTime = DateTime.Now, TransactorId = transactors.Data.First().TransactorId }); orderLines.Add(new TestModelOrderLine() { ItemId = items.Data.First().ItemId, OrderLineId = Guid.NewGuid(), Price = 5, Quantity = 10, TotalPrice = 50 }); //saving the module will save both _Order_ and *OrderLine* tables module.Save();"
  },
  "examples/define_dbengine.html": {
    "href": "examples/define_dbengine.html",
    "title": "Defining database engine | Orpheus",
    "keywords": "Defining database engine OrpheusORM uses Unity in order to have the same code base for all supported database engines. To configure which database engine to use, you need only to update the unity configuration section with the appropriate types. SQL Server <unity xmlns=\"http://schemas.microsoft.com/practices/2010/unityx\"> <assembly name=\"System.Data,4.0.0.0 ,Culture=neutral,PublicKeyToken=b77a5c561934e089\"/> <alias alias=\"IDbConnection\" type=\"System.Data.IDbConnection, System.Data\"/> <alias alias=\"SqlConnection\" type=\"System.Data.SqlClient.SqlConnection, System.Data\"/> <register type=\"IDbConnection\" mapTo=\"SqlConnection\"> <constructor/> </register> MySQL <unity xmlns=\"http://schemas.microsoft.com/practices/2010/unityx\"> <assembly name=\"System.Data,4.0.0.0 ,Culture=neutral,PublicKeyToken=b77a5c561934e089\"/> <alias alias=\"IDbConnection\" type=\"System.Data.IDbConnection, System.Data\"/> <alias alias=\"MySqlConnection\" type=\"MySql.Data.MySqlClient.MySqlConnection, MySql.Data\"/> <register type=\"IDbConnection\" mapTo=\"MySqlConnection\"> <constructor/> </register>"
  },
  "index.html": {
    "href": "index.html",
    "title": "Orpheus ORM | Orpheus",
    "keywords": ""
  },
  "api/OrpheusCore.SchemaBuilder.SchemaObjectTable.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaObjectTable.html",
    "title": "Class SchemaObjectTable | Orpheus",
    "keywords": "Class SchemaObjectTable Derived class to specifically handle TABLE type schema objects. Inheritance System.Object SchemaObject SchemaDataObject SchemaObjectTable SchemaObjectViewTable Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class SchemaObjectTable : SchemaDataObject, ISchemaTable, ISchemaDataObject, ISchemaObject Constructors | Improve this Doc View Source SchemaObjectTable() Constructor. Declaration public SchemaObjectTable() Properties | Improve this Doc View Source JoinDefinition Table's Join definition. How and if this table is connected to other tables. Declaration public ISchemaJoinDefinition JoinDefinition { get; set; } Property Value Type Description ISchemaJoinDefinition Methods | Improve this Doc View Source applyConstraints(IDbCommand) Applies schema's constraints. Declaration protected override void applyConstraints(IDbCommand cmd) Parameters Type Name Description System.Data.IDbCommand cmd Overrides SchemaDataObject.applyConstraints(IDbCommand) | Improve this Doc View Source createDDLString() Creates the DDL string for the schema object. Declaration protected override List<string> createDDLString() Returns Type Description System.Collections.Generic.List < System.String > Overrides SchemaObject.createDDLString() | Improve this Doc View Source getType() Gets the SchemaObjectType . Declaration protected override SchemaObjectType getType() Returns Type Description SchemaObjectType Overrides SchemaObject.getType() | Improve this Doc View Source seedData(IDbCommand) Seeds the table with initial data. Declaration protected override void seedData(IDbCommand cmd) Parameters Type Name Description System.Data.IDbCommand cmd Overrides SchemaDataObject.seedData(IDbCommand) Implements ISchemaTable ISchemaDataObject ISchemaObject"
  },
  "api/OrpheusCore.SchemaBuilder.SchemaObject.html": {
    "href": "api/OrpheusCore.SchemaBuilder.SchemaObject.html",
    "title": "Class SchemaObject | Orpheus",
    "keywords": "Class SchemaObject Base schema object. Inheritance System.Object SchemaObject SchemaDataObject Namespace : OrpheusCore.SchemaBuilder Assembly : OrpheusCore.dll Syntax public class SchemaObject : ISchemaObject Constructors | Improve this Doc View Source SchemaObject() Schema object parameterless constructor. Declaration public SchemaObject() Fields | Improve this Doc View Source _sqlName Declaration protected string _sqlName Field Value Type Description System.String | Improve this Doc View Source logger Declaration protected ILogger logger Field Value Type Description Microsoft.Extensions.Logging.ILogger Properties | Improve this Doc View Source Action Defines the behavior of execute. DDLAction Declaration public DDLAction Action { get; set; } Property Value Type Description DDLAction | Improve this Doc View Source AliasName The schema object alias name. Declaration public string AliasName { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsCreated Flag to indicate if the schema object has actually been created in the database. Declaration public bool IsCreated { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source RawDDL Overrides any schema object configuration and executes RawDLL contents. Declaration public string RawDDL { get; set; } Property Value Type Description System.String | Improve this Doc View Source Schema The Schema where the schema object belongs to. Declaration public ISchema Schema { get; set; } Property Value Type Description ISchema | Improve this Doc View Source SchemaObjectsThatDependOnMe A list of other schema objects that depend on this instance. Declaration public List<ISchemaObject> SchemaObjectsThatDependOnMe { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > | Improve this Doc View Source SchemaObjectsThatIDepend A list of other schema objects that this instance depends upon. Any schema object in this list will be executed before, to make sure that on the time of creation they will be available/created. Declaration public List<ISchemaObject> SchemaObjectsThatIDepend { get; set; } Property Value Type Description System.Collections.Generic.List < ISchemaObject > | Improve this Doc View Source SQLName The SQL name for the schema. This will be used to actually create the schema object in the database. Declaration public string SQLName { get; set; } Property Value Type Description System.String | Improve this Doc View Source UniqueKey An Id to uniquely identify this schema object. Declaration public Guid UniqueKey { get; set; } Property Value Type Description System.Guid Methods | Improve this Doc View Source AddDependency(ISchemaObject) Adds a dependency to a schema object. Declaration public void AddDependency(ISchemaObject schemaObject) Parameters Type Name Description ISchemaObject schemaObject | Improve this Doc View Source AddDependency(Type) Adds a dependency to a schema object based on the model. Declaration public void AddDependency(Type modelType) Parameters Type Name Description System.Type modelType | Improve this Doc View Source AddDependency<T>() Adds a dependency to a schema object based on the model type. Declaration public void AddDependency<T>() where T : class Type Parameters Name Description T | Improve this Doc View Source canExecuteSchema() Returns true if the schema can be executed. Declaration protected virtual bool canExecuteSchema() Returns Type Description System.Boolean | Improve this Doc View Source createDDLString() Creates the DDL string for the schema object. Declaration protected virtual List<string> createDDLString() Returns Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source Drop() Drops the schema object. Declaration public virtual void Drop() | Improve this Doc View Source Execute() Creates schema object. Declaration public virtual void Execute() | Improve this Doc View Source formatLoggerMessage(String) Formats the logger's message. Declaration protected string formatLoggerMessage(string message) Parameters Type Name Description System.String message Returns Type Description System.String | Improve this Doc View Source formatSQLName() Returns formatted the SQL name for the object, including schema name and/or alias name, if defined. Declaration protected virtual string formatSQLName() Returns Type Description System.String | Improve this Doc View Source GetDDLString() Generate the schema DDL string. Declaration public List<string> GetDDLString() Returns Type Description System.Collections.Generic.List < System.String > Returns the DDL string ready to be executed. | Improve this Doc View Source GetSchemaType() Schema Type Declaration public SchemaObjectType GetSchemaType() Returns Type Description SchemaObjectType Returns SchemaObjectType | Improve this Doc View Source getType() Returns the schema type. Declaration protected virtual SchemaObjectType getType() Returns Type Description SchemaObjectType Returns SchemaObjectType | Improve this Doc View Source registerSchema(IDbTransaction) Registers an Orpheus schema. Declaration protected virtual void registerSchema(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source unRegisterSchema(IDbTransaction) Unregisters an Orpheus schema. Declaration protected virtual void unRegisterSchema(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction Implements ISchemaObject"
  },
  "api/OrpheusCore.OrpheusTable-1.html": {
    "href": "api/OrpheusCore.OrpheusTable-1.html",
    "title": "Class OrpheusTable<T> | Orpheus",
    "keywords": "Class OrpheusTable<T> Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. Inheritance System.Object OrpheusTable<T> Namespace : OrpheusCore Assembly : OrpheusCore.dll Syntax public class OrpheusTable<T> : IOrpheusTable<T>, IOrpheusTable Type Parameters Name Description T Model type Constructors | Improve this Doc View Source OrpheusTable(IOrpheusDatabase, List<IOrpheusTableKeyField>, String, IOrpheusTable, List<IOrpheusTableKeyField>) Orpheus table constructor. Declaration public OrpheusTable(IOrpheusDatabase database, List<IOrpheusTableKeyField> keyFields, string tableName = null, IOrpheusTable masterTable = null, List<IOrpheusTableKeyField> masterTableKeyFields = null) Parameters Type Name Description IOrpheusDatabase database Orpheus database System.Collections.Generic.List < IOrpheusTableKeyField > keyFields Table key fields. System.String tableName Table name IOrpheusTable masterTable Master table (optional) System.Collections.Generic.List < IOrpheusTableKeyField > masterTableKeyFields Master table key fields (optional) | Improve this Doc View Source OrpheusTable(IOrpheusTableOptions) Declaration public OrpheusTable(IOrpheusTableOptions options) Parameters Type Name Description IOrpheusTableOptions options Properties | Improve this Doc View Source Data Table's currently loaded data. Declaration public List<T> Data { get; } Property Value Type Description System.Collections.Generic.List <T> | Improve this Doc View Source DetailTables Associated detail tables. Declaration public List<IOrpheusTable> DetailTables { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTable > | Improve this Doc View Source KeyFields Table key fields. Declaration public List<IOrpheusTableKeyField> KeyFields { get; set; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > | Improve this Doc View Source Level Table level. Declaration public int Level { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MasterTable Associated master table. Declaration public IOrpheusTable MasterTable { get; set; } Property Value Type Description IOrpheusTable | Improve this Doc View Source MasterTableKeyFields Table master table's key fields. Declaration public List<IOrpheusTableKeyField> MasterTableKeyFields { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusTableKeyField > | Improve this Doc View Source Modified Modified flag. Declaration public bool Modified { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Table name. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source SchemaName The table's schema name. Applicable only if the db engine is SQL Server. Declaration public string SchemaName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Add(T) Adds a new record. Declaration public void Add(T newRecord) Parameters Type Name Description T newRecord | Improve this Doc View Source Add(List<T>) Adds new records. Declaration public void Add(List<T> newRecords) Parameters Type Name Description System.Collections.Generic.List <T> newRecords | Improve this Doc View Source ClearData() Clears existing loaded data. Declaration public void ClearData() | Improve this Doc View Source Delete(T) Deletes an existing record. Declaration public void Delete(T record) Parameters Type Name Description T record | Improve this Doc View Source Delete(List<T>) Deletes existing records. Declaration public void Delete(List<T> records) Parameters Type Name Description System.Collections.Generic.List <T> records | Improve this Doc View Source executeDelete(IDbTransaction) Executes deletes. Declaration protected void executeDelete(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source ExecuteDeletes(IDbTransaction) Executes deletes. Declaration public void ExecuteDeletes(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source executeInsert(IDbTransaction) Executes inserts. Declaration protected void executeInsert(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source ExecuteInserts(IDbTransaction) Executes inserts. Declaration public void ExecuteInserts(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source executeUpdate(IDbTransaction) Executes updates. Declaration protected void executeUpdate(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source ExecuteUpdates(IDbTransaction) Executes updates. Declaration public void ExecuteUpdates(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source GetKeyValues() Returns list of currently loaded key values. It's purpose is to be used on a master-detail schema where this will be used from the detail tables in order to load their data based on the current master record. It's highly inadvisable to be used outside this scope. Declaration public List<KeyValuePair<string, object>> GetKeyValues() Returns Type Description System.Collections.Generic.List < System.Collections.Generic.KeyValuePair < System.String , System.Object >> | Improve this Doc View Source Load(Dictionary<String, List<Object>>, LogicalOperator, Boolean) Loads records from the DB to the table. You can configure having multiple fields and multiple values per field. Multiple field values are bound with a logical OR. Multiple fields by default are bound with a logical OR. Defining a logical operator, you can change the default behavior. Declaration public void Load(Dictionary<string, List<object>> keyValues = null, LogicalOperator logicalOperator = LogicalOperator.loOR, bool clearExistingData = true) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < System.Object >> keyValues LogicalOperator logicalOperator System.Boolean clearExistingData | Improve this Doc View Source Load(List<Object>, Boolean) Loads data from the DB to the table. Implicitly on the table key field. Declaration public void Load(List<object> keyValues = null, bool clearExistingData = true) Parameters Type Name Description System.Collections.Generic.List < System.Object > keyValues Key values System.Boolean clearExistingData If true, clears existing loaded data. | Improve this Doc View Source Load(IDbCommand, Boolean) Loads table data by executing a db command. Declaration public void Load(IDbCommand dbCommand, bool clearExistingData = true) Parameters Type Name Description System.Data.IDbCommand dbCommand System.Boolean clearExistingData | Improve this Doc View Source Load(String, Boolean) Loads table data by executing a SQL command. Declaration public void Load(string SQL, bool clearExistingData = true) Parameters Type Name Description System.String SQL System.Boolean clearExistingData | Improve this Doc View Source Save(IDbTransaction, Boolean) Save changes to the database. Declaration public void Save(IDbTransaction dbTransaction = null, bool commitTransaction = true) Parameters Type Name Description System.Data.IDbTransaction dbTransaction Transaction in which the commands will be executed System.Boolean commitTransaction Commit transaction after save. | Improve this Doc View Source Update(T) Updates an existing record. Declaration public void Update(T record) Parameters Type Name Description T record | Improve this Doc View Source Update(List<T>) Updates existing records. Declaration public void Update(List<T> records) Parameters Type Name Description System.Collections.Generic.List <T> records Events | Improve this Doc View Source OnAfterModify Occurs after a table modifies a record. It is fired on any Add,Update,Delete Declaration public event EventHandler<IModifyRecordEventArguments<T>> OnAfterModify Event Type Type Description System.EventHandler < IModifyRecordEventArguments <T>> | Improve this Doc View Source OnAfterSave Occurs after the transaction has been committed. Declaration public event EventHandler<ISaveEventArguments> OnAfterSave Event Type Type Description System.EventHandler < ISaveEventArguments > | Improve this Doc View Source OnBeforeModify Occurs before a table modifies a record. It is fired on any Add,Update,Delete Declaration public event EventHandler<IModifyRecordEventArguments<T>> OnBeforeModify Event Type Type Description System.EventHandler < IModifyRecordEventArguments <T>> | Improve this Doc View Source OnBeforeSave Occurs before records are save in the database. Declaration public event EventHandler<ISaveEventArguments> OnBeforeSave Event Type Type Description System.EventHandler < ISaveEventArguments > Implements IOrpheusTable<T> IOrpheusTable"
  },
  "api/OrpheusCore.OrpheusDatabase.html": {
    "href": "api/OrpheusCore.OrpheusDatabase.html",
    "title": "Class OrpheusDatabase | Orpheus",
    "keywords": "Class OrpheusDatabase Orpheus database. Inheritance System.Object OrpheusDatabase Namespace : OrpheusCore Assembly : OrpheusCore.dll Syntax public class OrpheusDatabase : IOrpheusDatabase Constructors | Improve this Doc View Source OrpheusDatabase(IDbConnection, IOrpheusDDLHelper, ILogger) Creates an Orpheus database. Declaration public OrpheusDatabase(IDbConnection connection, IOrpheusDDLHelper ddlHelper, ILogger logger) Parameters Type Name Description System.Data.IDbConnection connection Database connection IOrpheusDDLHelper ddlHelper DDL helper Microsoft.Extensions.Logging.ILogger logger Logger Properties | Improve this Doc View Source Connected State of the database. Connected or not. Declaration public bool Connected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ConnectionString Gets the underlying IDbConnection connection string. Declaration public string ConnectionString { get; } Property Value Type Description System.String | Improve this Doc View Source DatabaseConnectionConfiguration Database connection configuration. Declaration public IDatabaseConnectionConfiguration DatabaseConnectionConfiguration { get; set; } Property Value Type Description IDatabaseConnectionConfiguration | Improve this Doc View Source DbConnection Exposing the underlying IDbConnection instance. Declaration public IDbConnection DbConnection { get; } Property Value Type Description System.Data.IDbConnection | Improve this Doc View Source DDLHelper Declaration public IOrpheusDDLHelper DDLHelper { get; set; } Property Value Type Description IOrpheusDDLHelper | Improve this Doc View Source LastActiveTransaction Last active transaction. Declaration public IDbTransaction LastActiveTransaction { get; } Property Value Type Description System.Data.IDbTransaction | Improve this Doc View Source Modules List of registered Orpheus modules. Declaration public List<IOrpheusModule> Modules { get; } Property Value Type Description System.Collections.Generic.List < IOrpheusModule > | Improve this Doc View Source TypeMap Is dictionary map between .net data types and DBTypes. Declaration public Dictionary<Type, DbType> TypeMap { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Data.DbType > Methods | Improve this Doc View Source BeginTransaction() Creates a transaction. Declaration public IDbTransaction BeginTransaction() Returns Type Description System.Data.IDbTransaction | Improve this Doc View Source CommitTransaction(IDbTransaction) Commits a transaction. Declaration public void CommitTransaction(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source Connect(IDatabaseConnectionConfiguration) Connects to the database engine defined in the configuration object. Declaration public void Connect(IDatabaseConnectionConfiguration databaseConnectionConfiguration) Parameters Type Name Description IDatabaseConnectionConfiguration databaseConnectionConfiguration | Improve this Doc View Source Connect(String) Connects to the database engine defined in the connection string. Declaration public void Connect(string connectionString = null) Parameters Type Name Description System.String connectionString | Improve this Doc View Source CreateCommand() Creates a DbCommand. Declaration public IDbCommand CreateCommand() Returns Type Description System.Data.IDbCommand | Improve this Doc View Source CreateModule(IOrpheusModuleDefinition) Creates an OrpheusModule. Declaration public IOrpheusModule CreateModule(IOrpheusModuleDefinition definition = null) Parameters Type Name Description IOrpheusModuleDefinition definition Returns Type Description IOrpheusModule | Improve this Doc View Source CreateModuleDefinition() Creates an OrpheusModuleDefinition. Declaration public IOrpheusModuleDefinition CreateModuleDefinition() Returns Type Description IOrpheusModuleDefinition | Improve this Doc View Source CreatePreparedQuery(String) Returns a prepared query command. Declaration public IDbCommand CreatePreparedQuery(string SQL) Parameters Type Name Description System.String SQL SQL query to prepare Returns Type Description System.Data.IDbCommand | Improve this Doc View Source CreatePreparedQuery(String, List<String>, List<Object>) Returns a prepared query command. Declaration public IDbCommand CreatePreparedQuery(string SQL, List<string> parameters, List<object> parameterValues = null) Parameters Type Name Description System.String SQL SQL query to prepare System.Collections.Generic.List < System.String > parameters List of query parameters System.Collections.Generic.List < System.Object > parameterValues List of query parameter values Returns Type Description System.Data.IDbCommand | Improve this Doc View Source CreateSchema(Guid, String, Double, String) Creates a schema object. Declaration public ISchema CreateSchema(Guid id, string description, double version, string name = null) Parameters Type Name Description System.Guid id System.String description System.Double version System.String name Returns Type Description ISchema | Improve this Doc View Source CreateTable<T>() Creates an OrpheusTable, using the type name as the table name. Declaration public IOrpheusTable<T> CreateTable<T>() Returns Type Description IOrpheusTable <T> Type Parameters Name Description T | Improve this Doc View Source CreateTable<T>(IOrpheusTableOptions) Creates an OrpheusTable. Declaration public IOrpheusTable<T> CreateTable<T>(IOrpheusTableOptions options) Parameters Type Name Description IOrpheusTableOptions options Returns Type Description IOrpheusTable <T> Type Parameters Name Description T | Improve this Doc View Source CreateTable<T>(String, List<IOrpheusTableKeyField>) Creates an OrpheusTable. Declaration public IOrpheusTable<T> CreateTable<T>(string tableName, List<IOrpheusTableKeyField> keyFields = null) Parameters Type Name Description System.String tableName Table name System.Collections.Generic.List < IOrpheusTableKeyField > keyFields Table key fields Returns Type Description IOrpheusTable <T> Type Parameters Name Description T | Improve this Doc View Source CreateTableKeyField() Creates an OrpheusTableKeyField. Declaration public IOrpheusTableKeyField CreateTableKeyField() Returns Type Description IOrpheusTableKeyField | Improve this Doc View Source CreateTableOptions() Creates an OrpheusTableOptions. Declaration public IOrpheusTableOptions CreateTableOptions() Returns Type Description IOrpheusTableOptions | Improve this Doc View Source DDLHelperAs<T>() Casts the DDL helper to the specified type. Declaration public T DDLHelperAs<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Disconnect() Disconnects from the database engine. Declaration public void Disconnect() | Improve this Doc View Source ExecuteDDL(String) Executes a DDL command. Declaration public bool ExecuteDDL(string DDLCommand) Parameters Type Name Description System.String DDLCommand Returns Type Description System.Boolean | Improve this Doc View Source GetTableCount(String) Returns the row count of a table. Declaration public long GetTableCount(string tableName) Parameters Type Name Description System.String tableName Returns Type Description System.Int64 | Improve this Doc View Source GetTableCount<T>() Returns the row count of a table. Declaration public long GetTableCount<T>() Returns Type Description System.Int64 Type Parameters Name Description T | Improve this Doc View Source IsNullableType(Type) Returns true if the type is in the list of nullable types. Declaration public bool IsNullableType(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source RegisterModule(IOrpheusModule) Register an Orpheus module to the database. Declaration public void RegisterModule(IOrpheusModule module) Parameters Type Name Description IOrpheusModule module | Improve this Doc View Source RollbackTransaction(IDbTransaction) Rolls back a transaction. Declaration public void RollbackTransaction(IDbTransaction transaction) Parameters Type Name Description System.Data.IDbTransaction transaction | Improve this Doc View Source SQL<T>(IDbCommand, String) Executes a db command and returns it as specific model. Declaration public List<T> SQL<T>(IDbCommand dbCommand, string tableName = null) Parameters Type Name Description System.Data.IDbCommand dbCommand System.String tableName Returns Type Description System.Collections.Generic.List <T> Type Parameters Name Description T | Improve this Doc View Source SQL<T>(String, String) Executes a SQL statement and returns it as specific model. Declaration public List<T> SQL<T>(string SQL, string tableName = null) Parameters Type Name Description System.String SQL System.String tableName Returns Type Description System.Collections.Generic.List <T> Type Parameters Name Description T Implements IOrpheusDatabase"
  },
  "api/OrpheusCore.Configuration.ServiceProviderItem.html": {
    "href": "api/OrpheusCore.Configuration.ServiceProviderItem.html",
    "title": "Class ServiceProviderItem | Orpheus",
    "keywords": "Class ServiceProviderItem Service DI configuration item. Inheritance System.Object ServiceProviderItem Namespace : OrpheusCore.Configuration Assembly : OrpheusCore.dll Syntax public class ServiceProviderItem Constructors | Improve this Doc View Source ServiceProviderItem() Creates a ServiceProviderItem. Declaration public ServiceProviderItem() Properties | Improve this Doc View Source ConstructorParameters Obsolete, to be removed. Declaration public List<string> ConstructorParameters { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source Implementation Fully qualified name for the service implementation. Declaration public string Implementation { get; set; } Property Value Type Description System.String | Improve this Doc View Source Service Fully qualified name for the service interface. Declaration public string Service { get; set; } Property Value Type Description System.String | Improve this Doc View Source ServiceLifetime Service life time. Declaration [JsonConverter(typeof(StringEnumConverter))] public ServiceLifetime ServiceLifetime { get; set; } Property Value Type Description Microsoft.Extensions.DependencyInjection.ServiceLifetime"
  },
  "api/OrpheusCore.Configuration.ConfigurationManager.html": {
    "href": "api/OrpheusCore.Configuration.ConfigurationManager.html",
    "title": "Class ConfigurationManager | Orpheus",
    "keywords": "Class ConfigurationManager Orpheus configuration manager. Inheritance System.Object ConfigurationManager Namespace : OrpheusCore.Configuration Assembly : OrpheusCore.dll Syntax public static class ConfigurationManager Properties | Improve this Doc View Source Configuration Current Orpheus Configuration Declaration public static OrpheusConfiguration Configuration { get; } Property Value Type Description OrpheusConfiguration | Improve this Doc View Source ConfigurationInstance Declaration public static IConfiguration ConfigurationInstance { get; } Property Value Type Description Microsoft.Extensions.Configuration.IConfiguration Methods | Improve this Doc View Source InitializeConfiguration(IConfiguration, IServiceCollection) Initialize configuration. Declaration public static void InitializeConfiguration(IConfiguration configuration, IServiceCollection services = null) Parameters Type Name Description Microsoft.Extensions.Configuration.IConfiguration configuration Microsoft.Extensions.DependencyInjection.IServiceCollection services | Improve this Doc View Source InitializeConfiguration(String) Initialize configuration from a file. Declaration public static void InitializeConfiguration(string configurationFile) Parameters Type Name Description System.String configurationFile | Improve this Doc View Source SaveConfiguration(String) Saves configuration to a file. Declaration public static void SaveConfiguration(string configurationFile) Parameters Type Name Description System.String configurationFile"
  },
  "api/OrpheusInterfaces.Schema.html": {
    "href": "api/OrpheusInterfaces.Schema.html",
    "title": "Namespace OrpheusInterfaces.Schema | Orpheus",
    "keywords": "Namespace OrpheusInterfaces.Schema Interfaces IForeignKeySchemaConstraint A foreign key constraint. IPrimaryKeySchemaConstraint A primary key constraint. ISchema Represents an Orpheus Schema. ISchemaConstraint Represents a schema constraint. ISchemaDataObject Base schema data object interface. ISchemaField Represents a schema field. ISchemaJoinDefinition Represents a schema join definition, which can be used by ISchemaObject when a schema is created. ISchemaObject Base schema object interface. ISchemaTable Create table schema interface. ISchemaView Create view schema object. ISchemaViewTable A data table that is used in a View. IUniqueKeySchemaConstraint A unique key constraint. Enums DDLAction DDL action. SchemaJoinOperator Join operator type. SchemaJoinType Schema join types. SchemaObjectType Type of a schema object. SchemaSort Schema sort type."
  },
  "api/OrpheusInterfaces.Schema.SchemaSort.html": {
    "href": "api/OrpheusInterfaces.Schema.SchemaSort.html",
    "title": "Enum SchemaSort | Orpheus",
    "keywords": "Enum SchemaSort Schema sort type. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public enum SchemaSort Fields Name Description ssAsc Sort ascending. ssDesc Sort descending."
  },
  "api/OrpheusInterfaces.Schema.ISchemaJoinDefinition.html": {
    "href": "api/OrpheusInterfaces.Schema.ISchemaJoinDefinition.html",
    "title": "Interface ISchemaJoinDefinition | Orpheus",
    "keywords": "Interface ISchemaJoinDefinition Represents a schema join definition, which can be used by ISchemaObject when a schema is created. Namespace : OrpheusInterfaces.Schema Assembly : OrpheusInterfaces.dll Syntax public interface ISchemaJoinDefinition Properties | Improve this Doc View Source JoinKeyField Key field name of the join object. Declaration string JoinKeyField { get; set; } Property Value Type Description System.String Key field name of the join object | Improve this Doc View Source JoinOperator Join operator SchemaJoinOperator . Declaration SchemaJoinOperator JoinOperator { get; set; } Property Value Type Description SchemaJoinOperator Join operator | Improve this Doc View Source JoinTableName Table name to perform the join. Declaration string JoinTableName { get; set; } Property Value Type Description System.String | Improve this Doc View Source JoinType Type of join SchemaJoinType . Declaration SchemaJoinType JoinType { get; set; } Property Value Type Description SchemaJoinType Type of join | Improve this Doc View Source KeyField Key field name of the main object. Declaration string KeyField { get; set; } Property Value Type Description System.String Key field name of the main object"
  },
  "api/OrpheusCore.html": {
    "href": "api/OrpheusCore.html",
    "title": "Namespace OrpheusCore | Orpheus",
    "keywords": "Namespace OrpheusCore Classes OrpheusDatabase Orpheus database. OrpheusModelHelper OrpheusModelHelper is a helper class that analyzes a model and can create primary-foreign keys and/or schema fields, when creating a schema. OrpheusModule OrpheusModule class represents a logical division and grouping of a set of tables. For example you can an OrdersModule, which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module, will be saved as well. All master-detail relationships and keys will be updated automatically. OrpheusModuleDefinition The OrpheusModuleDefinition can save and load a module definition. A module definition, includes relationship between the module tables and that is required for a module to be functional. IOrpheusModule OrpheusTable<T> Orpheus table is the core component of an Orpheus module. Every module needs to have at least 1 table. Holds all the data of the connected table. OrpheusTableKeyField OrpheusTableOptions Represents IOrpheusTable options, which can be used to instantiate a table. Enums ModifiedRecordAction Modified record action. Delegates ModelProperty Helper delegate, to be called when iterating through model's properties. PropertyAttribute Helper delegate, to be called when iterating through property's attributes."
  },
  "documentation/orpheus_module.html": {
    "href": "documentation/orpheus_module.html",
    "title": "Orpheus Module | Orpheus",
    "keywords": "Orpheus Module OrpheusModule class represents a logical division and grouping of a set of tables. For example you can have an OrdersModule , which will be comprised from many different tables. Orders,Customers,OrderLines etc. When you Save from the module level, all pending records in tables that belong to the module will be saved as well. All master-detail relationships and keys will be updated automatically. Whats does the above mean exactly? You can use an OrpheusModule to logically group/divide your business logic. Using the example above, having an OrdersModule , you can have your bussiness logic for adding, updating and deleting orders in one place. The OrpheusModule will manage for you, the master-detail relationships in your module. For example an OrderLine must always have an OrderId. If you were to use separate tables to achieve the same functionality, you would have to enter and synchronize the master-detail key values manually. A quick example Let's assume that you have the following model: Transactor model (Customer, Supplier) public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } Item model, the order item. public class TestModelItem { [PrimaryKey(false)] public Guid ItemId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [DefaultValue(0)] public double Price { get; set; } } Order models. public class TestModelOrder { [PrimaryKey] public Guid OrderId { get; set; } [ForeignKey(\"TestModelTransactor\", \"TransactorId\")] public Guid TransactorId { get; set; } public DateTime OrderDateTime { get; set; } } public class TestModelOrderLine { [PrimaryKey] public Guid OrderLineId { get; set; } [ForeignKey(\"TestModelOrder\",\"OrderId\")] public Guid OrderId { get; set; } [ForeignKey(\"TestModelItem\", \"ItemId\")] public Guid ItemId { get; set; } [DefaultValue(0)] public double Quantity { get; set; } public double Price { get; set; } public double TotalPrice { get; set; } } Creating an OrpheusModule There are a couple of ways to instantiate an OrpheusModule, the most straight forward way is to use an IOrpheusModuleDefinition . Creating the definition object. IOrpheusDatabase db = OrpheusCore.ServiceProvider.Provider.Resolve<IOrpheusDatabase>(); var moduleDefinition = db.CreateModuleDefinition(); Configuring the definition object. moduleDefinition.MainTableOptions = moduleDefinition.CreateTableOptions(\"TestModelOrder\",typeof(TestModelOrder)); moduleDefinition.ReferenceTableOptions.Add(moduleDefinition.CreateTableOptions(\"TestModelTransactor\", typeof(TestModelTransactor))); moduleDefinition.ReferenceTableOptions.Add(moduleDefinition.CreateTableOptions(\"TestModelItem\", typeof(TestModelItem))); var detailTableOptions = moduleDefinition.CreateTableOptions(\"TestModelOrderLine\", typeof(TestModelOrderLine)); detailTableOptions.MasterTableName = \"TestModelOrder\"; detailTableOptions.AddMasterKeyField(\"OrderId\"); moduleDefinition.DetailTableOptions.Add(detailTableOptions); Creating the module. var module = this.Database.CreateModule(moduleDefinition); Getting references to module tables. var transactors = module.GetReferenceTable<TestModelTransactor>(); var items = module.GetReferenceTable<TestModelItem>(); var orderLines = module.GetTable<TestModelOrderLine>(); var order = module.GetTable<TestModelOrder>(); Populating auxiliary data. //populating auxiliary data. transactors.Add(TestDatabase.GetTransactors()); items.Add(TestDatabase.GetItems()); using (var tr = this.Database.BeginTransaction()) { transactors.ExecuteInserts(tr); items.ExecuteInserts(tr); try { tr.Commit(); } catch { throw; } } transactors.Load(); items.Load(); Entering a new order. order.Add(new TestModelOrder() { OrderId = Guid.NewGuid(), OrderDateTime = DateTime.Now, TransactorId = transactors.Data.First().TransactorId }); //OrderId will be set automatically. orderLines.Add(new TestModelOrderLine() { ItemId = items.Data.First().ItemId, OrderLineId = Guid.NewGuid(), Price = 5, Quantity = 10, TotalPrice = 50 }); module.Save();"
  },
  "documentation/orpheus_table.html": {
    "href": "documentation/orpheus_table.html",
    "title": "Orpheus Table | Orpheus",
    "keywords": "Orpheus Table Orpheus table is the core class of OrpheusORM. It is responsible for the actual executing of the Delete Update Insert commands to modify data. It's also responsible for loading data, with or without criteria. So you can load all the data of the underlying database table or a subset of it. It is model agnostic and you can declaratively define the model for the table. The model for the table is/should be basically a representation of the database table fields. When to use it There is no limitation per se, for when to use the OrpheusTable class. From a logical separation perspective, it would make more sense, if you were saving data to a table that has no detail tables. Orpheus Module is the class to use, when you have multiple tables, with dependencies to each other. A quick example Let's assume you have the following model public enum TestModelTransactorType { ttCustomer, ttSupplier } public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } You can declare the table in your code public class TransactorsTable:OrpheusTable<TestModelTransactor> { } var transactorsTable = new TransactorsTable(); or create an instance of the table using the OrpheusDatabase IOrpheusDatabase db = OrpheusCore.ServiceProvider.Provider.Resolve<IOrpheusDatabase>(); var transactorsTable = db.CreateTable<TestModelTransactor>(); Note: The database does not keep a reference for the created table. After you have a table instance, you can add, update and delete data from your table. IOrpheusDatabase db = OrpheusCore.ServiceProvider.Provider.Resolve<IOrpheusDatabase>(); var transactorsTable = db.CreateTable<TestModelTransactor>(); var transactor = new TestModelTransactor(){ TransactorId = Guid.NewGuid(), Code = '001', Description = 'Transactor1' }; transactorsTable.Add(transactor); transactorsTable.Save(); Note:The table save will be executed within a transaction, so in case of any error, changes will be rolled back."
  },
  "documentation/index.html": {
    "href": "documentation/index.html",
    "title": "What is Orpheus | Orpheus",
    "keywords": "What is Orpheus Orpheus is a hybrid ORM. Somewhere between a micro-orm like Dapper or PetaPoco and a full scale ORM like EntityFramework. It supports decorated models and has a code-first schema generation engine, but that's optional. You don't have to use that, to use Orpheus. You can drop it on a project and use it as you would any of the other micro-orms. It's easy to use and very flexible on configuring, as all of its configuration is in a file. Here is a quick example on how to create an entity. var usersTable = this.Database.CreateTable<TestModelUser>(); usersTable.Add(new TestModelUser() { UserId = Guid.NewGuid(), UserName = \"Admin\", PasswordHash = \"!@##%$#%$%#DFSDasdf43w3re\", PasswordSalt = \"$%TG*(sdfsfr687\", Email = admin@test.com, Active = 1, UserProfileId = Guid.Parse(\"3C9EA0CB-885E-476F-A919-6E97484CE633\"), UserGroupId = Guid.Parse(\"ABA227B9-1E82-4FFB-9A50-94AED2D41869\") }); usersTable.Save(); or deleting an entity var usersTable = this.Database.CreateTable<TestModelUser>(); usersTable.Delete(new TestModelUser() { UserId = Guid.Parse(\"86AFD459-ABCB-4623-B375-AA82F8B36590\"), }); usersTable.Save(); Orpheus Documentation Here you can find information regarding the key/core class of OrpheusORM, understand their purpose and how to use them. Orpheus Table Orpheus Module Orpheus DI Configuration Orpheus DDL Helper"
  },
  "documentation/orpheus_and_di.html": {
    "href": "documentation/orpheus_and_di.html",
    "title": "Orpheus and DI | Orpheus",
    "keywords": "Orpheus and DI One of the first things that need to happen in an OrpheusORM application, is to initialize Orpheus's configuration. Why use DI? The reason for using an IoC container, is configurability and extensibility. Having all the configuration in a file, the consumer can define the database engine of his choosing as long as it implements System.Data.IDbConnection , or a different logger component as long as it implements Microsoft.Extensions.Logging.ILogger . Note: At the moment only SQL Server and MySQL have been tested. Other DB engines might work, but there is no guarantee. Read about Microsoft's DI here Agnostic Database Engine By design Orpheus, does not depend nor include any code that targets specifically a database engine. This means that the consumer will need to somehow configure, which database engine will Orpheus target. Here comes into play Orpheus's configuration. Either by file or by code, you can define the database engine for Orpheus. Configuration by file One easy way to configure Orpheus is by using a configuration file. The configuration file, is basically a JSON file that has the DI configuration for Orpheus. To initialize the configuration you can use the Orpheus configuration object. OrpheusCore.Configuration.ConfigurationManager.InitializeConfiguration(IConfiguration configuration, IServiceCollection services = null); If no services are defined, then Orpheus will be in self-service mode. This means that it will create its own service collection and register all required services there. Alternatively you can define a file name. This will implicitly set Orpheus to self-service mode. OrpheusCore.Configuration.ConfigurationManager.InitializeConfiguration(\"MyPath\\Orpheus.config\"); Note: You don't have to have a separate file for Orpheus's configuration. Its configuration can live inside your existing configuration file. Configuration Sample { \"Services\": [ { \"Implementation\": \"System.Data.SqlClient.SqlConnection, System.Data.SqlClient, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", \"Service\": \"System.Data.IDbConnection, System.Data.Common, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", \"ServiceLifeTime\": \"Transient\" }, { \"Implementation\": \"OrpheusCore.OrpheusDatabase, OrpheusCore, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", \"Service\": \"OrpheusInterfaces.IOrpheusDatabase, OrpheusInterfaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", \"ServiceLifeTime\": \"Transient\" }, { \"Implementation\": \"OrpheusSQLDDLHelper.OrpheusSQLServerDDLHelper, OrpheusSQLServerDDLHelper, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", \"Service\": \"OrpheusInterfaces.IOrpheusDDLHelper, OrpheusInterfaces, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", \"ServiceLifeTime\": \"Transient\" }, { \"Implementation\": \"OrpheusLogger.OrpheusFileLogger, OrpheusLogger, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\", \"Service\": \"Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.Abstractions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\", \"ServiceLifeTime\": \"Singleton\" } ], \"DatabaseConnection\": { \"ConfigurationName\": \"ServiceConnection\", \"Server\": \"[YourServer]\", \"DatabaseName\": \"[YourDatabase]\", \"UseIntegratedSecurity\": true } , \"Logging\": { \"Level\": \"Debug\", \"MaxFileSize\": 1 } }"
  },
  "documentation/orpheus_creating_schema.html": {
    "href": "documentation/orpheus_creating_schema.html",
    "title": "Creating your schema | Orpheus",
    "keywords": "Creating your schema Orpheus has a built-in schema generator engine, that you can use to create the database schema for your application. It's not mandatory to use it, in order to use Orpheus, but if you are starting a new project, you might find it useful. Schema Creation Options In the ORM frameworks world, there are a few different options. Here are a couple of the main ones. Database First Where the ORM reads your database and generates the models. Code First Where you write your models and the ORM creates the schema for you. Orpheus supports the second option, where you write up your models and decorate them accordingly based on your needs. Decorating your classes with schema attributes There are plenty of attributes that you can use to decorate your classes and/or properties. Have a look at Orpheus Attributes But let's highlight some common usage scenarios. Foreign Key /// <summary> /// Foreign key attribute constructor. /// </summary> /// <param name=\"referenceTable\">The referenced table name</param> /// <param name=\"referenceField\">The referenced field name</param> /// <param name=\"onDeleteCascade\">Delete cascade flag</param> /// <param name=\"onUpdateCascade\">Update cascade flag</param> public ForeignKey(string referenceTable, string referenceField,bool onDeleteCascade = false, bool onUpdateCascade = false) Here is an invoice model, that depends on multiple different models. Shipping type, payment method etc. /// <summary> /// A class that represents an \"Invoice\" entity. /// </summary> public class Invoice { /// <summary> /// If the invoice created is a transformation of another invoice. /// This will help traceability. /// </summary> [ForeignKey(\"Invoice\",\"Id\")] public Guid? OriginalInvoice { get; set; } /// <summary> /// Invoice type id. /// </summary> [ForeignKey(\"InvoiceType\",\"Id\")] public Guid InvoiceTypeId { get; set; } /// <summary> /// Invoice's transactor. /// </summary> [ForeignKey(\"Transactor\",\"Id\")] public Guid TransactorId { get; set; } /// <summary> /// Fiscal year where the invoice belongs to. /// </summary> [ForeignKey(\"FiscalYear\",\"Id\")] public Guid FiscalYearId { get; set; } /// <summary> /// Invoice's shipping method. /// </summary> [ForeignKey(\"ShippingMethod\",\"Id\")] public Guid ShippingMethodId { get; set; } /// <summary> /// Invoice's payment method. /// </summary> [ForeignKey(\"PaymentMethod\",\"Id\")] public Guid PaymentMethodId { get; set; } /// <summary> /// Invoice's date and time. /// </summary> public DateTime InvoiceDate { get; set; } .... Composite Primary/Unique Key A composite primary/unique key is a key that is comprised from more than one fields. /// <summary> /// Unique composite key attribute, to decorate models that have primary or unique keys that are comprised from than one field. /// </summary> public class UniqueCompositeKey : OrpheusCompositeKeyBaseAttribute { /// <summary> /// Primary composite key. /// </summary> /// <param name=\"fields\">Fields that are part of the key</param> /// <param name=\"sort\">Sort direction</param> public UniqueCompositeKey(string[] fields,string sort = null) : base(fields) { } } In the following example, an attribute can only be associated with only one attribute group. /// <summary> /// Class that represents an attribute. An attribute can be associated with only one attribute group. /// </summary> [UniqueCompositeKey(new string[] {\"Id\", \"AttributeGroupId\" })] public class Attribute { [ForeignKey(\"AttributeGroup\",\"Id\")] public Guid AttributeGroupId { get; set; } } Creating an Orpheus Schema You can use IOrpheusDatabase to create an ISchema object. /// <summary> /// Creates a schema object and sets it's database. /// </summary> /// <param name=\"id\">Schema id</param> /// <param name=\"description\">Schema description</param> /// <param name=\"version\">Schema version</param> /// <returns>An ISchema instance</returns> ISchema CreateSchema(Guid id, string description, double version); ISchema is the object were you have to register your models, that will eventually be your database schema. There are a couple of different ways to register a model into a schema, but the most straight forward one, is to register it via its type. /// <summary> /// Creates a schema table and initializes table-name, dependencies and generating fields from a model, if provided. /// </summary> /// <typeparam name=\"T\"></typeparam> /// <param name=\"dependencies\"></param> /// <returns></returns> ISchemaTable AddSchemaTable<T>(List<ISchemaObject> dependencies = null) where T : class; Here is an example Schema.AddSchemaTable<MercuryTransactor>(); There is built in support for dependencies between your models. So if your model has an \"Id\" reference to another, this will be translated into a foreign key constraint. In order for the Orpheus schema to be aware of that dependency you have to register it. So if your invoice table depends on the invoice type table, the code would like this. Schema.AddSchemaTable<InvoiceType>(); var invoice = this.schema.AddSchemaTable<Invoice>(); invoice.AddDependency<MercuryInvoiceType>(); After you have registered all your models, you need only to execute the schema. Schema.Execute(); This will iterate through the registered models, resolve the dependencies and create the database schema. Updating an existing schema Updating a schema, particularly a complex one, is always tricky. Orpheus's schema builder provides build-in support, for reconciling differences between your models and the corresponding tables. The preferred option would be, when you have a schema change, to instantiate a new ISchema and register only the models that have changes. This is definitely the most performant way to update your schema, using Orpheus, since only the models with the changes will be executed. An added benefit, is that you can keep a historic record of your schema changes. Alternatively you can always use the same ISchema object and just change your models that are already registered and Orpheus will reconcile field and constraint differences."
  },
  "documentation/orpheus_ddl_helper.html": {
    "href": "documentation/orpheus_ddl_helper.html",
    "title": "Orpheus DDL Helper | Orpheus",
    "keywords": "Orpheus DDL Helper Orpheus is database engine type agnostic. This means that it does not include any code targeting a specific database engine. Despite the fact, that SQL based database engines use the SQL language, there are differences between them. Here is where the IOrpheusDDLHelper comes into play. Every IOrpheusDatabase requires a IOrpheusDDLHelper . Orpheus provides out of the box, helpers for MS SQL and MySQL database engines. So what do these helpers do? As mentioned above, they reconcile differences between the different database engines. For example MS SQL natively supports the UID type while MySQL does not. The helper will give this kind of information to the IOrpheusDatabase . You can implement your own IOrpheusDDLHelper and register it in OrpheusORM. Implementing a custom IOrpheusDDLHelper Implementing your own DDLHelper is not a requirement. However if Orpheus does not provide one for you, for your database engine, it's quite easy to implement your own. All you have to do is to create a class that implements IOrpheusDDLHelper ,implement your logic and register it in Orpheus. Here is how you can register a custom DDL helper."
  },
  "documentation/benchmarks/orpheus_benchmarking_results_1.1.3.html": {
    "href": "documentation/benchmarks/orpheus_benchmarking_results_1.1.3.html",
    "title": "Benchmark results | Orpheus",
    "keywords": "Benchmark results Machine details Attribute Value Operating System Windows 10 CPU I7 Database engine SQL Server Database engine location Local HDD type SSD RAM 16GB Benchmark type Attribute Value Serialization type POCO Benchmark framework BenchmarkDotNet Performed on September 24th 2018 Orpheus version 1.1.3 Runtime .NET Core 2.0.0 (CoreCLR 4.6.00001.0, CoreFX 4.6.25519.03), 64bit RyuJIT Model used public enum TestModelTransactorType { ttCustomer, ttSupplier } public class TestModelTransactor { [PrimaryKey] public Guid TransactorId { get; set; } [Length(30)] public string Code { get; set; } [Length(120)] public string Description { get; set; } [Length(120)] public string Address { get; set; } [Length(250)] public string Email { get; set; } public TestModelTransactorType Type { get; set; } } Insert results Inserting rows in a batch. One transaction per test. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Insert10Rows 1.056 ms 0.0789 ms 0.0659 ms 1.00 0.00 31.2500 - 65.78 KB Insert100Rows 7.785 ms 0.5106 ms 0.4776 ms 7.40 0.59 234.3750 - 491.71 KB Insert1000Rows 74.869 ms 3.0477 ms 2.8508 ms 71.16 4.65 1000.0000 285.7143 4750.32 KB Load results Loading and serializing one model/record per iteration. Method Mean Error StdDev Scaled ScaledSD Gen 0 Allocated Load50RowsOneAtATime 4.160 ms 0.1161 ms 0.1029 ms 1.00 0.00 171.8750 360.12 KB Load500RowsOneAtATime 41.372 ms 1.2365 ms 1.1566 ms 9.95 0.36 1692.3077 3601.18 KB Load5000RowsOneAtATime 418.364 ms 10.0790 ms 8.9347 ms 100.62 3.18 17500.0000 36009.47 KB Update results Updating rows in a batch. One transaction per test. 4 model fields have been updated. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Update10Rows 11.83 ms 1.2164 ms 1.0783 ms 1.00 0.00 218.7500 - 469.54 KB Update100Rows 11.57 ms 0.7881 ms 0.7372 ms 0.98 0.10 218.7500 - 469.54 KB Update1000Rows 112.65 ms 4.0897 ms 3.4151 ms 9.59 0.84 1000.0000 400.0000 4695.44 KB Delete results Deleting rows in a batch. One transaction per test. Method Mean Error StdDev Scaled ScaledSD Gen 0 Gen 1 Allocated Delete10Rows 690.5 us 7.412 us 5.787 us 1.00 0.00 7.8125 - 17.01 KB Delete100Rows 6,057.5 us 133.745 us 111.683 us 8.77 0.17 78.1250 - 163.27 KB Delete1000Rows 59,989.5 us 874.615 us 730.343 us 86.88 1.23 444.4444 111.1111 1625.84 KB Legend Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Scaled : Mean(CurrentBenchmark) / Mean(BaselineBenchmark) ScaledSD : Standard deviation of ratio of distribution of [CurrentBenchmark] and [BaselineBenchmark] Gen 0 : GC Generation 0 collects per 1k Operations Gen 1 : GC Generation 1 collects per 1k Operations Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 ms : 1 Millisecond (0.001 sec) 1 us : 1 Microsecond (0.000001 sec)"
  }
}